{"ast":null,"code":"import { __assign, __rest, __spreadArray } from \"tslib\";\nimport * as React from 'react';\nimport { ContextualMenuItemType } from './ContextualMenu.types';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { FocusZone, FocusZoneDirection, FocusZoneTabbableElements } from '../../FocusZone';\nimport { divProperties, getNativeProps, shallowCompare, assign, classNamesFunction, css, getFirstFocusable, getLastFocusable, getRTL, KeyCodes, shouldWrapFocus, isIOS, isMac, memoizeFunction, getPropsWithDefaults, getDocument, FocusRects } from '../../Utilities';\nimport { hasSubmenu, getIsChecked, isItemDisabled } from '../../utilities/contextualMenu/index';\nimport { Callout } from '../../Callout';\nimport { ContextualMenuItem } from './ContextualMenuItem';\nimport { ContextualMenuSplitButton, ContextualMenuButton, ContextualMenuAnchor } from './ContextualMenuItemWrapper/index';\nimport { concatStyleSetsWithProps } from '../../Styling';\nimport { getItemStyles } from './ContextualMenu.classNames';\nimport { useTarget, usePrevious, useAsync, useWarnings, useId, useIsomorphicLayoutEffect } from '@fluentui/react-hooks';\nimport { useResponsiveMode, ResponsiveMode } from '../../ResponsiveMode';\nimport { MenuContext } from '../../utilities/MenuContext/index';\nvar getClassNames = classNamesFunction();\nvar getContextualMenuItemClassNames = classNamesFunction();\n// The default ContextualMenu properties have no items and beak, the default submenu direction is right and top.\nvar DEFAULT_PROPS = {\n  items: [],\n  shouldFocusOnMount: true,\n  gapSpace: 0,\n  directionalHint: DirectionalHint.bottomAutoEdge,\n  beakWidth: 16\n};\nexport function getSubmenuItems(item, options) {\n  var target = options === null || options === void 0 ? void 0 : options.target;\n  // eslint-disable-next-line deprecation/deprecation\n  var items = item.subMenuProps ? item.subMenuProps.items : item.items;\n  if (items) {\n    var overrideItems = [];\n    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n      var subItem = items_1[_i];\n      if (subItem.preferMenuTargetAsEventTarget) {\n        // For sub-items which need an overridden target, intercept `onClick`\n        var onClick = subItem.onClick,\n          contextItem = __rest(subItem, [\"onClick\"]);\n        overrideItems.push(__assign(__assign({}, contextItem), {\n          onClick: getOnClickWithOverrideTarget(onClick, target)\n        }));\n      } else {\n        overrideItems.push(subItem);\n      }\n    }\n    return overrideItems;\n  }\n}\n/**\n * Returns true if a list of menu items can contain a checkbox\n */\nexport function canAnyMenuItemsCheck(items) {\n  return items.some(function (item) {\n    if (item.canCheck) {\n      return true;\n    }\n    // If the item is a section, check if any of the items in the section can check.\n    if (item.sectionProps && item.sectionProps.items.some(function (submenuItem) {\n      return submenuItem.canCheck === true;\n    })) {\n      return true;\n    }\n    return false;\n  });\n}\nvar NavigationIdleDelay = 250; /* ms */\nvar COMPONENT_NAME = 'ContextualMenu';\nvar _getMenuItemStylesFunction = memoizeFunction(function () {\n  var styles = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    styles[_i] = arguments[_i];\n  }\n  return function (styleProps) {\n    return concatStyleSetsWithProps.apply(void 0, __spreadArray([styleProps, getItemStyles], styles));\n  };\n});\n//#region Custom hooks\nfunction useVisibility(props, targetWindow) {\n  var _a = props.hidden,\n    hidden = _a === void 0 ? false : _a,\n    onMenuDismissed = props.onMenuDismissed,\n    onMenuOpened = props.onMenuOpened;\n  var previousHidden = usePrevious(hidden);\n  var onMenuOpenedRef = React.useRef(onMenuOpened);\n  var onMenuClosedRef = React.useRef(onMenuDismissed);\n  var propsRef = React.useRef(props);\n  onMenuOpenedRef.current = onMenuOpened;\n  onMenuClosedRef.current = onMenuDismissed;\n  propsRef.current = props;\n  React.useEffect(function () {\n    var _a, _b;\n    // Don't issue dismissed callbacks on initial mount\n    if (hidden && previousHidden === false) {\n      (_a = onMenuClosedRef.current) === null || _a === void 0 ? void 0 : _a.call(onMenuClosedRef, propsRef.current);\n    } else if (!hidden && previousHidden !== false) {\n      (_b = onMenuOpenedRef.current) === null || _b === void 0 ? void 0 : _b.call(onMenuOpenedRef, propsRef.current);\n    }\n  }, [hidden, previousHidden]);\n  // Issue onDismissedCallback on unmount\n  React.useEffect(function () {\n    return function () {\n      var _a;\n      return (_a = onMenuClosedRef.current) === null || _a === void 0 ? void 0 : _a.call(onMenuClosedRef, propsRef.current);\n    };\n  }, []);\n}\nfunction useSubMenuState(_a, dismiss) {\n  var hidden = _a.hidden,\n    items = _a.items,\n    theme = _a.theme,\n    className = _a.className,\n    id = _a.id,\n    menuTarget = _a.target;\n  var _b = React.useState(),\n    expandedMenuItemKey = _b[0],\n    setExpandedMenuItemKey = _b[1];\n  var _c = React.useState(),\n    submenuTarget = _c[0],\n    setSubmenuTarget = _c[1];\n  /** True if the menu was expanded by mouse click OR hover (as opposed to by keyboard) */\n  var _d = React.useState(),\n    shouldFocusOnContainer = _d[0],\n    setShouldFocusOnContainer = _d[1];\n  var subMenuId = useId(COMPONENT_NAME, id);\n  var closeSubMenu = React.useCallback(function () {\n    setShouldFocusOnContainer(undefined);\n    setExpandedMenuItemKey(undefined);\n    setSubmenuTarget(undefined);\n  }, []);\n  var openSubMenu = React.useCallback(function (_a, target, focusContainer) {\n    var submenuItemKey = _a.key;\n    if (expandedMenuItemKey === submenuItemKey) {\n      return;\n    }\n    target.focus();\n    setShouldFocusOnContainer(focusContainer);\n    setExpandedMenuItemKey(submenuItemKey);\n    setSubmenuTarget(target);\n  }, [expandedMenuItemKey]);\n  React.useEffect(function () {\n    if (hidden) {\n      closeSubMenu();\n    }\n  }, [hidden, closeSubMenu]);\n  var onSubMenuDismiss = useOnSubmenuDismiss(dismiss, closeSubMenu);\n  var getSubmenuProps = function () {\n    var item = findItemByKeyFromItems(expandedMenuItemKey, items);\n    var submenuProps = null;\n    if (item) {\n      submenuProps = {\n        items: getSubmenuItems(item, {\n          target: menuTarget\n        }),\n        target: submenuTarget,\n        onDismiss: onSubMenuDismiss,\n        isSubMenu: true,\n        id: subMenuId,\n        shouldFocusOnMount: true,\n        shouldFocusOnContainer: shouldFocusOnContainer,\n        directionalHint: getRTL(theme) ? DirectionalHint.leftTopEdge : DirectionalHint.rightTopEdge,\n        className: className,\n        gapSpace: 0,\n        isBeakVisible: false\n      };\n      if (item.subMenuProps) {\n        assign(submenuProps, item.subMenuProps);\n      }\n      if (item.preferMenuTargetAsEventTarget) {\n        var onItemClick = item.onItemClick;\n        submenuProps.onItemClick = getOnClickWithOverrideTarget(onItemClick, menuTarget);\n      }\n    }\n    return submenuProps;\n  };\n  return [expandedMenuItemKey, openSubMenu, getSubmenuProps, onSubMenuDismiss];\n}\nfunction useShouldUpdateFocusOnMouseMove(_a) {\n  var delayUpdateFocusOnHover = _a.delayUpdateFocusOnHover,\n    hidden = _a.hidden;\n  var shouldUpdateFocusOnMouseEvent = React.useRef(!delayUpdateFocusOnHover);\n  var gotMouseMove = React.useRef(false);\n  React.useEffect(function () {\n    shouldUpdateFocusOnMouseEvent.current = !delayUpdateFocusOnHover;\n    gotMouseMove.current = hidden ? false : !delayUpdateFocusOnHover && gotMouseMove.current;\n  }, [delayUpdateFocusOnHover, hidden]);\n  var onMenuFocusCapture = React.useCallback(function () {\n    if (delayUpdateFocusOnHover) {\n      shouldUpdateFocusOnMouseEvent.current = false;\n    }\n  }, [delayUpdateFocusOnHover]);\n  return [shouldUpdateFocusOnMouseEvent, gotMouseMove, onMenuFocusCapture];\n}\nfunction usePreviousActiveElement(_a, targetWindow, hostElement) {\n  var hidden = _a.hidden,\n    onRestoreFocus = _a.onRestoreFocus;\n  var previousActiveElement = React.useRef();\n  var tryFocusPreviousActiveElement = React.useCallback(function (options) {\n    var _a, _b;\n    if (onRestoreFocus) {\n      onRestoreFocus(options);\n    } else if (options === null || options === void 0 ? void 0 : options.documentContainsFocus) {\n      // Make sure that the focus method actually exists\n      // In some cases the object might exist but not be a real element.\n      // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n      (_b = (_a = previousActiveElement.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n  }, [onRestoreFocus]);\n  useIsomorphicLayoutEffect(function () {\n    var _a, _b;\n    if (!hidden) {\n      var newElement = targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement;\n      if (!((_a = hostElement.current) === null || _a === void 0 ? void 0 : _a.contains(newElement)) && newElement.tagName !== 'BODY') {\n        previousActiveElement.current = newElement;\n      }\n    } else if (previousActiveElement.current) {\n      tryFocusPreviousActiveElement({\n        originalElement: previousActiveElement.current,\n        containsFocus: true,\n        documentContainsFocus: ((_b = getDocument()) === null || _b === void 0 ? void 0 : _b.hasFocus()) || false\n      });\n      previousActiveElement.current = undefined;\n    }\n  }, [hidden, targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement, tryFocusPreviousActiveElement, hostElement]);\n  return [tryFocusPreviousActiveElement];\n}\nfunction useKeyHandlers(_a, dismiss, hostElement, openSubMenu) {\n  var theme = _a.theme,\n    isSubMenu = _a.isSubMenu,\n    _b = _a.focusZoneProps,\n    _c = _b === void 0 ? {} : _b,\n    checkForNoWrap = _c.checkForNoWrap,\n    _d = _c.direction,\n    focusZoneDirection = _d === void 0 ? FocusZoneDirection.vertical : _d;\n  /** True if the most recent keydown event was for alt (option) or meta (command). */\n  var lastKeyDownWasAltOrMeta = React.useRef();\n  /**\n   * Calls `shouldHandleKey` to determine whether the keyboard event should be handled;\n   * if so, stops event propagation and dismisses menu(s).\n   * @param ev - The keyboard event.\n   * @param shouldHandleKey - Returns whether we should handle this keyboard event.\n   * @param dismissAllMenus - If true, dismiss all menus. Otherwise, dismiss only the current menu.\n   * Only does anything if `shouldHandleKey` returns true.\n   * @returns Whether the event was handled.\n   */\n  var keyHandler = function (ev, shouldHandleKey, dismissAllMenus) {\n    var handled = false;\n    if (shouldHandleKey(ev)) {\n      dismiss(ev, dismissAllMenus);\n      ev.preventDefault();\n      ev.stopPropagation();\n      handled = true;\n    }\n    return handled;\n  };\n  /**\n   * Checks if the submenu should be closed\n   */\n  var shouldCloseSubMenu = function (ev) {\n    var submenuCloseKey = getRTL(theme) ? KeyCodes.right : KeyCodes.left;\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which !== submenuCloseKey || !isSubMenu) {\n      return false;\n    }\n    return !!(focusZoneDirection === FocusZoneDirection.vertical || checkForNoWrap && !shouldWrapFocus(ev.target, 'data-no-horizontal-wrap'));\n  };\n  var shouldHandleKeyDown = function (ev) {\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      ev.which === KeyCodes.escape || shouldCloseSubMenu(ev) ||\n      // eslint-disable-next-line deprecation/deprecation\n      ev.which === KeyCodes.up && (ev.altKey || ev.metaKey)\n    );\n  };\n  var onKeyDown = function (ev) {\n    // Take note if we are processing an alt (option) or meta (command) keydown.\n    // See comment in shouldHandleKeyUp for reasoning.\n    lastKeyDownWasAltOrMeta.current = isAltOrMeta(ev);\n    // On Mac, pressing escape dismisses all levels of native context menus\n    // eslint-disable-next-line deprecation/deprecation\n    var dismissAllMenus = ev.which === KeyCodes.escape && (isMac() || isIOS());\n    return keyHandler(ev, shouldHandleKeyDown, dismissAllMenus);\n  };\n  /**\n   * We close the menu on key up only if ALL of the following are true:\n   * - Most recent key down was alt or meta (command)\n   * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n   *   expand/collapse the menu)\n   * - We're not on a Mac (or iOS)\n   *\n   * This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n   * closing any open context menus. There is not a similar behavior on Macs.\n   */\n  var shouldHandleKeyUp = function (ev) {\n    var keyPressIsAltOrMetaAlone = lastKeyDownWasAltOrMeta.current && isAltOrMeta(ev);\n    lastKeyDownWasAltOrMeta.current = false;\n    return !!keyPressIsAltOrMetaAlone && !(isIOS() || isMac());\n  };\n  var onKeyUp = function (ev) {\n    return keyHandler(ev, shouldHandleKeyUp, true /* dismissAllMenus */);\n  };\n\n  var onMenuKeyDown = function (ev) {\n    // Mark as handled if onKeyDown returns true (for handling collapse cases)\n    // or if we are attempting to expand a submenu\n    var handled = onKeyDown(ev);\n    if (handled || !hostElement.current) {\n      return;\n    }\n    // If we have a modifier key being pressed, we do not want to move focus.\n    // Otherwise, handle up and down keys.\n    var hasModifier = !!(ev.altKey || ev.metaKey);\n    // eslint-disable-next-line deprecation/deprecation\n    var isUp = ev.which === KeyCodes.up;\n    // eslint-disable-next-line deprecation/deprecation\n    var isDown = ev.which === KeyCodes.down;\n    if (!hasModifier && (isUp || isDown)) {\n      var elementToFocus = isUp ? getLastFocusable(hostElement.current, hostElement.current.lastChild, true) : getFirstFocusable(hostElement.current, hostElement.current.firstChild, true);\n      if (elementToFocus) {\n        elementToFocus.focus();\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n  var onItemKeyDown = function (item, ev) {\n    var openKey = getRTL(theme) ? KeyCodes.left : KeyCodes.right;\n    if (!item.disabled && (\n    // eslint-disable-next-line deprecation/deprecation\n    ev.which === openKey || ev.which === KeyCodes.enter || ev.which === KeyCodes.down && (ev.altKey || ev.metaKey))) {\n      openSubMenu(item, ev.currentTarget);\n      ev.preventDefault();\n    }\n  };\n  return [onKeyDown, onKeyUp, onMenuKeyDown, onItemKeyDown];\n}\nfunction useScrollHandler(asyncTracker) {\n  var isScrollIdle = React.useRef(true);\n  var scrollIdleTimeoutId = React.useRef();\n  /**\n   * Scroll handler for the callout to make sure the mouse events\n   * for updating focus are not interacting during scroll\n   */\n  var onScroll = function () {\n    if (!isScrollIdle.current && scrollIdleTimeoutId.current !== undefined) {\n      asyncTracker.clearTimeout(scrollIdleTimeoutId.current);\n      scrollIdleTimeoutId.current = undefined;\n    } else {\n      isScrollIdle.current = false;\n    }\n    scrollIdleTimeoutId.current = asyncTracker.setTimeout(function () {\n      isScrollIdle.current = true;\n    }, NavigationIdleDelay);\n  };\n  return [onScroll, isScrollIdle];\n}\nfunction useOnSubmenuDismiss(dismiss, closeSubMenu) {\n  var isMountedRef = React.useRef(false);\n  React.useEffect(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  /**\n   * This function is called ASYNCHRONOUSLY, and so there is a chance it is called\n   * after the component is unmounted. The isMountedRef is added to prevent\n   * from calling setState() after unmount. Do NOT copy this pattern in synchronous\n   * code.\n   */\n  var onSubMenuDismiss = function (ev, dismissAll) {\n    if (dismissAll) {\n      dismiss(ev, dismissAll);\n    } else if (isMountedRef.current) {\n      closeSubMenu();\n    }\n  };\n  return onSubMenuDismiss;\n}\nfunction useSubmenuEnterTimer(_a, asyncTracker) {\n  var _b = _a.subMenuHoverDelay,\n    subMenuHoverDelay = _b === void 0 ? NavigationIdleDelay : _b;\n  var enterTimerRef = React.useRef(undefined);\n  var cancelSubMenuTimer = function () {\n    if (enterTimerRef.current !== undefined) {\n      asyncTracker.clearTimeout(enterTimerRef.current);\n      enterTimerRef.current = undefined;\n    }\n  };\n  var startSubmenuTimer = function (onTimerExpired) {\n    enterTimerRef.current = asyncTracker.setTimeout(function () {\n      onTimerExpired();\n      cancelSubMenuTimer();\n    }, subMenuHoverDelay);\n  };\n  return [cancelSubMenuTimer, startSubmenuTimer, enterTimerRef];\n}\nfunction useMouseHandlers(props, isScrollIdle, subMenuEntryTimer, targetWindow, shouldUpdateFocusOnMouseEvent, gotMouseMove, expandedMenuItemKey, hostElement, startSubmenuTimer, cancelSubMenuTimer, openSubMenu, onSubMenuDismiss, dismiss) {\n  var menuTarget = props.target;\n  var onItemMouseEnterBase = function (item, ev, target) {\n    if (shouldUpdateFocusOnMouseEvent.current) {\n      gotMouseMove.current = true;\n    }\n    if (shouldIgnoreMouseEvent()) {\n      return;\n    }\n    updateFocusOnMouseEvent(item, ev, target);\n  };\n  var onItemMouseMoveBase = function (item, ev, target) {\n    var targetElement = ev.currentTarget;\n    // Always do this check to make sure we record a mouseMove if needed (even if we are timed out)\n    if (shouldUpdateFocusOnMouseEvent.current) {\n      gotMouseMove.current = true;\n    } else {\n      return;\n    }\n    if (!isScrollIdle.current || subMenuEntryTimer.current !== undefined || targetElement === (targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement)) {\n      return;\n    }\n    updateFocusOnMouseEvent(item, ev, target);\n  };\n  var shouldIgnoreMouseEvent = function () {\n    return !isScrollIdle.current || !gotMouseMove.current;\n  };\n  var onMouseItemLeave = function (item, ev) {\n    var _a;\n    if (shouldIgnoreMouseEvent()) {\n      return;\n    }\n    cancelSubMenuTimer();\n    if (expandedMenuItemKey !== undefined) {\n      return;\n    }\n    /**\n     * IE11 focus() method forces parents to scroll to top of element.\n     * Edge and IE expose a setActive() function for focusable divs that\n     * sets the page focus but does not scroll the parent element.\n     */\n    if (hostElement.current.setActive) {\n      try {\n        hostElement.current.setActive();\n      } catch (e) {\n        /* no-op */\n      }\n    } else {\n      (_a = hostElement.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  };\n  /**\n   * Handles updating focus when mouseEnter or mouseMove fire.\n   * As part of updating focus, This function will also update\n   * the expand/collapse state accordingly.\n   */\n  var updateFocusOnMouseEvent = function (item, ev, target) {\n    var targetElement = target ? target : ev.currentTarget;\n    if (item.key === expandedMenuItemKey) {\n      return;\n    }\n    cancelSubMenuTimer();\n    // If the menu is not expanded we can update focus without any delay\n    if (expandedMenuItemKey === undefined) {\n      targetElement.focus();\n    }\n    // Delay updating expanding/dismissing the submenu\n    // and only set focus if we have not already done so\n    if (hasSubmenu(item)) {\n      ev.stopPropagation();\n      startSubmenuTimer(function () {\n        targetElement.focus();\n        openSubMenu(item, targetElement, true);\n      });\n    } else {\n      startSubmenuTimer(function () {\n        onSubMenuDismiss(ev);\n        targetElement.focus();\n      });\n    }\n  };\n  var onItemClick = function (item, ev) {\n    onItemClickBase(item, ev, ev.currentTarget);\n  };\n  var onItemClickBase = function (item, ev, target) {\n    var items = getSubmenuItems(item, {\n      target: menuTarget\n    });\n    // Cancel an async menu item hover timeout action from being taken and instead\n    // just trigger the click event instead.\n    cancelSubMenuTimer();\n    if (!hasSubmenu(item) && (!items || !items.length)) {\n      // This is an item without a menu. Click it.\n      executeItemClick(item, ev);\n    } else {\n      if (item.key !== expandedMenuItemKey) {\n        // This has a collapsed sub menu. Expand it.\n        // focus on the container by default when the menu is opened with a click event\n        // this differentiates from a keyboard interaction triggering the click event\n        var shouldFocusOnContainer = typeof props.shouldFocusOnContainer === 'boolean' ? props.shouldFocusOnContainer : ev.nativeEvent.pointerType === 'mouse';\n        openSubMenu(item, target, shouldFocusOnContainer);\n      }\n    }\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n  var onAnchorClick = function (item, ev) {\n    executeItemClick(item, ev);\n    ev.stopPropagation();\n  };\n  var executeItemClick = function (item, ev) {\n    if (item.disabled || item.isDisabled) {\n      return;\n    }\n    if (item.preferMenuTargetAsEventTarget) {\n      overrideTarget(ev, menuTarget);\n    }\n    var shouldDismiss = false;\n    if (item.onClick) {\n      shouldDismiss = !!item.onClick(ev, item);\n    } else if (props.onItemClick) {\n      shouldDismiss = !!props.onItemClick(ev, item);\n    }\n    if (shouldDismiss || !ev.defaultPrevented) {\n      dismiss(ev, true);\n    }\n  };\n  return [onItemMouseEnterBase, onItemMouseMoveBase, onMouseItemLeave, onItemClick, onAnchorClick, executeItemClick, onItemClickBase];\n}\n//#endregion\nexport var ContextualMenuBase = React.memo(React.forwardRef(function (propsWithoutDefaults, forwardedRef) {\n  var _a;\n  var _b = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults),\n    ref = _b.ref,\n    props = __rest(_b, [\"ref\"]);\n  var hostElement = React.useRef(null);\n  var asyncTracker = useAsync();\n  var menuId = useId(COMPONENT_NAME, props.id);\n  useWarnings({\n    name: COMPONENT_NAME,\n    props: props,\n    deprecations: {\n      getMenuClassNames: 'styles'\n    }\n  });\n  var dismiss = function (ev, dismissAll) {\n    var _a;\n    return (_a = props.onDismiss) === null || _a === void 0 ? void 0 : _a.call(props, ev, dismissAll);\n  };\n  var _c = useTarget(props.target, hostElement),\n    targetRef = _c[0],\n    targetWindow = _c[1];\n  var tryFocusPreviousActiveElement = usePreviousActiveElement(props, targetWindow, hostElement)[0];\n  var _d = useSubMenuState(props, dismiss),\n    expandedMenuItemKey = _d[0],\n    openSubMenu = _d[1],\n    getSubmenuProps = _d[2],\n    onSubMenuDismiss = _d[3];\n  var _e = useShouldUpdateFocusOnMouseMove(props),\n    shouldUpdateFocusOnMouseEvent = _e[0],\n    gotMouseMove = _e[1],\n    onMenuFocusCapture = _e[2];\n  var _f = useScrollHandler(asyncTracker),\n    onScroll = _f[0],\n    isScrollIdle = _f[1];\n  var _g = useSubmenuEnterTimer(props, asyncTracker),\n    cancelSubMenuTimer = _g[0],\n    startSubmenuTimer = _g[1],\n    subMenuEntryTimer = _g[2];\n  var responsiveMode = useResponsiveMode(hostElement, props.responsiveMode);\n  useVisibility(props, targetWindow);\n  var _h = useKeyHandlers(props, dismiss, hostElement, openSubMenu),\n    onKeyDown = _h[0],\n    onKeyUp = _h[1],\n    onMenuKeyDown = _h[2],\n    onItemKeyDown = _h[3];\n  var _j = useMouseHandlers(props, isScrollIdle, subMenuEntryTimer, targetWindow, shouldUpdateFocusOnMouseEvent, gotMouseMove, expandedMenuItemKey, hostElement, startSubmenuTimer, cancelSubMenuTimer, openSubMenu, onSubMenuDismiss, dismiss),\n    onItemMouseEnterBase = _j[0],\n    onItemMouseMoveBase = _j[1],\n    onMouseItemLeave = _j[2],\n    onItemClick = _j[3],\n    onAnchorClick = _j[4],\n    executeItemClick = _j[5],\n    onItemClickBase = _j[6];\n  //#region Render helpers\n  var onDefaultRenderMenuList = function (menuListProps,\n  // eslint-disable-next-line deprecation/deprecation\n  menuClassNames, defaultRender) {\n    var indexCorrection = 0;\n    var items = menuListProps.items,\n      totalItemCount = menuListProps.totalItemCount,\n      hasCheckmarks = menuListProps.hasCheckmarks,\n      hasIcons = menuListProps.hasIcons;\n    return React.createElement(\"ul\", {\n      className: menuClassNames.list,\n      onKeyDown: onKeyDown,\n      onKeyUp: onKeyUp,\n      role: 'presentation'\n    }, items.map(function (item, index) {\n      var menuItem = renderMenuItem(item, index, indexCorrection, totalItemCount, hasCheckmarks, hasIcons, menuClassNames);\n      if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {\n        var indexIncrease = item.customOnRenderListLength ? item.customOnRenderListLength : 1;\n        indexCorrection += indexIncrease;\n      }\n      return menuItem;\n    }));\n  };\n  var renderFocusZone = function (children, adjustedFocusZoneProps) {\n    var _a = props.focusZoneAs,\n      ChildrenRenderer = _a === void 0 ? FocusZone : _a;\n    return React.createElement(ChildrenRenderer, __assign({}, adjustedFocusZoneProps), children);\n  };\n  /**\n   * !!!IMPORTANT!!! Avoid mutating `item: IContextualMenuItem` argument. It will\n   * cause the menu items to always re-render because the component update is based on shallow comparison.\n   */\n  var renderMenuItem = function (item, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons,\n  // eslint-disable-next-line deprecation/deprecation\n  menuClassNames) {\n    var _a;\n    var renderedItems = [];\n    var iconProps = item.iconProps || {\n      iconName: 'None'\n    };\n    var getItemClassNames = item.getItemClassNames,\n      // eslint-disable-line deprecation/deprecation\n      itemProps = item.itemProps;\n    var styles = itemProps ? itemProps.styles : undefined;\n    // We only send a dividerClassName when the item to be rendered is a divider.\n    // For all other cases, the default divider style is used.\n    var dividerClassName = item.itemType === ContextualMenuItemType.Divider ? item.className : undefined;\n    var subMenuIconClassName = item.submenuIconProps ? item.submenuIconProps.className : '';\n    // eslint-disable-next-line deprecation/deprecation\n    var itemClassNames;\n    // IContextualMenuItem#getItemClassNames for backwards compatibility\n    // otherwise uses mergeStyles for class names.\n    if (getItemClassNames) {\n      itemClassNames = getItemClassNames(props.theme, isItemDisabled(item), expandedMenuItemKey === item.key, !!getIsChecked(item), !!item.href, iconProps.iconName !== 'None', item.className, dividerClassName, iconProps.className, subMenuIconClassName, item.primaryDisabled);\n    } else {\n      var itemStyleProps = {\n        theme: props.theme,\n        disabled: isItemDisabled(item),\n        expanded: expandedMenuItemKey === item.key,\n        checked: !!getIsChecked(item),\n        isAnchorLink: !!item.href,\n        knownIcon: iconProps.iconName !== 'None',\n        itemClassName: item.className,\n        dividerClassName: dividerClassName,\n        iconClassName: iconProps.className,\n        subMenuClassName: subMenuIconClassName,\n        primaryDisabled: item.primaryDisabled\n      };\n      // We need to generate default styles then override if styles are provided\n      // since the ContextualMenu currently handles item classNames.\n      itemClassNames = getContextualMenuItemClassNames(_getMenuItemStylesFunction((_a = menuClassNames.subComponentStyles) === null || _a === void 0 ? void 0 : _a.menuItem, styles), itemStyleProps);\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    if (item.text === '-' || item.name === '-') {\n      item.itemType = ContextualMenuItemType.Divider;\n    }\n    switch (item.itemType) {\n      case ContextualMenuItemType.Divider:\n        renderedItems.push(renderSeparator(index, itemClassNames));\n        break;\n      case ContextualMenuItemType.Header:\n        renderedItems.push(renderSeparator(index, itemClassNames));\n        var headerItem = renderHeaderMenuItem(item, itemClassNames, menuClassNames, index, hasCheckmarks, hasIcons);\n        renderedItems.push(renderListItem(headerItem, item.key || index, itemClassNames, item.title));\n        break;\n      case ContextualMenuItemType.Section:\n        renderedItems.push(renderSectionItem(item, itemClassNames, menuClassNames, index, hasCheckmarks, hasIcons));\n        break;\n      default:\n        var defaultRenderNormalItem = function () {\n          return renderNormalItem(item, itemClassNames, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons);\n        };\n        var menuItem = props.onRenderContextualMenuItem ? props.onRenderContextualMenuItem(item, defaultRenderNormalItem) : defaultRenderNormalItem();\n        renderedItems.push(renderListItem(menuItem, item.key || index, itemClassNames, item.title));\n        break;\n    }\n    // Since multiple nodes *could* be rendered, wrap them all in a fragment with this item's key.\n    // This ensures the reconciler handles multi-item output per-node correctly and does not re-mount content.\n    return React.createElement(React.Fragment, {\n      key: item.key\n    }, renderedItems);\n  };\n  var defaultMenuItemRenderer = function (item,\n  // eslint-disable-next-line deprecation/deprecation\n  menuClassNames) {\n    var index = item.index,\n      focusableElementIndex = item.focusableElementIndex,\n      totalItemCount = item.totalItemCount,\n      hasCheckmarks = item.hasCheckmarks,\n      hasIcons = item.hasIcons;\n    return renderMenuItem(item, index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons, menuClassNames);\n  };\n  var renderSectionItem = function (sectionItem,\n  // eslint-disable-next-line deprecation/deprecation\n  itemClassNames,\n  // eslint-disable-next-line deprecation/deprecation\n  menuClassNames, index, hasCheckmarks, hasIcons) {\n    var sectionProps = sectionItem.sectionProps;\n    if (!sectionProps) {\n      return;\n    }\n    var headerItem;\n    var groupProps;\n    if (sectionProps.title) {\n      var headerContextualMenuItem = undefined;\n      var ariaLabelledby = '';\n      if (typeof sectionProps.title === 'string') {\n        // Since title is a user-facing string, it needs to be stripped\n        // of whitespace in order to build a valid element ID\n        var id_1 = menuId + sectionProps.title.replace(/\\s/g, '');\n        headerContextualMenuItem = {\n          key: \"section-\" + sectionProps.title + \"-title\",\n          itemType: ContextualMenuItemType.Header,\n          text: sectionProps.title,\n          id: id_1\n        };\n        ariaLabelledby = id_1;\n      } else {\n        var id_2 = sectionProps.title.id || menuId + sectionProps.title.key.replace(/\\s/g, '');\n        headerContextualMenuItem = __assign(__assign({}, sectionProps.title), {\n          id: id_2\n        });\n        ariaLabelledby = id_2;\n      }\n      if (headerContextualMenuItem) {\n        groupProps = {\n          role: 'group',\n          'aria-labelledby': ariaLabelledby\n        };\n        headerItem = renderHeaderMenuItem(headerContextualMenuItem, itemClassNames, menuClassNames, index, hasCheckmarks, hasIcons);\n      }\n    }\n    if (sectionProps.items && sectionProps.items.length > 0) {\n      return React.createElement(\"li\", {\n        role: \"presentation\",\n        key: sectionProps.key || sectionItem.key || \"section-\" + index\n      }, React.createElement(\"div\", __assign({}, groupProps), React.createElement(\"ul\", {\n        className: menuClassNames.list,\n        role: \"presentation\"\n      }, sectionProps.topDivider && renderSeparator(index, itemClassNames, true, true), headerItem && renderListItem(headerItem, sectionItem.key || index, itemClassNames, sectionItem.title), sectionProps.items.map(function (contextualMenuItem, itemsIndex) {\n        return renderMenuItem(contextualMenuItem, itemsIndex, itemsIndex, sectionProps.items.length, hasCheckmarks, hasIcons, menuClassNames);\n      }), sectionProps.bottomDivider && renderSeparator(index, itemClassNames, false, true))));\n    }\n  };\n  var renderListItem = function (content, key, classNames,\n  // eslint-disable-line deprecation/deprecation\n  title) {\n    return React.createElement(\"li\", {\n      role: \"presentation\",\n      title: title,\n      key: key,\n      className: classNames.item\n    }, content);\n  };\n  var renderSeparator = function (index, classNames,\n  // eslint-disable-line deprecation/deprecation\n  top, fromSection) {\n    if (fromSection || index > 0) {\n      return React.createElement(\"li\", {\n        role: \"separator\",\n        key: 'separator-' + index + (top === undefined ? '' : top ? '-top' : '-bottom'),\n        className: classNames.divider,\n        \"aria-hidden\": \"true\"\n      });\n    }\n    return null;\n  };\n  var renderNormalItem = function (item, classNames,\n  // eslint-disable-line deprecation/deprecation\n  index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons) {\n    if (item.onRender) {\n      return item.onRender(__assign({\n        'aria-posinset': focusableElementIndex + 1,\n        'aria-setsize': totalItemCount\n      }, item), dismiss);\n    }\n    var contextualMenuItemAs = props.contextualMenuItemAs;\n    var commonProps = {\n      item: item,\n      classNames: classNames,\n      index: index,\n      focusableElementIndex: focusableElementIndex,\n      totalItemCount: totalItemCount,\n      hasCheckmarks: hasCheckmarks,\n      hasIcons: hasIcons,\n      contextualMenuItemAs: contextualMenuItemAs,\n      onItemMouseEnter: onItemMouseEnterBase,\n      onItemMouseLeave: onMouseItemLeave,\n      onItemMouseMove: onItemMouseMoveBase,\n      onItemMouseDown: onItemMouseDown,\n      executeItemClick: executeItemClick,\n      onItemKeyDown: onItemKeyDown,\n      expandedMenuItemKey: expandedMenuItemKey,\n      openSubMenu: openSubMenu,\n      dismissSubMenu: onSubMenuDismiss,\n      dismissMenu: dismiss\n    };\n    if (item.href) {\n      return React.createElement(ContextualMenuAnchor, __assign({}, commonProps, {\n        onItemClick: onAnchorClick\n      }));\n    }\n    if (item.split && hasSubmenu(item)) {\n      return React.createElement(ContextualMenuSplitButton, __assign({}, commonProps, {\n        onItemClick: onItemClick,\n        onItemClickBase: onItemClickBase,\n        onTap: cancelSubMenuTimer\n      }));\n    }\n    return React.createElement(ContextualMenuButton, __assign({}, commonProps, {\n      onItemClick: onItemClick,\n      onItemClickBase: onItemClickBase\n    }));\n  };\n  var renderHeaderMenuItem = function (item,\n  // eslint-disable-next-line deprecation/deprecation\n  itemClassNames,\n  // eslint-disable-next-line deprecation/deprecation\n  menuClassNames, index, hasCheckmarks, hasIcons) {\n    var _a = props.contextualMenuItemAs,\n      ChildrenRenderer = _a === void 0 ? ContextualMenuItem : _a;\n    var itemProps = item.itemProps,\n      id = item.id;\n    var divHtmlProperties = itemProps && getNativeProps(itemProps, divProperties);\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      React.createElement(\"div\", __assign({\n        id: id,\n        className: menuClassNames.header\n      }, divHtmlProperties, {\n        style: item.style\n      }), React.createElement(ChildrenRenderer, __assign({\n        item: item,\n        classNames: itemClassNames,\n        index: index,\n        onCheckmarkClick: hasCheckmarks ? onItemClick : undefined,\n        hasIcons: hasIcons\n      }, itemProps)))\n    );\n  };\n  //#endregion\n  //#region Main render\n  var isBeakVisible = props.isBeakVisible;\n  var items = props.items,\n    labelElementId = props.labelElementId,\n    id = props.id,\n    className = props.className,\n    beakWidth = props.beakWidth,\n    directionalHint = props.directionalHint,\n    directionalHintForRTL = props.directionalHintForRTL,\n    alignTargetEdge = props.alignTargetEdge,\n    gapSpace = props.gapSpace,\n    coverTarget = props.coverTarget,\n    ariaLabel = props.ariaLabel,\n    doNotLayer = props.doNotLayer,\n    target = props.target,\n    bounds = props.bounds,\n    useTargetWidth = props.useTargetWidth,\n    useTargetAsMinWidth = props.useTargetAsMinWidth,\n    directionalHintFixed = props.directionalHintFixed,\n    shouldFocusOnMount = props.shouldFocusOnMount,\n    shouldFocusOnContainer = props.shouldFocusOnContainer,\n    title = props.title,\n    styles = props.styles,\n    theme = props.theme,\n    calloutProps = props.calloutProps,\n    _k = props.onRenderSubMenu,\n    onRenderSubMenu = _k === void 0 ? onDefaultRenderSubMenu : _k,\n    _l = props.onRenderMenuList,\n    onRenderMenuList = _l === void 0 ? function (menuListProps, defaultRender) {\n      return onDefaultRenderMenuList(menuListProps, classNames, defaultRender);\n    } : _l,\n    focusZoneProps = props.focusZoneProps,\n    // eslint-disable-next-line deprecation/deprecation\n    getMenuClassNames = props.getMenuClassNames;\n  var classNames = getMenuClassNames ? getMenuClassNames(theme, className) : getClassNames(styles, {\n    theme: theme,\n    className: className\n  });\n  var hasIcons = itemsHaveIcons(items);\n  function itemsHaveIcons(contextualMenuItems) {\n    for (var _i = 0, contextualMenuItems_1 = contextualMenuItems; _i < contextualMenuItems_1.length; _i++) {\n      var item = contextualMenuItems_1[_i];\n      if (item.iconProps) {\n        return true;\n      }\n      if (item.itemType === ContextualMenuItemType.Section && item.sectionProps && itemsHaveIcons(item.sectionProps.items)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  var adjustedFocusZoneProps = __assign(__assign({\n    direction: FocusZoneDirection.vertical,\n    handleTabKey: FocusZoneTabbableElements.all,\n    isCircularNavigation: true\n  }, focusZoneProps), {\n    className: css(classNames.root, (_a = props.focusZoneProps) === null || _a === void 0 ? void 0 : _a.className)\n  });\n  var hasCheckmarks = canAnyMenuItemsCheck(items);\n  var submenuProps = expandedMenuItemKey && props.hidden !== true ? getSubmenuProps() : null;\n  isBeakVisible = isBeakVisible === undefined ? responsiveMode <= ResponsiveMode.medium : isBeakVisible;\n  /**\n   * When useTargetWidth is true, get the width of the target element and apply it for the context menu container\n   */\n  var contextMenuStyle;\n  var targetAsHtmlElement = targetRef.current;\n  if ((useTargetWidth || useTargetAsMinWidth) && targetAsHtmlElement && targetAsHtmlElement.offsetWidth) {\n    var targetBoundingRect = targetAsHtmlElement.getBoundingClientRect();\n    var targetWidth = targetBoundingRect.width - 2; /* Accounts for 1px border */\n    if (useTargetWidth) {\n      contextMenuStyle = {\n        width: targetWidth\n      };\n    } else if (useTargetAsMinWidth) {\n      contextMenuStyle = {\n        minWidth: targetWidth\n      };\n    }\n  }\n  // The menu should only return if items were provided, if no items were provided then it should not appear.\n  if (items && items.length > 0) {\n    var totalItemCount_1 = 0;\n    for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {\n      var item = items_2[_i];\n      if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {\n        var itemCount = item.customOnRenderListLength ? item.customOnRenderListLength : 1;\n        totalItemCount_1 += itemCount;\n      }\n    }\n    var calloutStyles_1 = classNames.subComponentStyles ? classNames.subComponentStyles.callout : undefined;\n    return React.createElement(MenuContext.Consumer, null, function (menuContext) {\n      return React.createElement(Callout, __assign({\n        styles: calloutStyles_1,\n        onRestoreFocus: tryFocusPreviousActiveElement\n      }, calloutProps, {\n        target: target || menuContext.target,\n        isBeakVisible: isBeakVisible,\n        beakWidth: beakWidth,\n        directionalHint: directionalHint,\n        directionalHintForRTL: directionalHintForRTL,\n        gapSpace: gapSpace,\n        coverTarget: coverTarget,\n        doNotLayer: doNotLayer,\n        className: css('ms-ContextualMenu-Callout', calloutProps && calloutProps.className),\n        setInitialFocus: shouldFocusOnMount,\n        onDismiss: props.onDismiss || menuContext.onDismiss,\n        onScroll: onScroll,\n        bounds: bounds,\n        directionalHintFixed: directionalHintFixed,\n        alignTargetEdge: alignTargetEdge,\n        hidden: props.hidden || menuContext.hidden,\n        ref: forwardedRef\n      }), React.createElement(\"div\", {\n        style: contextMenuStyle,\n        ref: hostElement,\n        id: id,\n        className: classNames.container,\n        tabIndex: shouldFocusOnContainer ? 0 : -1,\n        onKeyDown: onMenuKeyDown,\n        onKeyUp: onKeyUp,\n        onFocusCapture: onMenuFocusCapture,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": labelElementId,\n        role: 'menu'\n      }, title && React.createElement(\"div\", {\n        className: classNames.title\n      }, \" \", title, \" \"), items && items.length ? renderFocusZone(onRenderMenuList({\n        ariaLabel: ariaLabel,\n        items: items,\n        totalItemCount: totalItemCount_1,\n        hasCheckmarks: hasCheckmarks,\n        hasIcons: hasIcons,\n        defaultMenuItemRenderer: function (item) {\n          return defaultMenuItemRenderer(item, classNames);\n        },\n        labelElementId: labelElementId\n      }, function (menuListProps, defaultRender) {\n        return onDefaultRenderMenuList(menuListProps, classNames, defaultRender);\n      }), adjustedFocusZoneProps) : null, submenuProps && onRenderSubMenu(submenuProps, onDefaultRenderSubMenu)), React.createElement(FocusRects, null));\n    });\n  } else {\n    return null;\n  }\n  //#endregion\n}), function (prevProps, newProps) {\n  if (!newProps.shouldUpdateWhenHidden && prevProps.hidden && newProps.hidden) {\n    // Do not update when hidden.\n    return true;\n  }\n  return shallowCompare(prevProps, newProps);\n});\nContextualMenuBase.displayName = 'ContextualMenuBase';\n/**\n * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n */\nfunction isAltOrMeta(ev) {\n  // eslint-disable-next-line deprecation/deprecation\n  return ev.which === KeyCodes.alt || ev.key === 'Meta';\n}\nfunction onItemMouseDown(item, ev) {\n  var _a;\n  (_a = item.onMouseDown) === null || _a === void 0 ? void 0 : _a.call(item, item, ev);\n}\nfunction onDefaultRenderSubMenu(subMenuProps, defaultRender) {\n  throw Error('ContextualMenuBase: onRenderSubMenu callback is null or undefined. ' + 'Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.');\n}\n/**\n * Returns the item that matches a given key if any.\n * @param key - The key of the item to match\n * @param items - The items to look for the key\n */\nfunction findItemByKeyFromItems(key, items) {\n  for (var _i = 0, items_3 = items; _i < items_3.length; _i++) {\n    var item = items_3[_i];\n    if (item.itemType === ContextualMenuItemType.Section && item.sectionProps) {\n      var match = findItemByKeyFromItems(key, item.sectionProps.items);\n      if (match) {\n        return match;\n      }\n    } else if (item.key && item.key === key) {\n      return item;\n    }\n  }\n}\nfunction getOnClickWithOverrideTarget(onClick, target) {\n  return onClick ? function (ev, item) {\n    overrideTarget(ev, target);\n    return onClick(ev, item);\n  } : onClick;\n}\nfunction overrideTarget(ev, target) {\n  if (ev && target) {\n    ev.persist();\n    if (target instanceof Event) {\n      ev.target = target.target;\n    } else if (target instanceof Element) {\n      ev.target = target;\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["React","ContextualMenuItemType","DirectionalHint","FocusZone","FocusZoneDirection","FocusZoneTabbableElements","divProperties","getNativeProps","shallowCompare","assign","classNamesFunction","css","getFirstFocusable","getLastFocusable","getRTL","KeyCodes","shouldWrapFocus","isIOS","isMac","memoizeFunction","getPropsWithDefaults","getDocument","FocusRects","hasSubmenu","getIsChecked","isItemDisabled","Callout","ContextualMenuItem","ContextualMenuSplitButton","ContextualMenuButton","ContextualMenuAnchor","concatStyleSetsWithProps","getItemStyles","useTarget","usePrevious","useAsync","useWarnings","useId","useIsomorphicLayoutEffect","useResponsiveMode","ResponsiveMode","MenuContext","getClassNames","getContextualMenuItemClassNames","DEFAULT_PROPS","items","shouldFocusOnMount","gapSpace","directionalHint","bottomAutoEdge","beakWidth","getSubmenuItems","item","options","target","subMenuProps","overrideItems","items_1","_i","subItem","preferMenuTargetAsEventTarget","contextItem","push","onClick","getOnClickWithOverrideTarget","canAnyMenuItemsCheck","some","canCheck","sectionProps","NavigationIdleDelay","COMPONENT_NAME","_getMenuItemStylesFunction","styles","styleProps","useVisibility","props","targetWindow","hidden","onMenuDismissed","onMenuOpened","previousHidden","onMenuOpenedRef","useRef","onMenuClosedRef","propsRef","current","useEffect","useSubMenuState","_a","dismiss","theme","className","id","menuTarget","useState","expandedMenuItemKey","setExpandedMenuItemKey","submenuTarget","setSubmenuTarget","shouldFocusOnContainer","setShouldFocusOnContainer","subMenuId","closeSubMenu","useCallback","undefined","openSubMenu","focusContainer","submenuItemKey","focus","onSubMenuDismiss","useOnSubmenuDismiss","getSubmenuProps","findItemByKeyFromItems","submenuProps","onDismiss","isSubMenu","leftTopEdge","rightTopEdge","isBeakVisible","onItemClick","useShouldUpdateFocusOnMouseMove","delayUpdateFocusOnHover","shouldUpdateFocusOnMouseEvent","gotMouseMove","onMenuFocusCapture","usePreviousActiveElement","hostElement","onRestoreFocus","previousActiveElement","tryFocusPreviousActiveElement","documentContainsFocus","newElement","document","activeElement","contains","tagName","originalElement","containsFocus","hasFocus","useKeyHandlers","_b","_c","checkForNoWrap","_d","focusZoneDirection","vertical","lastKeyDownWasAltOrMeta","keyHandler","ev","shouldHandleKey","dismissAllMenus","handled","preventDefault","stopPropagation","shouldCloseSubMenu","submenuCloseKey","right","left","which","shouldHandleKeyDown","escape","up","altKey","metaKey","onKeyDown","isAltOrMeta","shouldHandleKeyUp","keyPressIsAltOrMetaAlone","onKeyUp","onMenuKeyDown","hasModifier","isUp","isDown","down","elementToFocus","lastChild","firstChild","onItemKeyDown","openKey","disabled","enter","currentTarget","useScrollHandler","asyncTracker","isScrollIdle","scrollIdleTimeoutId","onScroll","clearTimeout","setTimeout","isMountedRef","dismissAll","useSubmenuEnterTimer","subMenuHoverDelay","enterTimerRef","cancelSubMenuTimer","startSubmenuTimer","onTimerExpired","useMouseHandlers","subMenuEntryTimer","onItemMouseEnterBase","shouldIgnoreMouseEvent","updateFocusOnMouseEvent","onItemMouseMoveBase","targetElement","onMouseItemLeave","setActive","e","key","onItemClickBase","length","executeItemClick","nativeEvent","pointerType","onAnchorClick","isDisabled","overrideTarget","shouldDismiss","defaultPrevented","ContextualMenuBase","memo","forwardRef","propsWithoutDefaults","forwardedRef","ref","menuId","name","deprecations","getMenuClassNames","targetRef","responsiveMode","onDefaultRenderMenuList","menuListProps","menuClassNames","defaultRender","indexCorrection","totalItemCount","hasCheckmarks","hasIcons","list","role","map","index","menuItem","renderMenuItem","itemType","Divider","Header","indexIncrease","customOnRenderListLength","renderFocusZone","children","adjustedFocusZoneProps","ChildrenRenderer","focusableElementIndex","renderedItems","iconProps","iconName","itemProps","dividerClassName","subMenuIconClassName","submenuIconProps","itemClassNames","getItemClassNames","href","primaryDisabled","itemStyleProps","expanded","checked","isAnchorLink","knownIcon","itemClassName","iconClassName","subMenuClassName","subComponentStyles","text","renderSeparator","headerItem","renderHeaderMenuItem","renderListItem","title","Section","renderSectionItem","defaultRenderNormalItem","onRenderContextualMenuItem","Fragment","defaultMenuItemRenderer","sectionItem","groupProps","headerContextualMenuItem","ariaLabelledby","id_1","replace","id_2","topDivider","contextualMenuItem","itemsIndex","bottomDivider","content","classNames","top","fromSection","divider","renderNormalItem","onRender","commonProps","contextualMenuItemAs","onItemMouseEnter","onItemMouseLeave","onItemMouseMove","onItemMouseDown","dismissSubMenu","dismissMenu","split","onTap","divHtmlProperties","header","style","onCheckmarkClick","labelElementId","directionalHintForRTL","alignTargetEdge","coverTarget","ariaLabel","doNotLayer","bounds","useTargetWidth","useTargetAsMinWidth","directionalHintFixed","calloutProps","_k","onRenderSubMenu","onDefaultRenderSubMenu","_l","onRenderMenuList","focusZoneProps","itemsHaveIcons","contextualMenuItems","contextualMenuItems_1","direction","handleTabKey","all","isCircularNavigation","root","medium","contextMenuStyle","targetAsHtmlElement","offsetWidth","targetBoundingRect","getBoundingClientRect","targetWidth","width","minWidth","totalItemCount_1","items_2","itemCount","calloutStyles_1","callout","Consumer","menuContext","setInitialFocus","container","tabIndex","onFocusCapture","prevProps","newProps","shouldUpdateWhenHidden","displayName","alt","onMouseDown","Error","items_3","match","persist","Event","Element"],"sources":["C:\\Users\\hpryz\\Documents\\_Programming\\web-project\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\ContextualMenu\\ContextualMenu.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ContextualMenuItemType } from './ContextualMenu.types';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { FocusZone, FocusZoneDirection, FocusZoneTabbableElements } from '../../FocusZone';\nimport {\n  divProperties,\n  getNativeProps,\n  shallowCompare,\n  Async,\n  assign,\n  classNamesFunction,\n  css,\n  getFirstFocusable,\n  getLastFocusable,\n  getRTL,\n  KeyCodes,\n  shouldWrapFocus,\n  isIOS,\n  isMac,\n  memoizeFunction,\n  getPropsWithDefaults,\n  getDocument,\n  FocusRects,\n} from '../../Utilities';\nimport { hasSubmenu, getIsChecked, isItemDisabled } from '../../utilities/contextualMenu/index';\nimport { Callout } from '../../Callout';\nimport { ContextualMenuItem } from './ContextualMenuItem';\nimport {\n  ContextualMenuSplitButton,\n  ContextualMenuButton,\n  ContextualMenuAnchor,\n} from './ContextualMenuItemWrapper/index';\nimport { concatStyleSetsWithProps } from '../../Styling';\nimport { getItemStyles } from './ContextualMenu.classNames';\nimport {\n  useTarget,\n  usePrevious,\n  useAsync,\n  useWarnings,\n  useId,\n  Target,\n  useIsomorphicLayoutEffect,\n} from '@fluentui/react-hooks';\nimport { useResponsiveMode, ResponsiveMode } from '../../ResponsiveMode';\nimport { MenuContext } from '../../utilities/MenuContext/index';\nimport type {\n  IContextualMenuProps,\n  IContextualMenuItem,\n  IContextualMenuListProps,\n  IContextualMenuStyleProps,\n  IContextualMenuStyles,\n  IContextualMenuItemRenderProps,\n} from './ContextualMenu.types';\nimport type { IFocusZoneProps } from '../../FocusZone';\nimport type { IMenuItemClassNames, IContextualMenuClassNames } from './ContextualMenu.classNames';\nimport type { IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { ICalloutContentStyleProps, ICalloutContentStyles } from '../../Callout';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IContextualMenuItemStyleProps, IContextualMenuItemStyles } from './ContextualMenuItem.types';\nimport type { IPopupRestoreFocusParams } from '../../Popup';\n\nconst getClassNames = classNamesFunction<IContextualMenuStyleProps, IContextualMenuStyles>();\nconst getContextualMenuItemClassNames = classNamesFunction<IContextualMenuItemStyleProps, IContextualMenuItemStyles>();\n\n// The default ContextualMenu properties have no items and beak, the default submenu direction is right and top.\nconst DEFAULT_PROPS: Partial<IContextualMenuProps> = {\n  items: [],\n  shouldFocusOnMount: true,\n  gapSpace: 0,\n  directionalHint: DirectionalHint.bottomAutoEdge,\n  beakWidth: 16,\n};\n\nexport function getSubmenuItems(\n  item: IContextualMenuItem,\n  options?: {\n    target?: Target;\n  },\n): IContextualMenuItem[] | undefined {\n  const target = options?.target;\n\n  // eslint-disable-next-line deprecation/deprecation\n  const items = item.subMenuProps ? item.subMenuProps.items : item.items;\n\n  if (items) {\n    const overrideItems: typeof items = [];\n\n    for (const subItem of items) {\n      if (subItem.preferMenuTargetAsEventTarget) {\n        // For sub-items which need an overridden target, intercept `onClick`\n        const { onClick, ...contextItem } = subItem;\n\n        overrideItems.push({\n          ...contextItem,\n          onClick: getOnClickWithOverrideTarget(onClick, target),\n        });\n      } else {\n        overrideItems.push(subItem);\n      }\n    }\n\n    return overrideItems;\n  }\n}\n\n/**\n * Returns true if a list of menu items can contain a checkbox\n */\nexport function canAnyMenuItemsCheck(items: IContextualMenuItem[]): boolean {\n  return items.some(item => {\n    if (item.canCheck) {\n      return true;\n    }\n\n    // If the item is a section, check if any of the items in the section can check.\n    if (item.sectionProps && item.sectionProps.items.some(submenuItem => submenuItem.canCheck === true)) {\n      return true;\n    }\n\n    return false;\n  });\n}\n\nconst NavigationIdleDelay = 250; /* ms */\n\nconst COMPONENT_NAME = 'ContextualMenu';\n\nconst _getMenuItemStylesFunction = memoizeFunction(\n  (\n    ...styles: (IStyleFunctionOrObject<IContextualMenuItemStyleProps, IContextualMenuItemStyles> | undefined)[]\n  ): IStyleFunctionOrObject<IContextualMenuItemStyleProps, IContextualMenuItemStyles> => {\n    return (styleProps: IContextualMenuItemStyleProps) =>\n      concatStyleSetsWithProps(styleProps, getItemStyles, ...styles);\n  },\n);\n\n//#region Custom hooks\nfunction useVisibility(props: IContextualMenuProps, targetWindow: Window | undefined) {\n  const { hidden = false, onMenuDismissed, onMenuOpened } = props;\n  const previousHidden = usePrevious(hidden);\n\n  const onMenuOpenedRef = React.useRef(onMenuOpened);\n  const onMenuClosedRef = React.useRef(onMenuDismissed);\n  const propsRef = React.useRef(props);\n\n  onMenuOpenedRef.current = onMenuOpened;\n  onMenuClosedRef.current = onMenuDismissed;\n  propsRef.current = props;\n\n  React.useEffect(() => {\n    // Don't issue dismissed callbacks on initial mount\n    if (hidden && previousHidden === false) {\n      onMenuClosedRef.current?.(propsRef.current);\n    } else if (!hidden && previousHidden !== false) {\n      onMenuOpenedRef.current?.(propsRef.current);\n    }\n  }, [hidden, previousHidden]);\n\n  // Issue onDismissedCallback on unmount\n  React.useEffect(() => () => onMenuClosedRef.current?.(propsRef.current), []);\n}\n\nfunction useSubMenuState(\n  { hidden, items, theme, className, id, target: menuTarget }: IContextualMenuProps,\n  dismiss: () => void,\n) {\n  const [expandedMenuItemKey, setExpandedMenuItemKey] = React.useState<string>();\n  const [submenuTarget, setSubmenuTarget] = React.useState<HTMLElement>();\n  /** True if the menu was expanded by mouse click OR hover (as opposed to by keyboard) */\n  const [shouldFocusOnContainer, setShouldFocusOnContainer] = React.useState<boolean>();\n  const subMenuId = useId(COMPONENT_NAME, id);\n\n  const closeSubMenu = React.useCallback(() => {\n    setShouldFocusOnContainer(undefined);\n    setExpandedMenuItemKey(undefined);\n    setSubmenuTarget(undefined);\n  }, []);\n\n  const openSubMenu = React.useCallback(\n    ({ key: submenuItemKey }: IContextualMenuItem, target: HTMLElement, focusContainer?: boolean) => {\n      if (expandedMenuItemKey === submenuItemKey) {\n        return;\n      }\n\n      target.focus();\n      setShouldFocusOnContainer(focusContainer);\n      setExpandedMenuItemKey(submenuItemKey);\n      setSubmenuTarget(target);\n    },\n    [expandedMenuItemKey],\n  );\n\n  React.useEffect(() => {\n    if (hidden) {\n      closeSubMenu();\n    }\n  }, [hidden, closeSubMenu]);\n\n  const onSubMenuDismiss = useOnSubmenuDismiss(dismiss, closeSubMenu);\n\n  const getSubmenuProps = (): IContextualMenuProps | null => {\n    const item = findItemByKeyFromItems(expandedMenuItemKey!, items);\n    let submenuProps: IContextualMenuProps | null = null;\n\n    if (item) {\n      submenuProps = {\n        items: getSubmenuItems(item, { target: menuTarget })!,\n        target: submenuTarget,\n        onDismiss: onSubMenuDismiss,\n        isSubMenu: true,\n        id: subMenuId,\n        shouldFocusOnMount: true,\n        shouldFocusOnContainer,\n        directionalHint: getRTL(theme) ? DirectionalHint.leftTopEdge : DirectionalHint.rightTopEdge,\n        className,\n        gapSpace: 0,\n        isBeakVisible: false,\n      };\n\n      if (item.subMenuProps) {\n        assign(submenuProps, item.subMenuProps);\n      }\n\n      if (item.preferMenuTargetAsEventTarget) {\n        const { onItemClick } = item;\n\n        submenuProps.onItemClick = getOnClickWithOverrideTarget(onItemClick, menuTarget);\n      }\n    }\n    return submenuProps;\n  };\n\n  return [expandedMenuItemKey, openSubMenu, getSubmenuProps, onSubMenuDismiss] as const;\n}\n\nfunction useShouldUpdateFocusOnMouseMove({ delayUpdateFocusOnHover, hidden }: IContextualMenuProps) {\n  const shouldUpdateFocusOnMouseEvent = React.useRef<boolean>(!delayUpdateFocusOnHover);\n  const gotMouseMove = React.useRef<boolean>(false);\n\n  React.useEffect(() => {\n    shouldUpdateFocusOnMouseEvent.current = !delayUpdateFocusOnHover;\n    gotMouseMove.current = hidden ? false : !delayUpdateFocusOnHover && gotMouseMove.current;\n  }, [delayUpdateFocusOnHover, hidden]);\n\n  const onMenuFocusCapture = React.useCallback(() => {\n    if (delayUpdateFocusOnHover) {\n      shouldUpdateFocusOnMouseEvent.current = false;\n    }\n  }, [delayUpdateFocusOnHover]);\n\n  return [shouldUpdateFocusOnMouseEvent, gotMouseMove, onMenuFocusCapture] as const;\n}\n\nfunction usePreviousActiveElement(\n  { hidden, onRestoreFocus }: IContextualMenuProps,\n  targetWindow: Window | undefined,\n  hostElement: any,\n) {\n  const previousActiveElement = React.useRef<undefined | HTMLElement>();\n\n  const tryFocusPreviousActiveElement = React.useCallback(\n    (options: IPopupRestoreFocusParams) => {\n      if (onRestoreFocus) {\n        onRestoreFocus(options);\n      } else if (options?.documentContainsFocus) {\n        // Make sure that the focus method actually exists\n        // In some cases the object might exist but not be a real element.\n        // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n        previousActiveElement.current?.focus?.();\n      }\n    },\n    [onRestoreFocus],\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    if (!hidden) {\n      const newElement = targetWindow?.document.activeElement as HTMLElement;\n      if (!hostElement.current?.contains(newElement) && newElement.tagName !== 'BODY') {\n        previousActiveElement.current = newElement;\n      }\n    } else if (previousActiveElement.current) {\n      tryFocusPreviousActiveElement({\n        originalElement: previousActiveElement.current,\n        containsFocus: true,\n        documentContainsFocus: getDocument()?.hasFocus() || false,\n      });\n\n      previousActiveElement.current = undefined;\n    }\n  }, [hidden, targetWindow?.document.activeElement, tryFocusPreviousActiveElement, hostElement]);\n\n  return [tryFocusPreviousActiveElement] as const;\n}\n\nfunction useKeyHandlers(\n  {\n    theme,\n    isSubMenu,\n    focusZoneProps: { checkForNoWrap, direction: focusZoneDirection = FocusZoneDirection.vertical } = {},\n  }: IContextualMenuProps,\n  dismiss: (ev?: any, dismissAll?: boolean | undefined) => void | undefined,\n  hostElement: React.RefObject<HTMLDivElement>,\n  openSubMenu: (submenuItemKey: IContextualMenuItem, target: HTMLElement) => void,\n) {\n  /** True if the most recent keydown event was for alt (option) or meta (command). */\n  const lastKeyDownWasAltOrMeta = React.useRef<boolean | undefined>();\n\n  /**\n   * Calls `shouldHandleKey` to determine whether the keyboard event should be handled;\n   * if so, stops event propagation and dismisses menu(s).\n   * @param ev - The keyboard event.\n   * @param shouldHandleKey - Returns whether we should handle this keyboard event.\n   * @param dismissAllMenus - If true, dismiss all menus. Otherwise, dismiss only the current menu.\n   * Only does anything if `shouldHandleKey` returns true.\n   * @returns Whether the event was handled.\n   */\n  const keyHandler = (\n    ev: React.KeyboardEvent<HTMLElement>,\n    shouldHandleKey: (ev: React.KeyboardEvent<HTMLElement>) => boolean,\n    dismissAllMenus?: boolean,\n  ): boolean => {\n    let handled = false;\n\n    if (shouldHandleKey(ev)) {\n      dismiss(ev, dismissAllMenus);\n      ev.preventDefault();\n      ev.stopPropagation();\n      handled = true;\n    }\n\n    return handled;\n  };\n\n  /**\n   * Checks if the submenu should be closed\n   */\n  const shouldCloseSubMenu = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    const submenuCloseKey = getRTL(theme) ? KeyCodes.right : KeyCodes.left;\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which !== submenuCloseKey || !isSubMenu) {\n      return false;\n    }\n\n    return !!(\n      focusZoneDirection === FocusZoneDirection.vertical ||\n      (checkForNoWrap && !shouldWrapFocus(ev.target as HTMLElement, 'data-no-horizontal-wrap'))\n    );\n  };\n\n  const shouldHandleKeyDown = (ev: React.KeyboardEvent<HTMLElement>) => {\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      ev.which === KeyCodes.escape ||\n      shouldCloseSubMenu(ev) ||\n      // eslint-disable-next-line deprecation/deprecation\n      (ev.which === KeyCodes.up && (ev.altKey || ev.metaKey))\n    );\n  };\n\n  const onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    // Take note if we are processing an alt (option) or meta (command) keydown.\n    // See comment in shouldHandleKeyUp for reasoning.\n    lastKeyDownWasAltOrMeta.current = isAltOrMeta(ev);\n\n    // On Mac, pressing escape dismisses all levels of native context menus\n    // eslint-disable-next-line deprecation/deprecation\n    const dismissAllMenus = ev.which === KeyCodes.escape && (isMac() || isIOS());\n\n    return keyHandler(ev, shouldHandleKeyDown, dismissAllMenus);\n  };\n\n  /**\n   * We close the menu on key up only if ALL of the following are true:\n   * - Most recent key down was alt or meta (command)\n   * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n   *   expand/collapse the menu)\n   * - We're not on a Mac (or iOS)\n   *\n   * This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n   * closing any open context menus. There is not a similar behavior on Macs.\n   */\n  const shouldHandleKeyUp = (ev: React.KeyboardEvent<HTMLElement>) => {\n    const keyPressIsAltOrMetaAlone = lastKeyDownWasAltOrMeta.current && isAltOrMeta(ev);\n    lastKeyDownWasAltOrMeta.current = false;\n    return !!keyPressIsAltOrMetaAlone && !(isIOS() || isMac());\n  };\n\n  const onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    return keyHandler(ev, shouldHandleKeyUp, true /* dismissAllMenus */);\n  };\n\n  const onMenuKeyDown = (ev: React.KeyboardEvent<HTMLElement>) => {\n    // Mark as handled if onKeyDown returns true (for handling collapse cases)\n    // or if we are attempting to expand a submenu\n    const handled = onKeyDown(ev);\n\n    if (handled || !hostElement.current) {\n      return;\n    }\n\n    // If we have a modifier key being pressed, we do not want to move focus.\n    // Otherwise, handle up and down keys.\n    const hasModifier = !!(ev.altKey || ev.metaKey);\n    // eslint-disable-next-line deprecation/deprecation\n    const isUp = ev.which === KeyCodes.up;\n    // eslint-disable-next-line deprecation/deprecation\n    const isDown = ev.which === KeyCodes.down;\n    if (!hasModifier && (isUp || isDown)) {\n      const elementToFocus = isUp\n        ? getLastFocusable(hostElement.current, hostElement.current.lastChild as HTMLElement, true)\n        : getFirstFocusable(hostElement.current, hostElement.current.firstChild as HTMLElement, true);\n\n      if (elementToFocus) {\n        elementToFocus.focus();\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  const onItemKeyDown = (item: any, ev: React.KeyboardEvent<HTMLElement>): void => {\n    const openKey = getRTL(theme) ? KeyCodes.left : KeyCodes.right;\n\n    if (\n      !item.disabled &&\n      // eslint-disable-next-line deprecation/deprecation\n      (ev.which === openKey || ev.which === KeyCodes.enter || (ev.which === KeyCodes.down && (ev.altKey || ev.metaKey)))\n    ) {\n      openSubMenu(item, ev.currentTarget as HTMLElement);\n      ev.preventDefault();\n    }\n  };\n\n  return [onKeyDown, onKeyUp, onMenuKeyDown, onItemKeyDown] as const;\n}\n\nfunction useScrollHandler(asyncTracker: Async) {\n  const isScrollIdle = React.useRef<boolean>(true);\n  const scrollIdleTimeoutId = React.useRef<number | undefined>();\n\n  /**\n   * Scroll handler for the callout to make sure the mouse events\n   * for updating focus are not interacting during scroll\n   */\n  const onScroll = (): void => {\n    if (!isScrollIdle.current && scrollIdleTimeoutId.current !== undefined) {\n      asyncTracker.clearTimeout(scrollIdleTimeoutId.current);\n      scrollIdleTimeoutId.current = undefined;\n    } else {\n      isScrollIdle.current = false;\n    }\n\n    scrollIdleTimeoutId.current = asyncTracker.setTimeout(() => {\n      isScrollIdle.current = true;\n    }, NavigationIdleDelay);\n  };\n\n  return [onScroll, isScrollIdle] as const;\n}\n\nfunction useOnSubmenuDismiss(dismiss: (ev?: any, dismissAll?: boolean) => void, closeSubMenu: () => void) {\n  const isMountedRef = React.useRef(false);\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  /**\n   * This function is called ASYNCHRONOUSLY, and so there is a chance it is called\n   * after the component is unmounted. The isMountedRef is added to prevent\n   * from calling setState() after unmount. Do NOT copy this pattern in synchronous\n   * code.\n   */\n  const onSubMenuDismiss = (ev?: any, dismissAll?: boolean): void => {\n    if (dismissAll) {\n      dismiss(ev, dismissAll);\n    } else if (isMountedRef.current) {\n      closeSubMenu();\n    }\n  };\n\n  return onSubMenuDismiss;\n}\n\nfunction useSubmenuEnterTimer({ subMenuHoverDelay = NavigationIdleDelay }: IContextualMenuProps, asyncTracker: Async) {\n  const enterTimerRef = React.useRef<number | undefined>(undefined);\n\n  const cancelSubMenuTimer = () => {\n    if (enterTimerRef.current !== undefined) {\n      asyncTracker.clearTimeout(enterTimerRef.current);\n      enterTimerRef.current = undefined;\n    }\n  };\n\n  const startSubmenuTimer = (onTimerExpired: () => void) => {\n    enterTimerRef.current = asyncTracker.setTimeout(() => {\n      onTimerExpired();\n      cancelSubMenuTimer();\n    }, subMenuHoverDelay);\n  };\n\n  return [cancelSubMenuTimer, startSubmenuTimer, enterTimerRef as React.RefObject<number | undefined>] as const;\n}\n\nfunction useMouseHandlers(\n  props: IContextualMenuProps,\n  isScrollIdle: React.MutableRefObject<boolean>,\n  subMenuEntryTimer: React.RefObject<number | undefined>,\n  targetWindow: Window | undefined,\n  shouldUpdateFocusOnMouseEvent: React.MutableRefObject<boolean>,\n  gotMouseMove: React.MutableRefObject<boolean>,\n  expandedMenuItemKey: string | undefined,\n  hostElement: React.RefObject<HTMLDivElement>,\n  startSubmenuTimer: (onTimerExpired: () => void) => void,\n  cancelSubMenuTimer: () => void,\n  openSubMenu: (submenuItemKey: IContextualMenuItem, target: HTMLElement, openedByMouseClick?: boolean) => void,\n  onSubMenuDismiss: (ev?: any, dismissAll?: boolean) => void,\n  dismiss: (ev?: any, dismissAll?: boolean) => void,\n) {\n  const { target: menuTarget } = props;\n\n  const onItemMouseEnterBase = (item: any, ev: React.MouseEvent<HTMLElement>, target?: HTMLElement): void => {\n    if (shouldUpdateFocusOnMouseEvent.current) {\n      gotMouseMove.current = true;\n    }\n\n    if (shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    updateFocusOnMouseEvent(item, ev, target);\n  };\n\n  const onItemMouseMoveBase = (item: any, ev: React.MouseEvent<HTMLElement>, target: HTMLElement): void => {\n    const targetElement = ev.currentTarget as HTMLElement;\n\n    // Always do this check to make sure we record a mouseMove if needed (even if we are timed out)\n    if (shouldUpdateFocusOnMouseEvent.current) {\n      gotMouseMove.current = true;\n    } else {\n      return;\n    }\n\n    if (\n      !isScrollIdle.current ||\n      subMenuEntryTimer.current !== undefined ||\n      targetElement === (targetWindow?.document.activeElement as HTMLElement)\n    ) {\n      return;\n    }\n\n    updateFocusOnMouseEvent(item, ev, target);\n  };\n\n  const shouldIgnoreMouseEvent = (): boolean => {\n    return !isScrollIdle.current || !gotMouseMove.current;\n  };\n\n  const onMouseItemLeave = (item: any, ev: React.MouseEvent<HTMLElement>): void => {\n    if (shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    cancelSubMenuTimer();\n\n    if (expandedMenuItemKey !== undefined) {\n      return;\n    }\n\n    /**\n     * IE11 focus() method forces parents to scroll to top of element.\n     * Edge and IE expose a setActive() function for focusable divs that\n     * sets the page focus but does not scroll the parent element.\n     */\n    if ((hostElement.current as any).setActive) {\n      try {\n        (hostElement.current as any).setActive();\n      } catch (e) {\n        /* no-op */\n      }\n    } else {\n      hostElement.current?.focus();\n    }\n  };\n\n  /**\n   * Handles updating focus when mouseEnter or mouseMove fire.\n   * As part of updating focus, This function will also update\n   * the expand/collapse state accordingly.\n   */\n  const updateFocusOnMouseEvent = (\n    item: IContextualMenuItem,\n    ev: React.MouseEvent<HTMLElement>,\n    target?: HTMLElement,\n  ) => {\n    const targetElement = target ? target : (ev.currentTarget as HTMLElement);\n\n    if (item.key === expandedMenuItemKey) {\n      return;\n    }\n\n    cancelSubMenuTimer();\n\n    // If the menu is not expanded we can update focus without any delay\n    if (expandedMenuItemKey === undefined) {\n      targetElement.focus();\n    }\n\n    // Delay updating expanding/dismissing the submenu\n    // and only set focus if we have not already done so\n    if (hasSubmenu(item)) {\n      ev.stopPropagation();\n      startSubmenuTimer(() => {\n        targetElement.focus();\n        openSubMenu(item, targetElement, true);\n      });\n    } else {\n      startSubmenuTimer(() => {\n        onSubMenuDismiss(ev);\n        targetElement.focus();\n      });\n    }\n  };\n\n  const onItemClick = (\n    item: IContextualMenuItem,\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n  ): void => {\n    onItemClickBase(item, ev, ev.currentTarget as HTMLElement);\n  };\n\n  const onItemClickBase = (\n    item: IContextualMenuItem,\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    target: HTMLElement,\n  ): void => {\n    const items = getSubmenuItems(item, { target: menuTarget });\n\n    // Cancel an async menu item hover timeout action from being taken and instead\n    // just trigger the click event instead.\n    cancelSubMenuTimer();\n\n    if (!hasSubmenu(item) && (!items || !items.length)) {\n      // This is an item without a menu. Click it.\n      executeItemClick(item, ev);\n    } else {\n      if (item.key !== expandedMenuItemKey) {\n        // This has a collapsed sub menu. Expand it.\n\n        // focus on the container by default when the menu is opened with a click event\n        // this differentiates from a keyboard interaction triggering the click event\n        const shouldFocusOnContainer =\n          typeof props.shouldFocusOnContainer === 'boolean'\n            ? props.shouldFocusOnContainer\n            : (ev.nativeEvent as PointerEvent).pointerType === 'mouse';\n        openSubMenu(item, target, shouldFocusOnContainer);\n      }\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  const onAnchorClick = (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => {\n    executeItemClick(item, ev);\n    ev.stopPropagation();\n  };\n\n  const executeItemClick = (\n    item: IContextualMenuItem,\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n  ): void => {\n    if (item.disabled || item.isDisabled) {\n      return;\n    }\n\n    if (item.preferMenuTargetAsEventTarget) {\n      overrideTarget(ev, menuTarget);\n    }\n\n    let shouldDismiss = false;\n    if (item.onClick) {\n      shouldDismiss = !!item.onClick(ev, item);\n    } else if (props.onItemClick) {\n      shouldDismiss = !!props.onItemClick(ev, item);\n    }\n\n    if (shouldDismiss || !ev.defaultPrevented) {\n      dismiss(ev, true);\n    }\n  };\n\n  return [\n    onItemMouseEnterBase,\n    onItemMouseMoveBase,\n    onMouseItemLeave,\n    onItemClick,\n    onAnchorClick,\n    executeItemClick,\n    onItemClickBase,\n  ] as const;\n}\n//#endregion\n\nexport const ContextualMenuBase: React.FunctionComponent<IContextualMenuProps> = React.memo(\n  React.forwardRef<HTMLDivElement, IContextualMenuProps>((propsWithoutDefaults, forwardedRef) => {\n    const { ref, ...props } = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n    const hostElement = React.useRef<HTMLDivElement>(null);\n    const asyncTracker = useAsync();\n    const menuId = useId(COMPONENT_NAME, props.id);\n\n    useWarnings({\n      name: COMPONENT_NAME,\n      props,\n      deprecations: {\n        getMenuClassNames: 'styles',\n      },\n    });\n\n    const dismiss = (ev?: any, dismissAll?: boolean) => props.onDismiss?.(ev, dismissAll);\n    const [targetRef, targetWindow] = useTarget(props.target, hostElement);\n    const [tryFocusPreviousActiveElement] = usePreviousActiveElement(props, targetWindow, hostElement);\n    const [expandedMenuItemKey, openSubMenu, getSubmenuProps, onSubMenuDismiss] = useSubMenuState(props, dismiss);\n    const [shouldUpdateFocusOnMouseEvent, gotMouseMove, onMenuFocusCapture] = useShouldUpdateFocusOnMouseMove(props);\n    const [onScroll, isScrollIdle] = useScrollHandler(asyncTracker);\n    const [cancelSubMenuTimer, startSubmenuTimer, subMenuEntryTimer] = useSubmenuEnterTimer(props, asyncTracker);\n\n    const responsiveMode = useResponsiveMode(hostElement, props.responsiveMode);\n\n    useVisibility(props, targetWindow);\n\n    const [onKeyDown, onKeyUp, onMenuKeyDown, onItemKeyDown] = useKeyHandlers(props, dismiss, hostElement, openSubMenu);\n    const [\n      onItemMouseEnterBase,\n      onItemMouseMoveBase,\n      onMouseItemLeave,\n      onItemClick,\n      onAnchorClick,\n      executeItemClick,\n      onItemClickBase,\n    ] = useMouseHandlers(\n      props,\n      isScrollIdle,\n      subMenuEntryTimer,\n      targetWindow,\n      shouldUpdateFocusOnMouseEvent,\n      gotMouseMove,\n      expandedMenuItemKey,\n      hostElement,\n      startSubmenuTimer,\n      cancelSubMenuTimer,\n      openSubMenu,\n      onSubMenuDismiss,\n      dismiss,\n    );\n\n    //#region Render helpers\n\n    const onDefaultRenderMenuList = (\n      menuListProps: IContextualMenuListProps,\n      // eslint-disable-next-line deprecation/deprecation\n      menuClassNames: IProcessedStyleSet<IContextualMenuStyles> | IContextualMenuClassNames,\n      defaultRender?: IRenderFunction<IContextualMenuListProps>,\n    ): JSX.Element => {\n      let indexCorrection = 0;\n      const { items, totalItemCount, hasCheckmarks, hasIcons } = menuListProps;\n\n      return (\n        <ul className={menuClassNames.list} onKeyDown={onKeyDown} onKeyUp={onKeyUp} role={'presentation'}>\n          {items.map((item, index) => {\n            const menuItem = renderMenuItem(\n              item,\n              index,\n              indexCorrection,\n              totalItemCount,\n              hasCheckmarks,\n              hasIcons,\n              menuClassNames,\n            );\n            if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {\n              const indexIncrease = item.customOnRenderListLength ? item.customOnRenderListLength : 1;\n              indexCorrection += indexIncrease;\n            }\n            return menuItem;\n          })}\n        </ul>\n      );\n    };\n\n    const renderFocusZone = (children: JSX.Element | null, adjustedFocusZoneProps: IFocusZoneProps): JSX.Element => {\n      const { focusZoneAs: ChildrenRenderer = FocusZone } = props;\n      return <ChildrenRenderer {...adjustedFocusZoneProps}>{children}</ChildrenRenderer>;\n    };\n\n    /**\n     * !!!IMPORTANT!!! Avoid mutating `item: IContextualMenuItem` argument. It will\n     * cause the menu items to always re-render because the component update is based on shallow comparison.\n     */\n    const renderMenuItem = (\n      item: IContextualMenuItem,\n      index: number,\n      focusableElementIndex: number,\n      totalItemCount: number,\n      hasCheckmarks: boolean,\n      hasIcons: boolean,\n      // eslint-disable-next-line deprecation/deprecation\n      menuClassNames: IProcessedStyleSet<IContextualMenuStyles> | IContextualMenuClassNames,\n    ): JSX.Element => {\n      const renderedItems: React.ReactNode[] = [];\n      const iconProps = item.iconProps || { iconName: 'None' };\n      const {\n        getItemClassNames, // eslint-disable-line deprecation/deprecation\n        itemProps,\n      } = item;\n      const styles = itemProps ? itemProps.styles : undefined;\n\n      // We only send a dividerClassName when the item to be rendered is a divider.\n      // For all other cases, the default divider style is used.\n      const dividerClassName = item.itemType === ContextualMenuItemType.Divider ? item.className : undefined;\n      const subMenuIconClassName = item.submenuIconProps ? item.submenuIconProps.className : '';\n\n      // eslint-disable-next-line deprecation/deprecation\n      let itemClassNames: IMenuItemClassNames;\n\n      // IContextualMenuItem#getItemClassNames for backwards compatibility\n      // otherwise uses mergeStyles for class names.\n      if (getItemClassNames) {\n        itemClassNames = getItemClassNames(\n          props.theme!,\n          isItemDisabled(item),\n          expandedMenuItemKey === item.key,\n          !!getIsChecked(item),\n          !!item.href,\n          iconProps.iconName !== 'None',\n          item.className,\n          dividerClassName,\n          iconProps.className,\n          subMenuIconClassName,\n          item.primaryDisabled,\n        );\n      } else {\n        const itemStyleProps: IContextualMenuItemStyleProps = {\n          theme: props.theme!,\n          disabled: isItemDisabled(item),\n          expanded: expandedMenuItemKey === item.key,\n          checked: !!getIsChecked(item),\n          isAnchorLink: !!item.href,\n          knownIcon: iconProps.iconName !== 'None',\n          itemClassName: item.className,\n          dividerClassName,\n          iconClassName: iconProps.className,\n          subMenuClassName: subMenuIconClassName,\n          primaryDisabled: item.primaryDisabled,\n        };\n\n        // We need to generate default styles then override if styles are provided\n        // since the ContextualMenu currently handles item classNames.\n        itemClassNames = getContextualMenuItemClassNames(\n          _getMenuItemStylesFunction(menuClassNames.subComponentStyles?.menuItem, styles),\n          itemStyleProps,\n        );\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (item.text === '-' || item.name === '-') {\n        item.itemType = ContextualMenuItemType.Divider;\n      }\n      switch (item.itemType) {\n        case ContextualMenuItemType.Divider:\n          renderedItems.push(renderSeparator(index, itemClassNames));\n          break;\n        case ContextualMenuItemType.Header:\n          renderedItems.push(renderSeparator(index, itemClassNames));\n          const headerItem = renderHeaderMenuItem(item, itemClassNames, menuClassNames, index, hasCheckmarks, hasIcons);\n          renderedItems.push(renderListItem(headerItem, item.key || index, itemClassNames, item.title));\n          break;\n        case ContextualMenuItemType.Section:\n          renderedItems.push(renderSectionItem(item, itemClassNames, menuClassNames, index, hasCheckmarks, hasIcons));\n          break;\n        default:\n          const defaultRenderNormalItem = () =>\n            renderNormalItem(\n              item,\n              itemClassNames,\n              index,\n              focusableElementIndex,\n              totalItemCount,\n              hasCheckmarks,\n              hasIcons,\n            ) as JSX.Element;\n\n          const menuItem = props.onRenderContextualMenuItem\n            ? props.onRenderContextualMenuItem(item, defaultRenderNormalItem)\n            : defaultRenderNormalItem();\n          renderedItems.push(renderListItem(menuItem, item.key || index, itemClassNames, item.title));\n          break;\n      }\n\n      // Since multiple nodes *could* be rendered, wrap them all in a fragment with this item's key.\n      // This ensures the reconciler handles multi-item output per-node correctly and does not re-mount content.\n      return <React.Fragment key={item.key}>{renderedItems}</React.Fragment>;\n    };\n\n    const defaultMenuItemRenderer = (\n      item: IContextualMenuItemRenderProps,\n      // eslint-disable-next-line deprecation/deprecation\n      menuClassNames: IProcessedStyleSet<IContextualMenuStyles> | IContextualMenuClassNames,\n    ): React.ReactNode => {\n      const { index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons } = item;\n      return renderMenuItem(\n        item,\n        index,\n        focusableElementIndex,\n        totalItemCount,\n        hasCheckmarks,\n        hasIcons,\n        menuClassNames,\n      );\n    };\n\n    const renderSectionItem = (\n      sectionItem: IContextualMenuItem,\n      // eslint-disable-next-line deprecation/deprecation\n      itemClassNames: IMenuItemClassNames,\n      // eslint-disable-next-line deprecation/deprecation\n      menuClassNames: IProcessedStyleSet<IContextualMenuStyles> | IContextualMenuClassNames,\n      index: number,\n      hasCheckmarks: boolean,\n      hasIcons: boolean,\n    ) => {\n      const sectionProps = sectionItem.sectionProps;\n      if (!sectionProps) {\n        return;\n      }\n\n      let headerItem;\n      let groupProps;\n      if (sectionProps.title) {\n        let headerContextualMenuItem: IContextualMenuItem | undefined = undefined;\n        let ariaLabelledby = '';\n        if (typeof sectionProps.title === 'string') {\n          // Since title is a user-facing string, it needs to be stripped\n          // of whitespace in order to build a valid element ID\n          const id = menuId + sectionProps.title.replace(/\\s/g, '');\n          headerContextualMenuItem = {\n            key: `section-${sectionProps.title}-title`,\n            itemType: ContextualMenuItemType.Header,\n            text: sectionProps.title,\n            id: id,\n          };\n          ariaLabelledby = id;\n        } else {\n          const id = sectionProps.title.id || menuId + sectionProps.title.key.replace(/\\s/g, '');\n          headerContextualMenuItem = { ...sectionProps.title, id };\n          ariaLabelledby = id;\n        }\n\n        if (headerContextualMenuItem) {\n          groupProps = {\n            role: 'group',\n            'aria-labelledby': ariaLabelledby,\n          };\n          headerItem = renderHeaderMenuItem(\n            headerContextualMenuItem,\n            itemClassNames,\n            menuClassNames,\n            index,\n            hasCheckmarks,\n            hasIcons,\n          );\n        }\n      }\n\n      if (sectionProps.items && sectionProps.items.length > 0) {\n        return (\n          <li role=\"presentation\" key={sectionProps.key || sectionItem.key || `section-${index}`}>\n            <div {...groupProps}>\n              <ul className={menuClassNames.list} role=\"presentation\">\n                {sectionProps.topDivider && renderSeparator(index, itemClassNames, true, true)}\n                {headerItem && renderListItem(headerItem, sectionItem.key || index, itemClassNames, sectionItem.title)}\n                {sectionProps.items.map((contextualMenuItem, itemsIndex) =>\n                  renderMenuItem(\n                    contextualMenuItem,\n                    itemsIndex,\n                    itemsIndex,\n                    sectionProps.items.length,\n                    hasCheckmarks,\n                    hasIcons,\n                    menuClassNames,\n                  ),\n                )}\n                {sectionProps.bottomDivider && renderSeparator(index, itemClassNames, false, true)}\n              </ul>\n            </div>\n          </li>\n        );\n      }\n    };\n\n    const renderListItem = (\n      content: React.ReactNode,\n      key: string | number,\n      classNames: IMenuItemClassNames, // eslint-disable-line deprecation/deprecation\n      title?: string,\n    ) => {\n      return (\n        <li role=\"presentation\" title={title} key={key} className={classNames.item}>\n          {content}\n        </li>\n      );\n    };\n\n    const renderSeparator = (\n      index: number,\n      classNames: IMenuItemClassNames, // eslint-disable-line deprecation/deprecation\n      top?: boolean,\n      fromSection?: boolean,\n    ): React.ReactNode => {\n      if (fromSection || index > 0) {\n        return (\n          <li\n            role=\"separator\"\n            key={'separator-' + index + (top === undefined ? '' : top ? '-top' : '-bottom')}\n            className={classNames.divider}\n            aria-hidden=\"true\"\n          />\n        );\n      }\n      return null;\n    };\n\n    const renderNormalItem = (\n      item: IContextualMenuItem,\n      classNames: IMenuItemClassNames, // eslint-disable-line deprecation/deprecation\n      index: number,\n      focusableElementIndex: number,\n      totalItemCount: number,\n      hasCheckmarks: boolean,\n      hasIcons: boolean,\n    ): React.ReactNode => {\n      if (item.onRender) {\n        return item.onRender(\n          { 'aria-posinset': focusableElementIndex + 1, 'aria-setsize': totalItemCount, ...item },\n          dismiss,\n        );\n      }\n\n      const { contextualMenuItemAs } = props;\n\n      const commonProps = {\n        item,\n        classNames,\n        index,\n        focusableElementIndex,\n        totalItemCount,\n        hasCheckmarks,\n        hasIcons,\n        contextualMenuItemAs,\n        onItemMouseEnter: onItemMouseEnterBase,\n        onItemMouseLeave: onMouseItemLeave,\n        onItemMouseMove: onItemMouseMoveBase,\n        onItemMouseDown: onItemMouseDown,\n        executeItemClick: executeItemClick,\n        onItemKeyDown: onItemKeyDown,\n        expandedMenuItemKey,\n        openSubMenu,\n        dismissSubMenu: onSubMenuDismiss,\n        dismissMenu: dismiss,\n      } as const;\n\n      if (item.href) {\n        return <ContextualMenuAnchor {...commonProps} onItemClick={onAnchorClick} />;\n      }\n\n      if (item.split && hasSubmenu(item)) {\n        return (\n          <ContextualMenuSplitButton\n            {...commonProps}\n            onItemClick={onItemClick}\n            onItemClickBase={onItemClickBase}\n            onTap={cancelSubMenuTimer}\n          />\n        );\n      }\n\n      return <ContextualMenuButton {...commonProps} onItemClick={onItemClick} onItemClickBase={onItemClickBase} />;\n    };\n\n    const renderHeaderMenuItem = (\n      item: IContextualMenuItem,\n      // eslint-disable-next-line deprecation/deprecation\n      itemClassNames: IMenuItemClassNames,\n      // eslint-disable-next-line deprecation/deprecation\n      menuClassNames: IProcessedStyleSet<IContextualMenuStyles> | IContextualMenuClassNames,\n      index: number,\n      hasCheckmarks: boolean,\n      hasIcons: boolean,\n    ): React.ReactNode => {\n      const { contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem } = props;\n      const { itemProps, id } = item;\n      const divHtmlProperties =\n        itemProps && getNativeProps<React.HTMLAttributes<HTMLDivElement>>(itemProps, divProperties);\n      return (\n        // eslint-disable-next-line deprecation/deprecation\n        <div id={id} className={menuClassNames.header} {...divHtmlProperties} style={item.style}>\n          <ChildrenRenderer\n            item={item}\n            classNames={itemClassNames}\n            index={index}\n            onCheckmarkClick={hasCheckmarks ? onItemClick : undefined}\n            hasIcons={hasIcons}\n            {...itemProps}\n          />\n        </div>\n      );\n    };\n    //#endregion\n\n    //#region Main render\n    let { isBeakVisible } = props;\n\n    const {\n      items,\n      labelElementId,\n      id,\n      className,\n      beakWidth,\n      directionalHint,\n      directionalHintForRTL,\n      alignTargetEdge,\n      gapSpace,\n      coverTarget,\n      ariaLabel,\n      doNotLayer,\n      target,\n      bounds,\n      useTargetWidth,\n      useTargetAsMinWidth,\n      directionalHintFixed,\n      shouldFocusOnMount,\n      shouldFocusOnContainer,\n      title,\n      styles,\n      theme,\n      calloutProps,\n      onRenderSubMenu = onDefaultRenderSubMenu,\n      onRenderMenuList = (\n        menuListProps: IContextualMenuListProps,\n        defaultRender?: IRenderFunction<IContextualMenuListProps>,\n      ) => onDefaultRenderMenuList(menuListProps, classNames, defaultRender),\n      focusZoneProps,\n      // eslint-disable-next-line deprecation/deprecation\n      getMenuClassNames,\n    } = props;\n\n    const classNames = getMenuClassNames\n      ? getMenuClassNames(theme!, className)\n      : getClassNames(styles, {\n          theme: theme!,\n          className: className,\n        });\n\n    const hasIcons = itemsHaveIcons(items);\n\n    function itemsHaveIcons(contextualMenuItems: IContextualMenuItem[]): boolean {\n      for (const item of contextualMenuItems) {\n        if (item.iconProps) {\n          return true;\n        }\n\n        if (\n          item.itemType === ContextualMenuItemType.Section &&\n          item.sectionProps &&\n          itemsHaveIcons(item.sectionProps.items)\n        ) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    const adjustedFocusZoneProps = {\n      direction: FocusZoneDirection.vertical,\n      handleTabKey: FocusZoneTabbableElements.all,\n      isCircularNavigation: true,\n      ...focusZoneProps,\n      className: css(classNames.root, props.focusZoneProps?.className),\n    };\n\n    const hasCheckmarks = canAnyMenuItemsCheck(items);\n    const submenuProps = expandedMenuItemKey && props.hidden !== true ? getSubmenuProps() : null;\n\n    isBeakVisible = isBeakVisible === undefined ? responsiveMode! <= ResponsiveMode.medium : isBeakVisible;\n    /**\n     * When useTargetWidth is true, get the width of the target element and apply it for the context menu container\n     */\n    let contextMenuStyle: React.CSSProperties;\n    const targetAsHtmlElement = targetRef.current as HTMLElement;\n    if ((useTargetWidth || useTargetAsMinWidth) && targetAsHtmlElement && targetAsHtmlElement.offsetWidth) {\n      const targetBoundingRect = targetAsHtmlElement.getBoundingClientRect();\n      const targetWidth = targetBoundingRect.width - 2; /* Accounts for 1px border */\n\n      if (useTargetWidth) {\n        contextMenuStyle = {\n          width: targetWidth,\n        };\n      } else if (useTargetAsMinWidth) {\n        contextMenuStyle = {\n          minWidth: targetWidth,\n        };\n      }\n    }\n\n    // The menu should only return if items were provided, if no items were provided then it should not appear.\n    if (items && items.length > 0) {\n      let totalItemCount = 0;\n      for (const item of items) {\n        if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {\n          const itemCount = item.customOnRenderListLength ? item.customOnRenderListLength : 1;\n          totalItemCount += itemCount;\n        }\n      }\n\n      const calloutStyles = classNames.subComponentStyles\n        ? (classNames.subComponentStyles.callout as IStyleFunctionOrObject<\n            ICalloutContentStyleProps,\n            ICalloutContentStyles\n          >)\n        : undefined;\n\n      return (\n        <MenuContext.Consumer>\n          {menuContext => (\n            <Callout\n              styles={calloutStyles}\n              onRestoreFocus={tryFocusPreviousActiveElement}\n              {...calloutProps}\n              target={target || (menuContext.target as IContextualMenuProps['target'])}\n              isBeakVisible={isBeakVisible}\n              beakWidth={beakWidth}\n              directionalHint={directionalHint}\n              directionalHintForRTL={directionalHintForRTL}\n              gapSpace={gapSpace}\n              coverTarget={coverTarget}\n              doNotLayer={doNotLayer}\n              className={css('ms-ContextualMenu-Callout', calloutProps && calloutProps.className)}\n              setInitialFocus={shouldFocusOnMount}\n              onDismiss={props.onDismiss || menuContext.onDismiss}\n              onScroll={onScroll}\n              bounds={bounds}\n              directionalHintFixed={directionalHintFixed}\n              alignTargetEdge={alignTargetEdge}\n              hidden={props.hidden || menuContext.hidden}\n              ref={forwardedRef}\n            >\n              <div\n                style={contextMenuStyle}\n                ref={hostElement}\n                id={id}\n                className={classNames.container}\n                tabIndex={shouldFocusOnContainer ? 0 : -1}\n                onKeyDown={onMenuKeyDown}\n                onKeyUp={onKeyUp}\n                onFocusCapture={onMenuFocusCapture}\n                aria-label={ariaLabel}\n                aria-labelledby={labelElementId}\n                role={'menu'}\n              >\n                {title && <div className={classNames.title}> {title} </div>}\n                {items && items.length\n                  ? renderFocusZone(\n                      onRenderMenuList(\n                        {\n                          ariaLabel,\n                          items,\n                          totalItemCount,\n                          hasCheckmarks,\n                          hasIcons,\n                          defaultMenuItemRenderer: (item: IContextualMenuItemRenderProps) =>\n                            defaultMenuItemRenderer(item, classNames),\n                          labelElementId,\n                        },\n                        (\n                          menuListProps: IContextualMenuListProps,\n                          defaultRender?: IRenderFunction<IContextualMenuListProps>,\n                        ) => onDefaultRenderMenuList(menuListProps, classNames, defaultRender),\n                      ),\n                      adjustedFocusZoneProps,\n                    )\n                  : null}\n                {submenuProps && onRenderSubMenu(submenuProps, onDefaultRenderSubMenu)}\n              </div>\n              <FocusRects />\n            </Callout>\n          )}\n        </MenuContext.Consumer>\n      );\n    } else {\n      return null;\n    }\n    //#endregion\n  }),\n  (prevProps, newProps) => {\n    if (!newProps.shouldUpdateWhenHidden && prevProps.hidden && newProps.hidden) {\n      // Do not update when hidden.\n      return true;\n    }\n\n    return shallowCompare(prevProps, newProps);\n  },\n);\nContextualMenuBase.displayName = 'ContextualMenuBase';\n\n/**\n * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n */\nfunction isAltOrMeta(ev: React.KeyboardEvent<HTMLElement>): boolean {\n  // eslint-disable-next-line deprecation/deprecation\n  return ev.which === KeyCodes.alt || ev.key === 'Meta';\n}\n\nfunction onItemMouseDown(item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>): void {\n  item.onMouseDown?.(item, ev);\n}\n\nfunction onDefaultRenderSubMenu(\n  subMenuProps: IContextualMenuProps,\n  defaultRender?: IRenderFunction<IContextualMenuProps>,\n): JSX.Element {\n  throw Error(\n    'ContextualMenuBase: onRenderSubMenu callback is null or undefined. ' +\n      'Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.',\n  );\n}\n\n/**\n * Returns the item that matches a given key if any.\n * @param key - The key of the item to match\n * @param items - The items to look for the key\n */\nfunction findItemByKeyFromItems(key: string, items: IContextualMenuItem[]): IContextualMenuItem | undefined {\n  for (const item of items) {\n    if (item.itemType === ContextualMenuItemType.Section && item.sectionProps) {\n      const match = findItemByKeyFromItems(key, item.sectionProps.items);\n      if (match) {\n        return match;\n      }\n    } else if (item.key && item.key === key) {\n      return item;\n    }\n  }\n}\n\nfunction getOnClickWithOverrideTarget(\n  onClick:\n    | ((\n        ev?: React.MouseEvent<HTMLElement, MouseEvent> | React.KeyboardEvent<HTMLElement> | undefined,\n        item?: IContextualMenuItem | undefined,\n      ) => boolean | void)\n    | undefined,\n  target: Target | undefined,\n) {\n  return onClick\n    ? (\n        ev?: React.MouseEvent<HTMLElement, MouseEvent> | React.KeyboardEvent<HTMLElement> | undefined,\n        item?: IContextualMenuItem | undefined,\n      ) => {\n        overrideTarget(ev, target);\n\n        return onClick(ev, item);\n      }\n    : onClick;\n}\n\nfunction overrideTarget(\n  ev?: React.MouseEvent<HTMLElement, MouseEvent> | React.KeyboardEvent<HTMLElement> | undefined,\n  target?: Target,\n): void {\n  if (ev && target) {\n    ev.persist();\n\n    if (target instanceof Event) {\n      ev.target = target.target as HTMLElement;\n    } else if (target instanceof Element) {\n      ev.target = target;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}