{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { ActionButton } from '../../Button';\nimport { buttonStyles } from './Nav.styles';\nimport { classNamesFunction, divProperties, getNativeProps, getWindow, initializeComponentRef } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon } from '../../Icon';\nimport { composeComponentAs, composeRenderFunction } from '@fluentui/utilities';\n// The number pixels per indentation level for Nav links.\nvar _indentationSize = 14;\n// The number of pixels of left margin\nvar _baseIndent = 3;\n// global var used in _isLinkSelectedKey\nvar _urlResolver;\nexport function isRelativeUrl(url) {\n  // A URL is relative if it has no protocol.\n  return !!url && !/^[a-z0-9+-.]+:\\/\\//i.test(url);\n}\nvar getClassNames = classNamesFunction();\nvar NavBase = /** @class */function (_super) {\n  __extends(NavBase, _super);\n  function NavBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._focusZone = React.createRef();\n    _this._onRenderLink = function (link) {\n      var _a = _this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        groups: groups\n      });\n      return React.createElement(\"div\", {\n        className: classNames.linkText\n      }, link.name);\n    };\n    _this._renderGroup = function (group, groupIndex) {\n      var _a = _this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme,\n        _b = _a.onRenderGroupHeader,\n        onRenderGroupHeader = _b === void 0 ? _this._renderGroupHeader : _b;\n      var isExpanded = _this._isGroupExpanded(group);\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        isGroup: true,\n        isExpanded: isExpanded,\n        groups: groups\n      });\n      var finalOnHeaderClick = function (ev, isCollapsing) {\n        _this._onGroupHeaderClicked(group, ev);\n      };\n      var groupProps = __assign(__assign({}, group), {\n        isExpanded: isExpanded,\n        onHeaderClick: finalOnHeaderClick\n      });\n      return React.createElement(\"div\", {\n        key: groupIndex,\n        className: classNames.group\n      }, groupProps.name ? onRenderGroupHeader(groupProps, _this._renderGroupHeader) : null, React.createElement(\"div\", {\n        className: classNames.groupContent\n      }, _this._renderLinks(groupProps.links, 0 /* nestingLevel */)));\n    };\n\n    _this._renderGroupHeader = function (group) {\n      var _a;\n      // eslint-disable-next-line deprecation/deprecation\n      var _b = _this.props,\n        styles = _b.styles,\n        groups = _b.groups,\n        theme = _b.theme,\n        expandButtonAriaLabel = _b.expandButtonAriaLabel;\n      var isExpanded = group.isExpanded;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        isGroup: true,\n        isExpanded: isExpanded,\n        groups: groups\n      });\n      // respect deprecated collapseAriaLabel, but default to expandAriaLabel for both states\n      // eslint-disable-next-line deprecation/deprecation\n      var collapseAriaLabel = (_a = group.collapseAriaLabel) !== null && _a !== void 0 ? _a : group.expandAriaLabel;\n      var label = (isExpanded ? collapseAriaLabel : group.expandAriaLabel) || expandButtonAriaLabel;\n      var onHeaderClick = group.onHeaderClick;\n      var onClick = onHeaderClick ? function (ev) {\n        onHeaderClick(ev, isExpanded);\n      } : undefined;\n      return React.createElement(\"button\", {\n        className: classNames.chevronButton,\n        onClick: onClick,\n        \"aria-label\": label,\n        \"aria-expanded\": isExpanded\n      }, React.createElement(Icon, {\n        className: classNames.chevronIcon,\n        iconName: \"ChevronDown\"\n      }), group.name);\n    };\n    initializeComponentRef(_this);\n    _this.state = {\n      isGroupCollapsed: {},\n      // TODO: consider removing\n      // eslint-disable-next-line react/no-unused-state\n      isLinkExpandStateChanged: false,\n      selectedKey: props.initialSelectedKey || props.selectedKey\n    };\n    return _this;\n  }\n  NavBase.prototype.render = function () {\n    var _a = this.props,\n      styles = _a.styles,\n      groups = _a.groups,\n      className = _a.className,\n      isOnTop = _a.isOnTop,\n      _b = _a.role,\n      role = _b === void 0 ? 'navigation' : _b,\n      theme = _a.theme;\n    if (!groups) {\n      return null;\n    }\n    var groupElements = groups.map(this._renderGroup);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isOnTop: isOnTop,\n      groups: groups\n    });\n    return React.createElement(FocusZone, __assign({\n      direction: FocusZoneDirection.vertical,\n      componentRef: this._focusZone\n    }, this.props.focusZoneProps), React.createElement(\"nav\", {\n      role: role,\n      className: classNames.root,\n      \"aria-label\": this.props.ariaLabel\n    }, groupElements));\n  };\n  Object.defineProperty(NavBase.prototype, \"selectedKey\", {\n    get: function () {\n      return this.state.selectedKey;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  NavBase.prototype.focus = function (forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n    if (this._focusZone && this._focusZone.current) {\n      return this._focusZone.current.focus(forceIntoFirstElement);\n    }\n    return false;\n  };\n  NavBase.prototype._renderNavLink = function (link, linkIndex, nestingLevel) {\n    var _a = this.props,\n      styles = _a.styles,\n      groups = _a.groups,\n      theme = _a.theme;\n    var isLinkWithIcon = link.icon || link.iconProps;\n    var isSelectedLink = this._isLinkSelected(link);\n    var _b = link.ariaCurrent,\n      ariaCurrent = _b === void 0 ? 'page' : _b;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      isSelected: isSelectedLink,\n      isDisabled: link.disabled,\n      isButtonEntry: link.onClick && !link.forceAnchor,\n      leftPadding: _indentationSize * nestingLevel + _baseIndent + (isLinkWithIcon ? 0 : 24),\n      groups: groups\n    });\n    // Prevent hijacking of the parent window if link.target is defined\n    var rel = link.url && link.target && !isRelativeUrl(link.url) ? 'noopener noreferrer' : undefined;\n    var LinkAs = this.props.linkAs ? composeComponentAs(this.props.linkAs, ActionButton) : ActionButton;\n    var onRenderLink = this.props.onRenderLink ? composeRenderFunction(this.props.onRenderLink, this._onRenderLink) : this._onRenderLink;\n    return React.createElement(LinkAs, {\n      className: classNames.link,\n      styles: buttonStyles,\n      href: link.url || (link.forceAnchor ? '#' : undefined),\n      iconProps: link.iconProps || {\n        iconName: link.icon\n      },\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick: link.onClick ? this._onNavButtonLinkClicked.bind(this, link) : this._onNavAnchorLinkClicked.bind(this, link),\n      title: link.title !== undefined ? link.title : link.name,\n      target: link.target,\n      rel: rel,\n      disabled: link.disabled,\n      \"aria-current\": isSelectedLink ? ariaCurrent : undefined,\n      \"aria-label\": link.ariaLabel ? link.ariaLabel : undefined,\n      link: link\n    }, onRenderLink(link));\n  };\n  NavBase.prototype._renderCompositeLink = function (link, linkIndex, nestingLevel) {\n    var _a;\n    var divProps = __assign({}, getNativeProps(link, divProperties, ['onClick']));\n    // eslint-disable-next-line deprecation/deprecation\n    var _b = this.props,\n      expandButtonAriaLabel = _b.expandButtonAriaLabel,\n      styles = _b.styles,\n      groups = _b.groups,\n      theme = _b.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      isExpanded: !!link.isExpanded,\n      isSelected: this._isLinkSelected(link),\n      isLink: true,\n      isDisabled: link.disabled,\n      position: _indentationSize * nestingLevel + 1,\n      groups: groups\n    });\n    var finalExpandBtnAriaLabel = '';\n    if (link.links && link.links.length > 0) {\n      if (link.collapseAriaLabel || link.expandAriaLabel) {\n        // still respect link.collapseAriaLabel, even though it's deprecated in favor of expandAriaLabel\n        var collapseAriaLabel = (_a = link.collapseAriaLabel) !== null && _a !== void 0 ? _a : link.expandAriaLabel;\n        finalExpandBtnAriaLabel = link.isExpanded ? collapseAriaLabel : link.expandAriaLabel;\n      } else {\n        // TODO remove when `expandButtonAriaLabel` is removed. This is not an ideal concatenation for localization.\n        finalExpandBtnAriaLabel = expandButtonAriaLabel ? link.name + \" \" + expandButtonAriaLabel : link.name;\n      }\n    }\n    return React.createElement(\"div\", __assign({}, divProps, {\n      key: link.key || linkIndex,\n      className: classNames.compositeLink\n    }), link.links && link.links.length > 0 ? React.createElement(\"button\", {\n      className: classNames.chevronButton,\n      onClick: this._onLinkExpandClicked.bind(this, link),\n      \"aria-label\": finalExpandBtnAriaLabel,\n      \"aria-expanded\": link.isExpanded ? 'true' : 'false'\n    }, React.createElement(Icon, {\n      className: classNames.chevronIcon,\n      iconName: \"ChevronDown\"\n    })) : null, this._renderNavLink(link, linkIndex, nestingLevel));\n  };\n  NavBase.prototype._renderLink = function (link, linkIndex, nestingLevel) {\n    var _a = this.props,\n      styles = _a.styles,\n      groups = _a.groups,\n      theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      groups: groups\n    });\n    return React.createElement(\"li\", {\n      key: link.key || linkIndex,\n      role: \"listitem\",\n      className: classNames.navItem\n    }, this._renderCompositeLink(link, linkIndex, nestingLevel), link.isExpanded ? this._renderLinks(link.links, ++nestingLevel) : null);\n  };\n  NavBase.prototype._renderLinks = function (links, nestingLevel) {\n    var _this = this;\n    if (!links || !links.length) {\n      return null;\n    }\n    var linkElements = links.map(function (link, linkIndex) {\n      return _this._renderLink(link, linkIndex, nestingLevel);\n    });\n    var _a = this.props,\n      styles = _a.styles,\n      groups = _a.groups,\n      theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      groups: groups\n    });\n    return React.createElement(\"ul\", {\n      role: \"list\",\n      className: classNames.navItems\n    }, linkElements);\n  };\n  NavBase.prototype._onGroupHeaderClicked = function (group, ev) {\n    if (group.onHeaderClick) {\n      group.onHeaderClick(ev, this._isGroupExpanded(group));\n    }\n    if (group.isExpanded === undefined) {\n      this._toggleCollapsed(group);\n    }\n    if (ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n  NavBase.prototype._onLinkExpandClicked = function (link, ev) {\n    var onLinkExpandClick = this.props.onLinkExpandClick;\n    if (onLinkExpandClick) {\n      onLinkExpandClick(ev, link);\n    }\n    if (!ev.defaultPrevented) {\n      link.isExpanded = !link.isExpanded;\n      // eslint-disable-next-line react/no-unused-state\n      this.setState({\n        isLinkExpandStateChanged: true\n      });\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n  NavBase.prototype._preventBounce = function (link, ev) {\n    if (!link.url && link.forceAnchor) {\n      ev.preventDefault();\n    }\n  };\n  NavBase.prototype._onNavAnchorLinkClicked = function (link, ev) {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n    if (this.props.onLinkClick) {\n      this.props.onLinkClick(ev, link);\n    }\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n    this.setState({\n      selectedKey: link.key\n    });\n  };\n  NavBase.prototype._onNavButtonLinkClicked = function (link, ev) {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n    if (link.onClick) {\n      link.onClick(ev, link);\n    }\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n    this.setState({\n      selectedKey: link.key\n    });\n  };\n  NavBase.prototype._isLinkSelected = function (link) {\n    // if caller passes in selectedKey, use it as first choice or\n    // if current state.selectedKey (from addressbar) is match to the link or\n    // check if URL is matching location.href (if link.url exists)\n    if (this.props.selectedKey !== undefined) {\n      return link.key === this.props.selectedKey;\n    } else if (this.state.selectedKey !== undefined) {\n      return link.key === this.state.selectedKey;\n    } else if (typeof getWindow() === 'undefined' || !link.url) {\n      // resolve is not supported for ssr\n      return false;\n    } else {\n      // If selectedKey is undefined in props and state, then check URL\n      _urlResolver = _urlResolver || document.createElement('a');\n      _urlResolver.href = link.url || '';\n      var target = _urlResolver.href;\n      if (location.href === target) {\n        return true;\n      }\n      // If selectedKey is not defined in state, then check URL to determine link selected status\n      if (location.protocol + '//' + location.host + location.pathname === target) {\n        return true;\n      }\n      if (location.hash) {\n        // Match the hash to the url.\n        if (location.hash === link.url) {\n          return true;\n        }\n        // Match a rebased url. (e.g. #foo becomes http://hostname/foo)\n        _urlResolver.href = location.hash.substring(1);\n        return _urlResolver.href === target;\n      }\n    }\n    return false;\n  };\n  NavBase.prototype._isGroupExpanded = function (group) {\n    if (group.isExpanded !== undefined) {\n      return group.isExpanded;\n    }\n    if (group.name && this.state.isGroupCollapsed.hasOwnProperty(group.name)) {\n      return !this.state.isGroupCollapsed[group.name];\n    }\n    if (group.collapseByDefault !== undefined) {\n      return !group.collapseByDefault;\n    }\n    return true;\n  };\n  NavBase.prototype._toggleCollapsed = function (group) {\n    var _a;\n    if (group.name) {\n      var newGroupCollapsed = __assign(__assign({}, this.state.isGroupCollapsed), (_a = {}, _a[group.name] = this._isGroupExpanded(group), _a));\n      this.setState({\n        isGroupCollapsed: newGroupCollapsed\n      });\n    }\n  };\n  NavBase.defaultProps = {\n    groups: null\n  };\n  return NavBase;\n}(React.Component);\nexport { NavBase };","map":{"version":3,"mappings":"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","names":["React","ActionButton","buttonStyles","classNamesFunction","divProperties","getNativeProps","getWindow","initializeComponentRef","FocusZone","FocusZoneDirection","Icon","composeComponentAs","composeRenderFunction","_indentationSize","_baseIndent","_urlResolver","isRelativeUrl","url","test","getClassNames","__extends","props","_super","_this","createRef","link","styles","groups","theme","classNames","className","linkText","name","group","groupIndex","_b","onRenderGroupHeader","_renderGroupHeader","isExpanded","_isGroupExpanded","isGroup","finalOnHeaderClick","ev","isCollapsing","_onGroupHeaderClicked","groupProps","onHeaderClick","key","groupContent","_renderLinks","links","expandButtonAriaLabel","collapseAriaLabel","expandAriaLabel","label","onClick","undefined","chevronButton","chevronIcon","iconName","state","isGroupCollapsed","isLinkExpandStateChanged","selectedKey","initialSelectedKey","NavBase","isOnTop","role","groupElements","map","_renderGroup","direction","vertical","componentRef","_focusZone","focusZoneProps","root","ariaLabel","Object","forceIntoFirstElement","current","focus","linkIndex","nestingLevel","isLinkWithIcon","icon","iconProps","isSelectedLink","_isLinkSelected","ariaCurrent","isSelected","isDisabled","disabled","isButtonEntry","forceAnchor","leftPadding","rel","target","LinkAs","linkAs","onRenderLink","_onRenderLink","href","_onNavButtonLinkClicked","bind","_onNavAnchorLinkClicked","title","divProps","isLink","position","finalExpandBtnAriaLabel","length","compositeLink","_onLinkExpandClicked","_renderNavLink","navItem","_renderCompositeLink","linkElements","_renderLink","navItems","_toggleCollapsed","preventDefault","stopPropagation","onLinkExpandClick","defaultPrevented","setState","_preventBounce","onLinkClick","document","createElement","location","protocol","host","pathname","hash","substring","hasOwnProperty","collapseByDefault","newGroupCollapsed","Component"],"sources":["C:\\Users\\hpryz\\Documents\\_Programming\\web-project\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Nav\\Nav.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ActionButton } from '../../Button';\nimport { buttonStyles } from './Nav.styles';\nimport { classNamesFunction, divProperties, getNativeProps, getWindow, initializeComponentRef } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon } from '../../Icon';\nimport { composeComponentAs, composeRenderFunction } from '@fluentui/utilities';\nimport type { IFocusZone } from '../../FocusZone';\nimport type {\n  INav,\n  INavLink,\n  INavLinkGroup,\n  INavProps,\n  INavStyleProps,\n  INavStyles,\n  IRenderGroupHeaderProps,\n} from './Nav.types';\n\n// The number pixels per indentation level for Nav links.\nconst _indentationSize = 14;\n\n// The number of pixels of left margin\nconst _baseIndent = 3;\n\n// global var used in _isLinkSelectedKey\nlet _urlResolver: HTMLAnchorElement | undefined;\n\nexport function isRelativeUrl(url: string): boolean {\n  // A URL is relative if it has no protocol.\n  return !!url && !/^[a-z0-9+-.]+:\\/\\//i.test(url);\n}\n\nconst getClassNames = classNamesFunction<INavStyleProps, INavStyles>();\n\nexport interface INavState {\n  isGroupCollapsed: { [key: string]: boolean };\n  isLinkExpandStateChanged?: boolean;\n  selectedKey?: string;\n}\n\nexport class NavBase extends React.Component<INavProps, INavState> implements INav {\n  public static defaultProps: INavProps = {\n    groups: null,\n  };\n\n  private _focusZone = React.createRef<IFocusZone>();\n  constructor(props: INavProps) {\n    super(props);\n    initializeComponentRef(this);\n    this.state = {\n      isGroupCollapsed: {},\n      // TODO: consider removing\n      // eslint-disable-next-line react/no-unused-state\n      isLinkExpandStateChanged: false,\n      selectedKey: props.initialSelectedKey || props.selectedKey,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const { styles, groups, className, isOnTop, role = 'navigation', theme } = this.props;\n\n    if (!groups) {\n      return null;\n    }\n\n    const groupElements: React.ReactElement<{}>[] = groups.map(this._renderGroup);\n\n    const classNames = getClassNames(styles!, { theme: theme!, className, isOnTop, groups });\n\n    return (\n      <FocusZone direction={FocusZoneDirection.vertical} componentRef={this._focusZone} {...this.props.focusZoneProps}>\n        <nav role={role} className={classNames.root} aria-label={this.props.ariaLabel}>\n          {groupElements}\n        </nav>\n      </FocusZone>\n    );\n  }\n\n  public get selectedKey(): string | undefined {\n    return this.state.selectedKey;\n  }\n\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    if (this._focusZone && this._focusZone.current) {\n      return this._focusZone.current.focus(forceIntoFirstElement);\n    }\n    return false;\n  }\n\n  private _onRenderLink = (link: INavLink): JSX.Element => {\n    const { styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, { theme: theme!, groups });\n    return <div className={classNames.linkText}>{link.name}</div>;\n  };\n\n  private _renderNavLink(link: INavLink, linkIndex: number, nestingLevel: number): JSX.Element {\n    const { styles, groups, theme } = this.props;\n    const isLinkWithIcon = link.icon || link.iconProps;\n    const isSelectedLink = this._isLinkSelected(link);\n    const { ariaCurrent = 'page' } = link;\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isSelected: isSelectedLink,\n      isDisabled: link.disabled,\n      isButtonEntry: link.onClick && !link.forceAnchor,\n      leftPadding: _indentationSize * nestingLevel + _baseIndent + (isLinkWithIcon ? 0 : 24),\n      groups,\n    });\n\n    // Prevent hijacking of the parent window if link.target is defined\n    const rel = link.url && link.target && !isRelativeUrl(link.url) ? 'noopener noreferrer' : undefined;\n\n    const LinkAs = this.props.linkAs ? composeComponentAs(this.props.linkAs, ActionButton) : ActionButton;\n    const onRenderLink = this.props.onRenderLink\n      ? composeRenderFunction(this.props.onRenderLink, this._onRenderLink)\n      : this._onRenderLink;\n\n    return (\n      <LinkAs\n        className={classNames.link}\n        styles={buttonStyles}\n        href={link.url || (link.forceAnchor ? '#' : undefined)}\n        iconProps={link.iconProps || { iconName: link.icon }}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={\n          link.onClick ? this._onNavButtonLinkClicked.bind(this, link) : this._onNavAnchorLinkClicked.bind(this, link)\n        }\n        title={link.title !== undefined ? link.title : link.name}\n        target={link.target}\n        rel={rel}\n        disabled={link.disabled}\n        aria-current={isSelectedLink ? ariaCurrent : undefined}\n        aria-label={link.ariaLabel ? link.ariaLabel : undefined}\n        link={link}\n      >\n        {onRenderLink(link)}\n      </LinkAs>\n    );\n  }\n\n  private _renderCompositeLink(link: INavLink, linkIndex: number, nestingLevel: number): React.ReactElement<{}> {\n    const divProps: React.HTMLProps<HTMLDivElement> = { ...getNativeProps(link, divProperties, ['onClick']) };\n    // eslint-disable-next-line deprecation/deprecation\n    const { expandButtonAriaLabel, styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isExpanded: !!link.isExpanded,\n      isSelected: this._isLinkSelected(link),\n      isLink: true,\n      isDisabled: link.disabled,\n      position: _indentationSize * nestingLevel + 1,\n      groups,\n    });\n\n    let finalExpandBtnAriaLabel = '';\n    if (link.links && link.links.length > 0) {\n      if (link.collapseAriaLabel || link.expandAriaLabel) {\n        // still respect link.collapseAriaLabel, even though it's deprecated in favor of expandAriaLabel\n        const collapseAriaLabel = link.collapseAriaLabel ?? link.expandAriaLabel;\n\n        finalExpandBtnAriaLabel = link.isExpanded ? collapseAriaLabel! : link.expandAriaLabel!;\n      } else {\n        // TODO remove when `expandButtonAriaLabel` is removed. This is not an ideal concatenation for localization.\n        finalExpandBtnAriaLabel = expandButtonAriaLabel ? `${link.name} ${expandButtonAriaLabel}` : link.name;\n      }\n    }\n\n    return (\n      <div {...divProps} key={link.key || linkIndex} className={classNames.compositeLink}>\n        {link.links && link.links.length > 0 ? (\n          <button\n            className={classNames.chevronButton}\n            onClick={this._onLinkExpandClicked.bind(this, link)}\n            aria-label={finalExpandBtnAriaLabel}\n            aria-expanded={link.isExpanded ? 'true' : 'false'}\n          >\n            <Icon className={classNames.chevronIcon} iconName=\"ChevronDown\" />\n          </button>\n        ) : null}\n        {this._renderNavLink(link, linkIndex, nestingLevel)}\n      </div>\n    );\n  }\n\n  private _renderLink(link: INavLink, linkIndex: number, nestingLevel: number): React.ReactElement<{}> {\n    const { styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, { theme: theme!, groups });\n\n    return (\n      <li key={link.key || linkIndex} role=\"listitem\" className={classNames.navItem}>\n        {this._renderCompositeLink(link, linkIndex, nestingLevel)}\n        {link.isExpanded ? this._renderLinks(link.links, ++nestingLevel) : null}\n      </li>\n    );\n  }\n\n  private _renderLinks(links: INavLink[] | undefined, nestingLevel: number): React.ReactElement<{}> | null {\n    if (!links || !links.length) {\n      return null;\n    }\n    const linkElements: React.ReactElement<{}>[] = links.map((link: INavLink, linkIndex: number) =>\n      this._renderLink(link, linkIndex, nestingLevel),\n    );\n\n    const { styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, { theme: theme!, groups });\n\n    return (\n      <ul role=\"list\" className={classNames.navItems}>\n        {linkElements}\n      </ul>\n    );\n  }\n\n  private _renderGroup = (group: INavLinkGroup, groupIndex: number): React.ReactElement<{}> => {\n    const { styles, groups, theme, onRenderGroupHeader = this._renderGroupHeader } = this.props;\n\n    const isExpanded = this._isGroupExpanded(group);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isGroup: true,\n      isExpanded,\n      groups,\n    });\n\n    const finalOnHeaderClick = (\n      ev?: React.MouseEvent<HTMLElement, MouseEvent> | undefined,\n      isCollapsing?: boolean | undefined,\n    ) => {\n      this._onGroupHeaderClicked(group, ev);\n    };\n\n    const groupProps: IRenderGroupHeaderProps = {\n      ...group,\n      isExpanded,\n      onHeaderClick: finalOnHeaderClick,\n    };\n\n    return (\n      <div key={groupIndex} className={classNames.group}>\n        {groupProps.name ? onRenderGroupHeader(groupProps, this._renderGroupHeader) : null}\n        <div className={classNames.groupContent}>{this._renderLinks(groupProps.links, 0 /* nestingLevel */)}</div>\n      </div>\n    );\n  };\n\n  private _renderGroupHeader = (group: IRenderGroupHeaderProps): React.ReactElement<{}> => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { styles, groups, theme, expandButtonAriaLabel } = this.props;\n\n    const { isExpanded } = group;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isGroup: true,\n      isExpanded,\n      groups,\n    });\n\n    // respect deprecated collapseAriaLabel, but default to expandAriaLabel for both states\n    // eslint-disable-next-line deprecation/deprecation\n    const collapseAriaLabel = group.collapseAriaLabel ?? group.expandAriaLabel;\n    const label = (isExpanded ? collapseAriaLabel : group.expandAriaLabel) || expandButtonAriaLabel;\n\n    const { onHeaderClick } = group;\n\n    const onClick = onHeaderClick\n      ? (ev?: React.MouseEvent<HTMLElement, MouseEvent> | undefined) => {\n          onHeaderClick(ev, isExpanded);\n        }\n      : undefined;\n\n    return (\n      <button className={classNames.chevronButton} onClick={onClick} aria-label={label} aria-expanded={isExpanded}>\n        <Icon className={classNames.chevronIcon} iconName=\"ChevronDown\" />\n        {group.name}\n      </button>\n    );\n  };\n\n  private _onGroupHeaderClicked(group: INavLinkGroup, ev?: React.MouseEvent<HTMLElement>): void {\n    if (group.onHeaderClick) {\n      group.onHeaderClick(ev, this._isGroupExpanded(group));\n    }\n\n    if (group.isExpanded === undefined) {\n      this._toggleCollapsed(group);\n    }\n\n    if (ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onLinkExpandClicked(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    const { onLinkExpandClick } = this.props;\n\n    if (onLinkExpandClick) {\n      onLinkExpandClick(ev, link);\n    }\n\n    if (!ev.defaultPrevented) {\n      link.isExpanded = !link.isExpanded;\n      // eslint-disable-next-line react/no-unused-state\n      this.setState({ isLinkExpandStateChanged: true });\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  private _preventBounce(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    if (!link.url && link.forceAnchor) {\n      ev.preventDefault();\n    }\n  }\n\n  private _onNavAnchorLinkClicked(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n\n    if (this.props.onLinkClick) {\n      this.props.onLinkClick(ev, link);\n    }\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({ selectedKey: link.key });\n  }\n\n  private _onNavButtonLinkClicked(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n\n    if (link.onClick) {\n      link.onClick(ev, link);\n    }\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({ selectedKey: link.key });\n  }\n\n  private _isLinkSelected(link: INavLink): boolean {\n    // if caller passes in selectedKey, use it as first choice or\n    // if current state.selectedKey (from addressbar) is match to the link or\n    // check if URL is matching location.href (if link.url exists)\n    if (this.props.selectedKey !== undefined) {\n      return link.key === this.props.selectedKey;\n    } else if (this.state.selectedKey !== undefined) {\n      return link.key === this.state.selectedKey;\n    } else if (typeof getWindow() === 'undefined' || !link.url) {\n      // resolve is not supported for ssr\n      return false;\n    } else {\n      // If selectedKey is undefined in props and state, then check URL\n      _urlResolver = _urlResolver || document.createElement('a');\n\n      _urlResolver.href = link.url || '';\n      const target: string = _urlResolver.href;\n\n      if (location.href === target) {\n        return true;\n      }\n\n      // If selectedKey is not defined in state, then check URL to determine link selected status\n      if (location.protocol + '//' + location.host + location.pathname === target) {\n        return true;\n      }\n\n      if (location.hash) {\n        // Match the hash to the url.\n        if (location.hash === link.url) {\n          return true;\n        }\n\n        // Match a rebased url. (e.g. #foo becomes http://hostname/foo)\n        _urlResolver.href = location.hash.substring(1);\n\n        return _urlResolver.href === target;\n      }\n    }\n\n    return false;\n  }\n\n  private _isGroupExpanded(group: INavLinkGroup): boolean {\n    if (group.isExpanded !== undefined) {\n      return group.isExpanded;\n    }\n    if (group.name && this.state.isGroupCollapsed.hasOwnProperty(group.name)) {\n      return !this.state.isGroupCollapsed[group.name];\n    }\n    if (group.collapseByDefault !== undefined) {\n      return !group.collapseByDefault;\n    }\n    return true;\n  }\n\n  private _toggleCollapsed(group: INavLinkGroup): void {\n    if (group.name) {\n      const newGroupCollapsed = {\n        ...this.state.isGroupCollapsed, // Make a copy in order to not modify state\n        [group.name]: this._isGroupExpanded(group), // sic - presently open will be collapsed after setState\n      };\n      this.setState({ isGroupCollapsed: newGroupCollapsed });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}