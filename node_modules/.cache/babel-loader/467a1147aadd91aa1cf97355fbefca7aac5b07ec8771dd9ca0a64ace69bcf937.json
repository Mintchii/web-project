{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, divProperties, doesElementContainFocus, getDocument, getNativeProps, getPropsWithDefaults, getWindow, modalize } from '../../Utilities';\nimport { useMergedRefs, useAsync, useOnEvent } from '@fluentui/react-hooks';\nimport { useWindow } from '@fluentui/react-window-provider';\nfunction useScrollbarAsync(props, root) {\n  var async = useAsync();\n  var _a = React.useState(false),\n    needsVerticalScrollBarState = _a[0],\n    setNeedsVerticalScrollBar = _a[1];\n  React.useEffect(function () {\n    async.requestAnimationFrame(function () {\n      var _a;\n      // If overflowY is overridden, don't waste time calculating whether the scrollbar is necessary.\n      if (props.style && props.style.overflowY) {\n        return;\n      }\n      var needsVerticalScrollBar = false;\n      if (root && root.current && ((_a = root.current) === null || _a === void 0 ? void 0 : _a.firstElementChild)) {\n        // ClientHeight returns the client height of an element rounded to an\n        // integer. On some browsers at different zoom levels this rounding\n        // can generate different results for the root container and child even\n        // though they are the same height. This causes us to show a scroll bar\n        // when not needed. Ideally we would use BoundingClientRect().height\n        // instead however seems that the API is 90% slower than using ClientHeight.\n        // Therefore instead we will calculate the difference between heights and\n        // allow for a 1px difference to still be considered ok and not show the\n        // scroll bar.\n        var rootHeight = root.current.clientHeight;\n        var firstChildHeight = root.current.firstElementChild.clientHeight;\n        if (rootHeight > 0 && firstChildHeight > rootHeight) {\n          needsVerticalScrollBar = firstChildHeight - rootHeight > 1;\n        }\n      }\n      if (needsVerticalScrollBarState !== needsVerticalScrollBar) {\n        setNeedsVerticalScrollBar(needsVerticalScrollBar);\n      }\n    });\n    return function () {\n      return async.dispose();\n    };\n  });\n  return needsVerticalScrollBarState;\n}\nfunction defaultFocusRestorer(options) {\n  var originalElement = options.originalElement,\n    containsFocus = options.containsFocus;\n  if (originalElement && containsFocus && originalElement !== getWindow()) {\n    // Make sure that the focus method actually exists\n    // In some cases the object might exist but not be a real element.\n    // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n    // This is wrapped in a setTimeout because of a React 16 bug that is resolved in 17.\n    // Once we move to 17, the setTimeout should be removed (ref: https://github.com/facebook/react/issues/17894#issuecomment-656094405)\n    setTimeout(function () {\n      var _a;\n      (_a = originalElement.focus) === null || _a === void 0 ? void 0 : _a.call(originalElement);\n    }, 0);\n  }\n}\nfunction useRestoreFocus(props, root) {\n  var _a = props.onRestoreFocus,\n    onRestoreFocus = _a === void 0 ? defaultFocusRestorer : _a;\n  var originalFocusedElement = React.useRef();\n  var containsFocus = React.useRef(false);\n  React.useEffect(function () {\n    originalFocusedElement.current = getDocument().activeElement;\n    if (doesElementContainFocus(root.current)) {\n      containsFocus.current = true;\n    }\n    return function () {\n      var _a;\n      onRestoreFocus === null || onRestoreFocus === void 0 ? void 0 : onRestoreFocus({\n        originalElement: originalFocusedElement.current,\n        containsFocus: containsFocus.current,\n        documentContainsFocus: ((_a = getDocument()) === null || _a === void 0 ? void 0 : _a.hasFocus()) || false\n      });\n      // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown\n      originalFocusedElement.current = undefined;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n  useOnEvent(root, 'focus', React.useCallback(function () {\n    containsFocus.current = true;\n  }, []), true);\n  useOnEvent(root, 'blur', React.useCallback(function (ev) {\n    /** The popup should update this._containsFocus when:\n     * relatedTarget exists AND\n     * the relatedTarget is not contained within the popup.\n     * If the relatedTarget is within the popup, that means the popup still has focus\n     * and focused moved from one element to another within the popup.\n     * If relatedTarget is undefined or null that usually means that a\n     * keyboard event occurred and focus didn't change\n     */\n    if (root.current && ev.relatedTarget && !root.current.contains(ev.relatedTarget)) {\n      containsFocus.current = false;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []), true);\n}\nfunction useHideSiblingNodes(props, root) {\n  // eslint-disable-next-line deprecation/deprecation\n  var shouldHideSiblings = String(props['aria-modal']).toLowerCase() === 'true' && props.enableAriaHiddenSiblings;\n  React.useEffect(function () {\n    if (!(shouldHideSiblings && root.current)) {\n      return;\n    }\n    var unmodalize = modalize(root.current);\n    return unmodalize;\n  }, [root, shouldHideSiblings]);\n}\n/**\n * This adds accessibility to Dialog and Panel controls\n */\nexport var Popup = React.forwardRef(function (propsWithoutDefaults, forwardedRef) {\n  var props = getPropsWithDefaults({\n    shouldRestoreFocus: true,\n    enableAriaHiddenSiblings: true\n  }, propsWithoutDefaults);\n  var root = React.useRef();\n  var mergedRootRef = useMergedRefs(root, forwardedRef);\n  useHideSiblingNodes(props, root);\n  useRestoreFocus(props, root);\n  var role = props.role,\n    className = props.className,\n    ariaLabel = props.ariaLabel,\n    ariaLabelledBy = props.ariaLabelledBy,\n    ariaDescribedBy = props.ariaDescribedBy,\n    style = props.style,\n    children = props.children,\n    onDismiss = props.onDismiss;\n  var needsVerticalScrollBar = useScrollbarAsync(props, root);\n  var onKeyDown = React.useCallback(function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.escape:\n        if (onDismiss) {\n          onDismiss(ev);\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n        break;\n    }\n  }, [onDismiss]);\n  var win = useWindow();\n  useOnEvent(win, 'keydown', onKeyDown);\n  return React.createElement(\"div\", __assign({\n    ref: mergedRootRef\n  }, getNativeProps(props, divProperties), {\n    className: className,\n    role: role,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    onKeyDown: onKeyDown,\n    style: __assign({\n      overflowY: needsVerticalScrollBar ? 'scroll' : undefined,\n      outline: 'none'\n    }, style)\n  }), children);\n});\nPopup.displayName = 'Popup';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SACEC,QAAQ,EACRC,aAAa,EACbC,uBAAuB,EACvBC,WAAW,EACXC,cAAc,EACdC,oBAAoB,EACpBC,SAAS,EACTC,QAAQ,QACH,iBAAiB;AACxB,SAASC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,uBAAuB;AAC3E,SAASC,SAAS,QAAQ,iCAAiC;AAG3D,SAASC,iBAAiB,CAACC,KAAkB,EAAEC,IAAiD;EAC9F,IAAMC,KAAK,GAAGN,QAAQ,EAAE;EAClB,SAA2DV,KAAK,CAACiB,QAAQ,CAAC,KAAK,CAAC;IAA/EC,2BAA2B;IAAEC,yBAAyB,QAAyB;EACtFnB,KAAK,CAACoB,SAAS,CAAC;IACdJ,KAAK,CAACK,qBAAqB,CAAC;;MAC1B;MACA,IAAIP,KAAK,CAACQ,KAAK,IAAIR,KAAK,CAACQ,KAAK,CAACC,SAAS,EAAE;QACxC;;MAGF,IAAIC,sBAAsB,GAAG,KAAK;MAClC,IAAIT,IAAI,IAAIA,IAAI,CAACU,OAAO,KAAI,UAAI,CAACA,OAAO,0CAAEC,iBAAiB,GAAE;QAC3D;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,IAAMC,UAAU,GAAGZ,IAAI,CAACU,OAAO,CAACG,YAAY;QAC5C,IAAMC,gBAAgB,GAAGd,IAAI,CAACU,OAAO,CAACC,iBAAiB,CAACE,YAAY;QACpE,IAAID,UAAU,GAAG,CAAC,IAAIE,gBAAgB,GAAGF,UAAU,EAAE;UACnDH,sBAAsB,GAAGK,gBAAgB,GAAGF,UAAU,GAAG,CAAC;;;MAG9D,IAAIT,2BAA2B,KAAKM,sBAAsB,EAAE;QAC1DL,yBAAyB,CAACK,sBAAsB,CAAC;;IAErD,CAAC,CAAC;IAEF,OAAO;MAAM,YAAK,CAACM,OAAO,EAAE;IAAf,CAAe;EAC9B,CAAC,CAAC;EAEF,OAAOZ,2BAA2B;AACpC;AAEA,SAASa,oBAAoB,CAACC,OAAiC;EACrD,mBAAe,GAAoBA,OAAO,gBAA3B;IAAEC,aAAa,GAAKD,OAAO,cAAZ;EAEtC,IAAIE,eAAe,IAAID,aAAa,IAAIC,eAAe,KAAK3B,SAAS,EAAE,EAAE;IACvE;IACA;IACA;IACA;IACA;IACA4B,UAAU,CAAC;;MACT,qBAAe,CAACC,KAAK,+CAArBF,eAAe,CAAU;IAC3B,CAAC,EAAE,CAAC,CAAC;;AAET;AAEA,SAASG,eAAe,CAACvB,KAAkB,EAAEC,IAAiD;EACpF,SAA0CD,KAAK,eAAV;IAArCwB,cAAc,mBAAGP,oBAAoB;EAC7C,IAAMQ,sBAAsB,GAAGvC,KAAK,CAACwC,MAAM,EAAe;EAC1D,IAAMP,aAAa,GAAGjC,KAAK,CAACwC,MAAM,CAAC,KAAK,CAAC;EAEzCxC,KAAK,CAACoB,SAAS,CAAC;IACdmB,sBAAsB,CAACd,OAAO,GAAGrB,WAAW,EAAG,CAACqC,aAA4B;IAE5E,IAAItC,uBAAuB,CAACY,IAAI,CAACU,OAAQ,CAAC,EAAE;MAC1CQ,aAAa,CAACR,OAAO,GAAG,IAAI;;IAG9B,OAAO;;MACLa,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAG;QACfJ,eAAe,EAAEK,sBAAsB,CAACd,OAAO;QAC/CQ,aAAa,EAAEA,aAAa,CAACR,OAAO;QACpCiB,qBAAqB,EAAE,kBAAW,EAAE,0CAAEC,QAAQ,EAAE,KAAI;OACrD,CAAC;MAEF;MACAJ,sBAAsB,CAACd,OAAO,GAAGmB,SAAS;IAC5C,CAAC;IAED;EACF,CAAC,EAAE,EAAE,CAAC;EAENjC,UAAU,CACRI,IAAI,EACJ,OAAO,EACPf,KAAK,CAAC6C,WAAW,CAAC;IAChBZ,aAAa,CAACR,OAAO,GAAG,IAAI;EAC9B,CAAC,EAAE,EAAE,CAAC,EACN,IAAI,CACL;EAEDd,UAAU,CACRI,IAAI,EACJ,MAAM,EACNf,KAAK,CAAC6C,WAAW,CAAC,UAACC,EAAc;IAC/B;;;;;;;;IAQA,IAAI/B,IAAI,CAACU,OAAO,IAAIqB,EAAE,CAACC,aAAa,IAAI,CAAChC,IAAI,CAACU,OAAO,CAACuB,QAAQ,CAACF,EAAE,CAACC,aAA4B,CAAC,EAAE;MAC/Fd,aAAa,CAACR,OAAO,GAAG,KAAK;;IAE/B;EACF,CAAC,EAAE,EAAE,CAAC,EACN,IAAI,CACL;AACH;AAEA,SAASwB,mBAAmB,CAACnC,KAAkB,EAAEC,IAAiD;EAChG;EACA,IAAMmC,kBAAkB,GAAGC,MAAM,CAACrC,KAAK,CAAC,YAAY,CAAC,CAAC,CAACsC,WAAW,EAAE,KAAK,MAAM,IAAItC,KAAK,CAACuC,wBAAwB;EAEjHrD,KAAK,CAACoB,SAAS,CAAC;IACd,IAAI,EAAE8B,kBAAkB,IAAInC,IAAI,CAACU,OAAO,CAAC,EAAE;MACzC;;IAGF,IAAM6B,UAAU,GAAG9C,QAAQ,CAACO,IAAI,CAACU,OAAO,CAAC;IACzC,OAAO6B,UAAU;EACnB,CAAC,EAAE,CAACvC,IAAI,EAAEmC,kBAAkB,CAAC,CAAC;AAChC;AAEA;;;AAGA,OAAO,IAAMK,KAAK,GAAyCvD,KAAK,CAACwD,UAAU,CACzE,UAACC,oBAAoB,EAAEC,YAAY;EACjC,IAAM5C,KAAK,GAAGR,oBAAoB,CAChC;IAAEqD,kBAAkB,EAAE,IAAI;IAAEN,wBAAwB,EAAE;EAAI,CAAE,EAC5DI,oBAAoB,CACrB;EAED,IAAM1C,IAAI,GAAGf,KAAK,CAACwC,MAAM,EAAkB;EAC3C,IAAMoB,aAAa,GAAGnD,aAAa,CAACM,IAAI,EAAE2C,YAAY,CAA8B;EAEpFT,mBAAmB,CAACnC,KAAK,EAAEC,IAAI,CAAC;EAChCsB,eAAe,CAACvB,KAAK,EAAEC,IAAI,CAAC;EAEpB,QAAI,GAAwFD,KAAK,KAA7F;IAAE+C,SAAS,GAA6E/C,KAAK,UAAlF;IAAEgD,SAAS,GAAkEhD,KAAK,UAAvE;IAAEiD,cAAc,GAAkDjD,KAAK,eAAvD;IAAEkD,eAAe,GAAiClD,KAAK,gBAAtC;IAAEQ,KAAK,GAA0BR,KAAK,MAA/B;IAAEmD,QAAQ,GAAgBnD,KAAK,SAArB;IAAEoD,SAAS,GAAKpD,KAAK,UAAV;EAC/F,IAAMU,sBAAsB,GAAGX,iBAAiB,CAACC,KAAK,EAAEC,IAAI,CAAC;EAE7D,IAAMoD,SAAS,GAAGnE,KAAK,CAAC6C,WAAW,CACjC,UAACC,EAAoD;IACnD;IACA,QAAQA,EAAE,CAACsB,KAAK;MACd,KAAKnE,QAAQ,CAACoE,MAAM;QAClB,IAAIH,SAAS,EAAE;UACbA,SAAS,CAACpB,EAAE,CAAC;UAEbA,EAAE,CAACwB,cAAc,EAAE;UACnBxB,EAAE,CAACyB,eAAe,EAAE;;QAGtB;IAAM;EAEZ,CAAC,EACD,CAACL,SAAS,CAAC,CACZ;EAED,IAAMM,GAAG,GAAG5D,SAAS,EAAE;EACvBD,UAAU,CAAC6D,GAAG,EAAE,SAAS,EAAEL,SAAgC,CAAC;EAE5D,OACEnE;IACEyE,GAAG,EAAEb;EAAa,GACdvD,cAAc,CAACS,KAAK,EAAEZ,aAAa,CAAC;IACxC2D,SAAS,EAAEA,SAAS;IACpBa,IAAI,EAAEA,IAAI;IAAA,cACEZ,SAAS;IAAA,mBACJC,cAAc;IAAA,oBACbC,eAAe;IACjCG,SAAS,EAAEA,SAAS;IACpB7C,KAAK;MAAIC,SAAS,EAAEC,sBAAsB,GAAG,QAAQ,GAAGoB,SAAS;MAAE+B,OAAO,EAAE;IAAM,GAAKrD,KAAK;EAAA,IAE3F2C,QAAQ,CACL;AAEV,CAAC,CACF;AACDV,KAAK,CAACqB,WAAW,GAAG,OAAO","names":["React","KeyCodes","divProperties","doesElementContainFocus","getDocument","getNativeProps","getPropsWithDefaults","getWindow","modalize","useMergedRefs","useAsync","useOnEvent","useWindow","useScrollbarAsync","props","root","async","useState","needsVerticalScrollBarState","setNeedsVerticalScrollBar","useEffect","requestAnimationFrame","style","overflowY","needsVerticalScrollBar","current","firstElementChild","rootHeight","clientHeight","firstChildHeight","dispose","defaultFocusRestorer","options","containsFocus","originalElement","setTimeout","focus","useRestoreFocus","onRestoreFocus","originalFocusedElement","useRef","activeElement","documentContainsFocus","hasFocus","undefined","useCallback","ev","relatedTarget","contains","useHideSiblingNodes","shouldHideSiblings","String","toLowerCase","enableAriaHiddenSiblings","unmodalize","Popup","forwardRef","propsWithoutDefaults","forwardedRef","shouldRestoreFocus","mergedRootRef","className","ariaLabel","ariaLabelledBy","ariaDescribedBy","children","onDismiss","onKeyDown","which","escape","preventDefault","stopPropagation","win","ref","role","outline","displayName"],"sources":["C:\\Users\\hpryz\\Documents\\_Programming\\web-project\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Popup\\Popup.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  KeyCodes,\n  divProperties,\n  doesElementContainFocus,\n  getDocument,\n  getNativeProps,\n  getPropsWithDefaults,\n  getWindow,\n  modalize,\n} from '../../Utilities';\nimport { useMergedRefs, useAsync, useOnEvent } from '@fluentui/react-hooks';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport type { IPopupProps, IPopupRestoreFocusParams } from './Popup.types';\n\nfunction useScrollbarAsync(props: IPopupProps, root: React.RefObject<HTMLDivElement | undefined>) {\n  const async = useAsync();\n  const [needsVerticalScrollBarState, setNeedsVerticalScrollBar] = React.useState(false);\n  React.useEffect(() => {\n    async.requestAnimationFrame(() => {\n      // If overflowY is overridden, don't waste time calculating whether the scrollbar is necessary.\n      if (props.style && props.style.overflowY) {\n        return;\n      }\n\n      let needsVerticalScrollBar = false;\n      if (root && root.current && root.current?.firstElementChild) {\n        // ClientHeight returns the client height of an element rounded to an\n        // integer. On some browsers at different zoom levels this rounding\n        // can generate different results for the root container and child even\n        // though they are the same height. This causes us to show a scroll bar\n        // when not needed. Ideally we would use BoundingClientRect().height\n        // instead however seems that the API is 90% slower than using ClientHeight.\n        // Therefore instead we will calculate the difference between heights and\n        // allow for a 1px difference to still be considered ok and not show the\n        // scroll bar.\n        const rootHeight = root.current.clientHeight;\n        const firstChildHeight = root.current.firstElementChild.clientHeight;\n        if (rootHeight > 0 && firstChildHeight > rootHeight) {\n          needsVerticalScrollBar = firstChildHeight - rootHeight > 1;\n        }\n      }\n      if (needsVerticalScrollBarState !== needsVerticalScrollBar) {\n        setNeedsVerticalScrollBar(needsVerticalScrollBar);\n      }\n    });\n\n    return () => async.dispose();\n  });\n\n  return needsVerticalScrollBarState;\n}\n\nfunction defaultFocusRestorer(options: IPopupRestoreFocusParams) {\n  const { originalElement, containsFocus } = options;\n\n  if (originalElement && containsFocus && originalElement !== getWindow()) {\n    // Make sure that the focus method actually exists\n    // In some cases the object might exist but not be a real element.\n    // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n    // This is wrapped in a setTimeout because of a React 16 bug that is resolved in 17.\n    // Once we move to 17, the setTimeout should be removed (ref: https://github.com/facebook/react/issues/17894#issuecomment-656094405)\n    setTimeout(() => {\n      originalElement.focus?.();\n    }, 0);\n  }\n}\n\nfunction useRestoreFocus(props: IPopupProps, root: React.RefObject<HTMLDivElement | undefined>) {\n  const { onRestoreFocus = defaultFocusRestorer } = props;\n  const originalFocusedElement = React.useRef<HTMLElement>();\n  const containsFocus = React.useRef(false);\n\n  React.useEffect(() => {\n    originalFocusedElement.current = getDocument()!.activeElement as HTMLElement;\n\n    if (doesElementContainFocus(root.current!)) {\n      containsFocus.current = true;\n    }\n\n    return () => {\n      onRestoreFocus?.({\n        originalElement: originalFocusedElement.current,\n        containsFocus: containsFocus.current,\n        documentContainsFocus: getDocument()?.hasFocus() || false,\n      });\n\n      // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown\n      originalFocusedElement.current = undefined;\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useOnEvent(\n    root,\n    'focus',\n    React.useCallback((): void => {\n      containsFocus.current = true;\n    }, []),\n    true,\n  );\n\n  useOnEvent(\n    root,\n    'blur',\n    React.useCallback((ev: FocusEvent): void => {\n      /** The popup should update this._containsFocus when:\n       * relatedTarget exists AND\n       * the relatedTarget is not contained within the popup.\n       * If the relatedTarget is within the popup, that means the popup still has focus\n       * and focused moved from one element to another within the popup.\n       * If relatedTarget is undefined or null that usually means that a\n       * keyboard event occurred and focus didn't change\n       */\n      if (root.current && ev.relatedTarget && !root.current.contains(ev.relatedTarget as HTMLElement)) {\n        containsFocus.current = false;\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n    }, []),\n    true,\n  );\n}\n\nfunction useHideSiblingNodes(props: IPopupProps, root: React.RefObject<HTMLDivElement | undefined>) {\n  // eslint-disable-next-line deprecation/deprecation\n  const shouldHideSiblings = String(props['aria-modal']).toLowerCase() === 'true' && props.enableAriaHiddenSiblings;\n\n  React.useEffect(() => {\n    if (!(shouldHideSiblings && root.current)) {\n      return;\n    }\n\n    const unmodalize = modalize(root.current);\n    return unmodalize;\n  }, [root, shouldHideSiblings]);\n}\n\n/**\n * This adds accessibility to Dialog and Panel controls\n */\nexport const Popup: React.FunctionComponent<IPopupProps> = React.forwardRef<HTMLDivElement, IPopupProps>(\n  (propsWithoutDefaults, forwardedRef) => {\n    const props = getPropsWithDefaults(\n      { shouldRestoreFocus: true, enableAriaHiddenSiblings: true },\n      propsWithoutDefaults,\n    );\n\n    const root = React.useRef<HTMLDivElement>();\n    const mergedRootRef = useMergedRefs(root, forwardedRef) as React.Ref<HTMLDivElement>;\n\n    useHideSiblingNodes(props, root);\n    useRestoreFocus(props, root);\n\n    const { role, className, ariaLabel, ariaLabelledBy, ariaDescribedBy, style, children, onDismiss } = props;\n    const needsVerticalScrollBar = useScrollbarAsync(props, root);\n\n    const onKeyDown = React.useCallback(\n      (ev: React.KeyboardEvent<HTMLElement> | KeyboardEvent): void => {\n        // eslint-disable-next-line deprecation/deprecation\n        switch (ev.which) {\n          case KeyCodes.escape:\n            if (onDismiss) {\n              onDismiss(ev);\n\n              ev.preventDefault();\n              ev.stopPropagation();\n            }\n\n            break;\n        }\n      },\n      [onDismiss],\n    );\n\n    const win = useWindow();\n    useOnEvent(win, 'keydown', onKeyDown as (ev: Event) => void);\n\n    return (\n      <div\n        ref={mergedRootRef}\n        {...getNativeProps(props, divProperties)}\n        className={className}\n        role={role}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedBy}\n        onKeyDown={onKeyDown}\n        style={{ overflowY: needsVerticalScrollBar ? 'scroll' : undefined, outline: 'none', ...style }}\n      >\n        {children}\n      </div>\n    );\n  },\n);\nPopup.displayName = 'Popup';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}