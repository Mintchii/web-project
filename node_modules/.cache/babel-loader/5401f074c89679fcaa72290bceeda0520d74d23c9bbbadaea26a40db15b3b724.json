{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { anchorProperties, assign, buttonProperties, createMergedRef, css, getId, getNativeProps, initializeComponentRef, memoizeFunction, mergeAriaAttributeValues, nullRender, portalContainsElement, setFocusVisibility, warnConditionallyRequiredProps, warnDeprecations, Async, EventGroup, FocusRects, FocusRectsContext, KeyCodes } from '../../Utilities';\nimport { Icon, FontIcon, ImageIcon } from '../../Icon';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ContextualMenu } from '../../ContextualMenu';\nimport { getBaseButtonClassNames } from './BaseButton.classNames';\nimport { getSplitButtonClassNames as getBaseSplitButtonClassNames } from './SplitButton/SplitButton.classNames';\nimport { KeytipData } from '../../KeytipData';\nimport { composeComponentAs } from '../../Utilities';\nvar TouchIdleDelay = 500; /* ms */\nvar COMPONENT_NAME = 'BaseButton';\n/**\n * {@docCategory Button}\n */\nvar BaseButton = /** @class */function (_super) {\n  __extends(BaseButton, _super);\n  function BaseButton(props) {\n    var _this = _super.call(this, props) || this;\n    _this._buttonElement = React.createRef();\n    _this._splitButtonContainer = React.createRef();\n    _this._mergedRef = createMergedRef();\n    _this._renderedVisibleMenu = false;\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n    _this._onRenderIcon = function (buttonProps, defaultRender) {\n      var iconProps = _this.props.iconProps;\n      if (iconProps && (iconProps.iconName !== undefined || iconProps.imageProps)) {\n        var className = iconProps.className,\n          imageProps = iconProps.imageProps,\n          rest = __rest(iconProps, [\"className\", \"imageProps\"]);\n        // If the styles prop is specified as part of iconProps, fall back to regular Icon as FontIcon and ImageIcon\n        // do not have this prop.\n        if (iconProps.styles) {\n          return React.createElement(Icon, __assign({\n            className: css(_this._classNames.icon, className),\n            imageProps: imageProps\n          }, rest));\n        }\n        if (iconProps.iconName) {\n          return React.createElement(FontIcon, __assign({\n            className: css(_this._classNames.icon, className)\n          }, rest));\n        }\n        if (imageProps) {\n          return React.createElement(ImageIcon, __assign({\n            className: css(_this._classNames.icon, className),\n            imageProps: imageProps\n          }, rest));\n        }\n      }\n      return null;\n    };\n    _this._onRenderTextContents = function () {\n      var _a = _this.props,\n        text = _a.text,\n        children = _a.children,\n        // eslint-disable-next-line deprecation/deprecation\n        _b = _a.secondaryText,\n        // eslint-disable-next-line deprecation/deprecation\n        secondaryText = _b === void 0 ? _this.props.description : _b,\n        _c = _a.onRenderText,\n        onRenderText = _c === void 0 ? _this._onRenderText : _c,\n        _d = _a.onRenderDescription,\n        onRenderDescription = _d === void 0 ? _this._onRenderDescription : _d;\n      if (text || typeof children === 'string' || secondaryText) {\n        return React.createElement(\"span\", {\n          className: _this._classNames.textContainer\n        }, onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription));\n      }\n      return [onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription)];\n    };\n    _this._onRenderText = function () {\n      var text = _this.props.text;\n      var children = _this.props.children;\n      // For backwards compat, we should continue to take in the text content from children.\n      if (text === undefined && typeof children === 'string') {\n        text = children;\n      }\n      if (_this._hasText()) {\n        return React.createElement(\"span\", {\n          key: _this._labelId,\n          className: _this._classNames.label,\n          id: _this._labelId\n        }, text);\n      }\n      return null;\n    };\n    _this._onRenderChildren = function () {\n      var children = _this.props.children;\n      // If children is just a string, either it or the text will be rendered via onRenderLabel\n      // If children is another component, it will be rendered after text\n      if (typeof children === 'string') {\n        return null;\n      }\n      return children;\n    };\n    _this._onRenderDescription = function (props) {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = props.secondaryText,\n        secondaryText = _a === void 0 ? _this.props.description : _a;\n      // ms-Button-description is only shown when the button type is compound.\n      // In other cases it will not be displayed.\n      return secondaryText ? React.createElement(\"span\", {\n        key: _this._descriptionId,\n        className: _this._classNames.description,\n        id: _this._descriptionId\n      }, secondaryText) : null;\n    };\n    _this._onRenderAriaDescription = function () {\n      var ariaDescription = _this.props.ariaDescription;\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\n      // otherwise it will be assigned to descriptionSpan.\n      return ariaDescription ? React.createElement(\"span\", {\n        className: _this._classNames.screenReaderText,\n        id: _this._ariaDescriptionId\n      }, ariaDescription) : null;\n    };\n    _this._onRenderMenuIcon = function (props) {\n      var menuIconProps = _this.props.menuIconProps;\n      return React.createElement(FontIcon, __assign({\n        iconName: \"ChevronDown\"\n      }, menuIconProps, {\n        className: _this._classNames.menuIcon\n      }));\n    };\n    _this._onRenderMenu = function (menuProps) {\n      var MenuType = _this.props.menuAs ? composeComponentAs(_this.props.menuAs, ContextualMenu) : ContextualMenu;\n      return React.createElement(MenuType, __assign({}, menuProps));\n    };\n    _this._onDismissMenu = function (ev) {\n      var menuProps = _this.props.menuProps;\n      if (menuProps && menuProps.onDismiss) {\n        menuProps.onDismiss(ev);\n      }\n      if (!ev || !ev.defaultPrevented) {\n        _this._dismissMenu();\n      }\n    };\n    _this._dismissMenu = function () {\n      _this._menuShouldFocusOnMount = undefined;\n      _this._menuShouldFocusOnContainer = undefined;\n      _this.setState({\n        menuHidden: true\n      });\n    };\n    _this._openMenu = function (shouldFocusOnContainer, shouldFocusOnMount) {\n      if (shouldFocusOnMount === void 0) {\n        shouldFocusOnMount = true;\n      }\n      if (_this.props.menuProps) {\n        _this._menuShouldFocusOnContainer = shouldFocusOnContainer;\n        _this._menuShouldFocusOnMount = shouldFocusOnMount;\n        _this._renderedVisibleMenu = true;\n        _this.setState({\n          menuHidden: false\n        });\n      }\n    };\n    _this._onToggleMenu = function (shouldFocusOnContainer) {\n      var shouldFocusOnMount = true;\n      if (_this.props.menuProps && _this.props.menuProps.shouldFocusOnMount === false) {\n        shouldFocusOnMount = false;\n      }\n      _this.state.menuHidden ? _this._openMenu(shouldFocusOnContainer, shouldFocusOnMount) : _this._dismissMenu();\n    };\n    _this._onSplitContainerFocusCapture = function (ev) {\n      var container = _this._splitButtonContainer.current;\n      // If the target is coming from the portal we do not need to set focus on the container.\n      if (!container || ev.target && portalContainsElement(ev.target, container)) {\n        return;\n      }\n      // We should never be able to focus the individual buttons in a split button. Focus\n      // should always remain on the container.\n      container.focus();\n    };\n    _this._onSplitButtonPrimaryClick = function (ev) {\n      if (!_this.state.menuHidden) {\n        _this._dismissMenu();\n      }\n      if (!_this._processingTouch && _this.props.onClick) {\n        _this.props.onClick(ev);\n      } else if (_this._processingTouch) {\n        _this._onMenuClick(ev);\n      }\n    };\n    _this._onKeyDown = function (ev) {\n      // explicity cancelling event so click won't fire after this\n      // eslint-disable-next-line deprecation/deprecation\n      if (_this.props.disabled && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      } else if (!_this.props.disabled) {\n        if (_this.props.menuProps) {\n          _this._onMenuKeyDown(ev);\n        } else if (_this.props.onKeyDown !== undefined) {\n          _this.props.onKeyDown(ev); // not cancelling event because it's not disabled\n        }\n      }\n    };\n\n    _this._onKeyUp = function (ev) {\n      if (!_this.props.disabled && _this.props.onKeyUp !== undefined) {\n        _this.props.onKeyUp(ev); // not cancelling event because it's not disabled\n      }\n    };\n\n    _this._onKeyPress = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!_this.props.disabled && _this.props.onKeyPress !== undefined) {\n        // eslint-disable-next-line deprecation/deprecation\n        _this.props.onKeyPress(ev); // not cancelling event because it's not disabled\n      }\n    };\n\n    _this._onMouseUp = function (ev) {\n      if (!_this.props.disabled && _this.props.onMouseUp !== undefined) {\n        _this.props.onMouseUp(ev); // not cancelling event because it's not disabled\n      }\n    };\n\n    _this._onMouseDown = function (ev) {\n      if (!_this.props.disabled && _this.props.onMouseDown !== undefined) {\n        _this.props.onMouseDown(ev); // not cancelling event because it's not disabled\n      }\n    };\n\n    _this._onClick = function (ev) {\n      if (!_this.props.disabled) {\n        if (_this.props.menuProps) {\n          _this._onMenuClick(ev);\n        } else if (_this.props.onClick !== undefined) {\n          _this.props.onClick(ev); // not cancelling event because it's not disabled\n        }\n      }\n    };\n\n    _this._onSplitButtonContainerKeyDown = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n        if (_this._buttonElement.current) {\n          _this._buttonElement.current.click();\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      } else {\n        _this._onMenuKeyDown(ev);\n      }\n    };\n    _this._onMenuKeyDown = function (ev) {\n      var _a;\n      if (_this.props.disabled) {\n        return;\n      }\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(ev);\n      }\n      // eslint-disable-next-line deprecation/deprecation\n      var isUp = ev.which === KeyCodes.up;\n      // eslint-disable-next-line deprecation/deprecation\n      var isDown = ev.which === KeyCodes.down;\n      if (!ev.defaultPrevented && _this._isValidMenuOpenKey(ev)) {\n        var onMenuClick = _this.props.onMenuClick;\n        if (onMenuClick) {\n          onMenuClick(ev, _this.props);\n        }\n        _this._onToggleMenu(false);\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n        // We manually set the focus visibility to true if opening via Enter or Space to account for the scenario where\n        // a user clicks on the button, closes the menu and then opens it via keyboard. In this scenario our default logic\n        // for setting focus visibility is not triggered since there is no keyboard navigation present beforehand.\n        setFocusVisibility(true, ev.target, (_a = _this.context) === null || _a === void 0 ? void 0 : _a.registeredProviders);\n      }\n      if (!(ev.altKey || ev.metaKey) && (isUp || isDown)) {\n        // Suppose a menu, with shouldFocusOnMount: false, is open, and user wants to keyboard to the menu items\n        // We need to re-render the menu with shouldFocusOnMount as true.\n        if (!_this.state.menuHidden && _this.props.menuProps) {\n          var currentShouldFocusOnMount = _this._menuShouldFocusOnMount !== undefined ? _this._menuShouldFocusOnMount : _this.props.menuProps.shouldFocusOnMount;\n          if (!currentShouldFocusOnMount) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            _this._menuShouldFocusOnMount = true;\n            _this.forceUpdate();\n          }\n        }\n      }\n    };\n    _this._onTouchStart = function () {\n      if (_this._isSplitButton && _this._splitButtonContainer.current && !('onpointerdown' in _this._splitButtonContainer.current)) {\n        _this._handleTouchAndPointerEvent();\n      }\n    };\n    _this._onMenuClick = function (ev) {\n      var _a = _this.props,\n        onMenuClick = _a.onMenuClick,\n        menuProps = _a.menuProps;\n      if (onMenuClick) {\n        onMenuClick(ev, _this.props);\n      }\n      // focus on the container by default when the menu is opened with a click event\n      // this differentiates from a keyboard interaction triggering the click event\n      var shouldFocusOnContainer = typeof (menuProps === null || menuProps === void 0 ? void 0 : menuProps.shouldFocusOnContainer) === 'boolean' ? menuProps.shouldFocusOnContainer : ev.nativeEvent.pointerType === 'mouse';\n      if (!ev.defaultPrevented) {\n        _this._onToggleMenu(shouldFocusOnContainer);\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    };\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    warnConditionallyRequiredProps(COMPONENT_NAME, props, ['menuProps', 'onClick'], 'split', _this.props.split);\n    warnDeprecations(COMPONENT_NAME, props, {\n      rootProps: undefined,\n      description: 'secondaryText',\n      toggled: 'checked'\n    });\n    _this._labelId = getId();\n    _this._descriptionId = getId();\n    _this._ariaDescriptionId = getId();\n    _this.state = {\n      menuHidden: true\n    };\n    return _this;\n  }\n  Object.defineProperty(BaseButton.prototype, \"_isSplitButton\", {\n    get: function () {\n      return !!this.props.menuProps && !!this.props.onClick && this.props.split === true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BaseButton.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      ariaDescription = _b.ariaDescription,\n      ariaLabel = _b.ariaLabel,\n      ariaHidden = _b.ariaHidden,\n      className = _b.className,\n      disabled = _b.disabled,\n      allowDisabledFocus = _b.allowDisabledFocus,\n      primaryDisabled = _b.primaryDisabled,\n      // eslint-disable-next-line deprecation/deprecation\n      _c = _b.secondaryText,\n      // eslint-disable-next-line deprecation/deprecation\n      secondaryText = _c === void 0 ? this.props.description : _c,\n      href = _b.href,\n      iconProps = _b.iconProps,\n      menuIconProps = _b.menuIconProps,\n      styles = _b.styles,\n      checked = _b.checked,\n      variantClassName = _b.variantClassName,\n      theme = _b.theme,\n      toggle = _b.toggle,\n      getClassNames = _b.getClassNames,\n      role = _b.role;\n    var menuHidden = this.state.menuHidden;\n    // Button is disabled if the whole button (in case of splitButton is disabled) or if the primary action is disabled\n    var isPrimaryButtonDisabled = disabled || primaryDisabled;\n    this._classNames = getClassNames ? getClassNames(theme, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, checked, !menuHidden, !!this.props.menuProps, this.props.split, !!allowDisabledFocus) : getBaseButtonClassNames(theme, styles, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, !!this.props.menuProps, checked, !menuHidden, this.props.split);\n    var _d = this,\n      _ariaDescriptionId = _d._ariaDescriptionId,\n      _labelId = _d._labelId,\n      _descriptionId = _d._descriptionId;\n    // Anchor tag cannot be disabled hence in disabled state rendering\n    // anchor button as normal button\n    var renderAsAnchor = !isPrimaryButtonDisabled && !!href;\n    var tag = renderAsAnchor ? 'a' : 'button';\n    var nativeProps = getNativeProps(\n    // eslint-disable-next-line deprecation/deprecation\n    assign(renderAsAnchor ? {} : {\n      type: 'button'\n    }, this.props.rootProps, this.props), renderAsAnchor ? anchorProperties : buttonProperties, ['disabled' // let disabled buttons be focused and styled as disabled.\n    ]);\n    // Check for ariaLabel passed in via Button props, and fall back to aria-label passed in via native props\n    var resolvedAriaLabel = ariaLabel || nativeProps['aria-label'];\n    // Check for ariaDescription, secondaryText or aria-describedby in the native props to determine source of\n    // aria-describedby. Otherwise default to undefined so property does not appear in output.\n    var ariaDescribedBy = undefined;\n    if (ariaDescription) {\n      ariaDescribedBy = _ariaDescriptionId;\n    } else if (secondaryText && this.props.onRenderDescription !== nullRender) {\n      // for buttons like CompoundButton with a valid onRenderDescription, we need to set an ariaDescribedBy\n      // for buttons that do not render anything (via nullRender), we should not set an ariaDescribedBy\n      ariaDescribedBy = _descriptionId;\n    } else if (nativeProps['aria-describedby']) {\n      ariaDescribedBy = nativeProps['aria-describedby'];\n    }\n    // If an explicit aria-labelledby is given, use that and we're done.\n    // If any kind of description is given (which will end up as an aria-describedby attribute)\n    // and no ariaLabel is specified, set the labelledby element.\n    // Otherwise, the button is labeled implicitly by the descendent text on the button (if it exists).\n    var ariaLabelledBy = undefined;\n    if (nativeProps['aria-labelledby']) {\n      ariaLabelledBy = nativeProps['aria-labelledby'];\n    } else if (ariaDescribedBy && !resolvedAriaLabel) {\n      ariaLabelledBy = this._hasText() ? _labelId : undefined;\n    }\n    var dataIsFocusable = this.props['data-is-focusable'] === false || disabled && !allowDisabledFocus || this._isSplitButton ? false : true;\n    var isCheckboxTypeRole = role === 'menuitemcheckbox' || role === 'checkbox';\n    // if isCheckboxTypeRole, always return a checked value.\n    // Otherwise only return checked value if toggle is set to true.\n    // This is because role=\"checkbox\" always needs to have an aria-checked value\n    // but our checked prop only sets aria-pressed if we mark the button as a toggle=\"true\"\n    var checkedOrPressedValue = isCheckboxTypeRole ? !!checked : toggle === true ? !!checked : undefined;\n    var buttonProps = assign(nativeProps, (_a = {\n      className: this._classNames.root,\n      // eslint-disable-next-line deprecation/deprecation\n      ref: this._mergedRef(this.props.elementRef, this._buttonElement),\n      disabled: isPrimaryButtonDisabled && !allowDisabledFocus,\n      onKeyDown: this._onKeyDown,\n      onKeyPress: this._onKeyPress,\n      onKeyUp: this._onKeyUp,\n      onMouseDown: this._onMouseDown,\n      onMouseUp: this._onMouseUp,\n      onClick: this._onClick,\n      'aria-label': resolvedAriaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedBy,\n      'aria-disabled': isPrimaryButtonDisabled,\n      'data-is-focusable': dataIsFocusable\n    },\n    // aria-pressed attribute should only be present for toggle buttons\n    // aria-checked attribute should only be present for toggle buttons with checkbox type role\n    _a[isCheckboxTypeRole ? 'aria-checked' : 'aria-pressed'] = checkedOrPressedValue, _a));\n    if (ariaHidden) {\n      buttonProps['aria-hidden'] = true;\n    }\n    if (this._isSplitButton) {\n      return this._onRenderSplitButtonContent(tag, buttonProps);\n    } else if (this.props.menuProps) {\n      var _e = this.props.menuProps.id,\n        id = _e === void 0 ? this._labelId + \"-menu\" : _e;\n      assign(buttonProps, {\n        'aria-expanded': !menuHidden,\n        'aria-controls': !menuHidden ? id : null,\n        'aria-haspopup': true\n      });\n    }\n    return this._onRenderContent(tag, buttonProps);\n  };\n  BaseButton.prototype.componentDidMount = function () {\n    // For split buttons, touching anywhere in the button should drop the dropdown, which should contain the\n    // primary action. This gives more hit target space for touch environments. We're setting the onpointerdown here,\n    // because React does not support Pointer events yet.\n    if (this._isSplitButton && this._splitButtonContainer.current) {\n      if ('onpointerdown' in this._splitButtonContainer.current) {\n        this._events.on(this._splitButtonContainer.current, 'pointerdown', this._onPointerDown, true);\n      }\n      if ('onpointerup' in this._splitButtonContainer.current && this.props.onPointerUp) {\n        this._events.on(this._splitButtonContainer.current, 'pointerup', this.props.onPointerUp, true);\n      }\n    }\n  };\n  BaseButton.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // If Button's menu was closed, run onAfterMenuDismiss.\n    if (this.props.onAfterMenuDismiss && !prevState.menuHidden && this.state.menuHidden) {\n      this.props.onAfterMenuDismiss();\n    }\n  };\n  BaseButton.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n    this._events.dispose();\n  };\n  BaseButton.prototype.focus = function () {\n    var _a, _b;\n    if (this._isSplitButton && this._splitButtonContainer.current) {\n      setFocusVisibility(true, undefined, (_a = this.context) === null || _a === void 0 ? void 0 : _a.registeredProviders);\n      this._splitButtonContainer.current.focus();\n    } else if (this._buttonElement.current) {\n      setFocusVisibility(true, undefined, (_b = this.context) === null || _b === void 0 ? void 0 : _b.registeredProviders);\n      this._buttonElement.current.focus();\n    }\n  };\n  BaseButton.prototype.dismissMenu = function () {\n    this._dismissMenu();\n  };\n  BaseButton.prototype.openMenu = function (shouldFocusOnContainer, shouldFocusOnMount) {\n    this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);\n  };\n  BaseButton.prototype._onRenderContent = function (tag, buttonProps) {\n    var _this = this;\n    var props = this.props;\n    var Tag = tag;\n    var menuIconProps = props.menuIconProps,\n      menuProps = props.menuProps,\n      _a = props.onRenderIcon,\n      onRenderIcon = _a === void 0 ? this._onRenderIcon : _a,\n      _b = props.onRenderAriaDescription,\n      onRenderAriaDescription = _b === void 0 ? this._onRenderAriaDescription : _b,\n      _c = props.onRenderChildren,\n      onRenderChildren = _c === void 0 ? this._onRenderChildren : _c,\n      // eslint-disable-next-line deprecation/deprecation\n      _d = props.onRenderMenu,\n      // eslint-disable-next-line deprecation/deprecation\n      onRenderMenu = _d === void 0 ? this._onRenderMenu : _d,\n      _e = props.onRenderMenuIcon,\n      onRenderMenuIcon = _e === void 0 ? this._onRenderMenuIcon : _e,\n      disabled = props.disabled;\n    var keytipProps = props.keytipProps;\n    if (keytipProps && menuProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n    var Button = function (keytipAttributes) {\n      return React.createElement(Tag, __assign({}, buttonProps, keytipAttributes), React.createElement(\"span\", {\n        className: _this._classNames.flexContainer,\n        \"data-automationid\": \"splitbuttonprimary\"\n      }, onRenderIcon(props, _this._onRenderIcon), _this._onRenderTextContents(), onRenderAriaDescription(props, _this._onRenderAriaDescription), onRenderChildren(props, _this._onRenderChildren), !_this._isSplitButton && (menuProps || menuIconProps || _this.props.onRenderMenuIcon) && onRenderMenuIcon(_this.props, _this._onRenderMenuIcon), menuProps && !menuProps.doNotLayer && _this._shouldRenderMenu() && onRenderMenu(_this._getMenuProps(menuProps), _this._onRenderMenu)));\n    };\n    var Content = keytipProps ?\n    // If we're making a split button, we won't put the keytip here\n    React.createElement(KeytipData, {\n      keytipProps: !this._isSplitButton ? keytipProps : undefined,\n      ariaDescribedBy: buttonProps['aria-describedby'],\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return Button(keytipAttributes);\n    }) : Button();\n    if (menuProps && menuProps.doNotLayer) {\n      return React.createElement(React.Fragment, null, Content, this._shouldRenderMenu() && onRenderMenu(this._getMenuProps(menuProps), this._onRenderMenu));\n    }\n    return React.createElement(React.Fragment, null, Content, React.createElement(FocusRects, null));\n  };\n  /**\n   * Method to help determine if the menu's component tree should\n   * be rendered. It takes into account whether the menu is expanded,\n   * whether it is a persisted menu and whether it has been shown to the user.\n   */\n  BaseButton.prototype._shouldRenderMenu = function () {\n    var menuHidden = this.state.menuHidden;\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n      persistMenu = _a.persistMenu,\n      renderPersistedMenuHiddenOnMount = _a.renderPersistedMenuHiddenOnMount;\n    if (!menuHidden) {\n      // Always should render a menu when it is expanded\n      return true;\n    } else if (persistMenu && (this._renderedVisibleMenu || renderPersistedMenuHiddenOnMount)) {\n      // _renderedVisibleMenu ensures that the first rendering of\n      // the menu happens on-screen, as edge's scrollbar calculations are off if done while hidden.\n      return true;\n    }\n    return false;\n  };\n  BaseButton.prototype._hasText = function () {\n    // _onRenderTextContents and _onRenderText do not perform the same checks. Below is parity with what _onRenderText\n    // used to have before the refactor that introduced this function. _onRenderTextContents does not require props.\n    // text to be undefined in order for props.children to be used as a fallback.\n    // Purely a code maintainability/reuse issue, but logged as Issue #4979.\n    return this.props.text !== null && (this.props.text !== undefined || typeof this.props.children === 'string');\n  };\n  BaseButton.prototype._getMenuProps = function (menuProps) {\n    var persistMenu = this.props.persistMenu;\n    var menuHidden = this.state.menuHidden;\n    // the accessible menu label (accessible name) has a relationship to the button.\n    // If the menu props do not specify an explicit value for aria-label or aria-labelledBy,\n    // AND the button has text, we'll set the menu aria-labelledBy to the text element id.\n    if (!menuProps.ariaLabel && !menuProps.labelElementId && this._hasText()) {\n      menuProps = __assign(__assign({}, menuProps), {\n        labelElementId: this._labelId\n      });\n    }\n    return __assign(__assign({\n      id: this._labelId + '-menu',\n      directionalHint: DirectionalHint.bottomLeftEdge\n    }, menuProps), {\n      shouldFocusOnContainer: this._menuShouldFocusOnContainer,\n      shouldFocusOnMount: this._menuShouldFocusOnMount,\n      hidden: persistMenu ? menuHidden : undefined,\n      className: css('ms-BaseButton-menuhost', menuProps.className),\n      target: this._isSplitButton ? this._splitButtonContainer.current : this._buttonElement.current,\n      onDismiss: this._onDismissMenu\n    });\n  };\n  BaseButton.prototype._onRenderSplitButtonContent = function (tag, buttonProps) {\n    var _this = this;\n    var _a = this.props,\n      _b = _a.styles,\n      styles = _b === void 0 ? {} : _b,\n      disabled = _a.disabled,\n      allowDisabledFocus = _a.allowDisabledFocus,\n      checked = _a.checked,\n      getSplitButtonClassNames = _a.getSplitButtonClassNames,\n      primaryDisabled = _a.primaryDisabled,\n      menuProps = _a.menuProps,\n      toggle = _a.toggle,\n      role = _a.role,\n      primaryActionButtonProps = _a.primaryActionButtonProps;\n    var keytipProps = this.props.keytipProps;\n    var menuHidden = this.state.menuHidden;\n    var classNames = getSplitButtonClassNames ? getSplitButtonClassNames(!!disabled, !menuHidden, !!checked, !!allowDisabledFocus) : styles && getBaseSplitButtonClassNames(styles, !!disabled, !menuHidden, !!checked, !!primaryDisabled);\n    assign(buttonProps, {\n      onClick: undefined,\n      onPointerDown: undefined,\n      onPointerUp: undefined,\n      tabIndex: -1,\n      'data-is-focusable': false\n    });\n    if (keytipProps && menuProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n    var containerProps = getNativeProps(buttonProps, [], ['disabled']);\n    // Add additional props to apply on primary action button\n    if (primaryActionButtonProps) {\n      assign(buttonProps, primaryActionButtonProps);\n    }\n    var SplitButton = function (keytipAttributes) {\n      return React.createElement(\"div\", __assign({}, containerProps, {\n        \"data-ktp-target\": keytipAttributes ? keytipAttributes['data-ktp-target'] : undefined,\n        role: role ? role : 'button',\n        \"aria-disabled\": disabled,\n        \"aria-haspopup\": true,\n        \"aria-expanded\": !menuHidden,\n        \"aria-pressed\": toggle ? !!checked : undefined,\n        \"aria-describedby\": mergeAriaAttributeValues(buttonProps['aria-describedby'], keytipAttributes ? keytipAttributes['aria-describedby'] : undefined),\n        className: classNames && classNames.splitButtonContainer,\n        onKeyDown: _this._onSplitButtonContainerKeyDown,\n        onTouchStart: _this._onTouchStart,\n        ref: _this._splitButtonContainer,\n        \"data-is-focusable\": true,\n        onClick: !disabled && !primaryDisabled ? _this._onSplitButtonPrimaryClick : undefined,\n        tabIndex: !disabled && !primaryDisabled || allowDisabledFocus ? 0 : undefined,\n        \"aria-roledescription\": buttonProps['aria-roledescription'],\n        onFocusCapture: _this._onSplitContainerFocusCapture\n      }), React.createElement(\"span\", {\n        style: {\n          display: 'flex',\n          width: '100%'\n        }\n      }, _this._onRenderContent(tag, buttonProps), _this._onRenderSplitButtonMenuButton(classNames, keytipAttributes), _this._onRenderSplitButtonDivider(classNames)));\n    };\n    return keytipProps ? React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return SplitButton(keytipAttributes);\n    }) : SplitButton();\n  };\n  BaseButton.prototype._onRenderSplitButtonDivider = function (classNames) {\n    if (classNames && classNames.divider) {\n      var onClick = function (ev) {\n        ev.stopPropagation();\n      };\n      return React.createElement(\"span\", {\n        className: classNames.divider,\n        \"aria-hidden\": true,\n        onClick: onClick\n      });\n    }\n    return null;\n  };\n  BaseButton.prototype._onRenderSplitButtonMenuButton = function (classNames, keytipAttributes) {\n    var _a = this.props,\n      allowDisabledFocus = _a.allowDisabledFocus,\n      checked = _a.checked,\n      disabled = _a.disabled,\n      splitButtonMenuProps = _a.splitButtonMenuProps,\n      splitButtonAriaLabel = _a.splitButtonAriaLabel,\n      primaryDisabled = _a.primaryDisabled;\n    var menuHidden = this.state.menuHidden;\n    var menuIconProps = this.props.menuIconProps;\n    if (menuIconProps === undefined) {\n      menuIconProps = {\n        iconName: 'ChevronDown'\n      };\n    }\n    var splitButtonProps = __assign(__assign({}, splitButtonMenuProps), {\n      styles: classNames,\n      checked: checked,\n      disabled: disabled,\n      allowDisabledFocus: allowDisabledFocus,\n      onClick: this._onMenuClick,\n      menuProps: undefined,\n      iconProps: __assign(__assign({}, menuIconProps), {\n        className: this._classNames.menuIcon\n      }),\n      ariaLabel: splitButtonAriaLabel,\n      'aria-haspopup': true,\n      'aria-expanded': !menuHidden,\n      'data-is-focusable': false\n    });\n    // Add data-ktp-execute-target to the split button if the keytip is defined\n    return React.createElement(BaseButton, __assign({}, splitButtonProps, {\n      \"data-ktp-execute-target\": keytipAttributes ? keytipAttributes['data-ktp-execute-target'] : keytipAttributes,\n      onMouseDown: this._onMouseDown,\n      tabIndex: primaryDisabled && !allowDisabledFocus ? 0 : -1\n    }));\n  };\n  BaseButton.prototype._onPointerDown = function (ev) {\n    var onPointerDown = this.props.onPointerDown;\n    if (onPointerDown) {\n      onPointerDown(ev);\n    }\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent();\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  };\n  BaseButton.prototype._handleTouchAndPointerEvent = function () {\n    var _this = this;\n    // If we already have an existing timeout from a previous touch and pointer event\n    // cancel that timeout so we can set a new one.\n    if (this._lastTouchTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(function () {\n      _this._processingTouch = false;\n      _this._lastTouchTimeoutId = undefined;\n      // Touch and pointer events don't focus the button naturally,\n      // so adding an imperative focus call to guarantee this behavior.\n      _this.focus();\n    }, TouchIdleDelay);\n  };\n  /**\n   * Returns if the user hits a valid keyboard key to open the menu\n   * @param ev - the keyboard event\n   * @returns True if user clicks on custom trigger key if enabled or alt + down arrow if not. False otherwise.\n   */\n  BaseButton.prototype._isValidMenuOpenKey = function (ev) {\n    if (this.props.menuTriggerKeyCode) {\n      // eslint-disable-next-line deprecation/deprecation\n      return ev.which === this.props.menuTriggerKeyCode;\n    } else if (this.props.menuProps) {\n      // eslint-disable-next-line deprecation/deprecation\n      return ev.which === KeyCodes.down && (ev.altKey || ev.metaKey);\n    }\n    // Note: When enter is pressed, we will let the event continue to propagate\n    // to trigger the onClick event on the button\n    return false;\n  };\n  BaseButton.defaultProps = {\n    baseClassName: 'ms-Button',\n    styles: {},\n    split: false\n  };\n  // needed to access registeredProviders when manually setting focus visibility\n  BaseButton.contextType = FocusRectsContext;\n  return BaseButton;\n}(React.Component);\nexport { BaseButton };","map":{"version":3,"mappings":"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","names":["React","anchorProperties","assign","buttonProperties","createMergedRef","css","getId","getNativeProps","initializeComponentRef","memoizeFunction","mergeAriaAttributeValues","nullRender","portalContainsElement","setFocusVisibility","warnConditionallyRequiredProps","warnDeprecations","Async","EventGroup","FocusRects","FocusRectsContext","KeyCodes","Icon","FontIcon","ImageIcon","DirectionalHint","ContextualMenu","getBaseButtonClassNames","getSplitButtonClassNames","getBaseSplitButtonClassNames","KeytipData","composeComponentAs","TouchIdleDelay","COMPONENT_NAME","__extends","props","_super","_this","createRef","keytipProps","hasMenu","buttonProps","defaultRender","iconProps","iconName","undefined","imageProps","rest","styles","className","_classNames","icon","text","children","_b","secondaryText","description","_c","onRenderText","_onRenderText","_d","onRenderDescription","_onRenderDescription","textContainer","_hasText","key","_labelId","label","id","_descriptionId","ariaDescription","screenReaderText","_ariaDescriptionId","menuIconProps","menuIcon","menuProps","MenuType","menuAs","onDismiss","ev","defaultPrevented","_dismissMenu","_menuShouldFocusOnMount","_menuShouldFocusOnContainer","setState","menuHidden","shouldFocusOnContainer","shouldFocusOnMount","_renderedVisibleMenu","state","_openMenu","container","_splitButtonContainer","current","target","focus","_processingTouch","onClick","_onMenuClick","disabled","which","enter","space","preventDefault","stopPropagation","_onMenuKeyDown","onKeyDown","onKeyUp","onKeyPress","onMouseUp","onMouseDown","_buttonElement","click","isUp","up","isDown","down","_isValidMenuOpenKey","onMenuClick","_onToggleMenu","context","registeredProviders","altKey","metaKey","currentShouldFocusOnMount","forceUpdate","_isSplitButton","_handleTouchAndPointerEvent","nativeEvent","pointerType","_async","_events","split","rootProps","toggled","Object","BaseButton","ariaLabel","ariaHidden","allowDisabledFocus","primaryDisabled","href","checked","variantClassName","theme","toggle","getClassNames","role","isPrimaryButtonDisabled","renderAsAnchor","tag","nativeProps","type","resolvedAriaLabel","ariaDescribedBy","ariaLabelledBy","dataIsFocusable","isCheckboxTypeRole","checkedOrPressedValue","root","ref","_mergedRef","elementRef","_onKeyDown","_onKeyPress","_onKeyUp","_onMouseDown","_onMouseUp","_onClick","_a","_onRenderSplitButtonContent","_onRenderContent","on","_onPointerDown","onPointerUp","prevProps","prevState","onAfterMenuDismiss","dispose","Tag","onRenderIcon","_onRenderIcon","onRenderAriaDescription","_onRenderAriaDescription","onRenderChildren","_onRenderChildren","onRenderMenu","_onRenderMenu","_e","onRenderMenuIcon","_onRenderMenuIcon","_getMemoizedMenuButtonKeytipProps","Button","keytipAttributes","flexContainer","_onRenderTextContents","doNotLayer","_shouldRenderMenu","_getMenuProps","Content","persistMenu","renderPersistedMenuHiddenOnMount","labelElementId","directionalHint","bottomLeftEdge","hidden","_onDismissMenu","primaryActionButtonProps","classNames","onPointerDown","tabIndex","containerProps","SplitButton","splitButtonContainer","_onSplitButtonContainerKeyDown","onTouchStart","_onTouchStart","_onSplitButtonPrimaryClick","onFocusCapture","_onSplitContainerFocusCapture","style","display","width","_onRenderSplitButtonMenuButton","_onRenderSplitButtonDivider","divider","splitButtonMenuProps","splitButtonAriaLabel","splitButtonProps","stopImmediatePropagation","_lastTouchTimeoutId","clearTimeout","setTimeout","menuTriggerKeyCode","baseClassName","Component"],"sources":["C:\\Users\\hpryz\\Documents\\_Programming\\web-project\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Button\\BaseButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  anchorProperties,\n  assign,\n  buttonProperties,\n  createMergedRef,\n  css,\n  getId,\n  getNativeProps,\n  initializeComponentRef,\n  memoizeFunction,\n  mergeAriaAttributeValues,\n  nullRender,\n  portalContainsElement,\n  setFocusVisibility,\n  warnConditionallyRequiredProps,\n  warnDeprecations,\n  Async,\n  EventGroup,\n  FocusRects,\n  FocusRectsContext,\n  KeyCodes,\n} from '../../Utilities';\nimport { Icon, FontIcon, ImageIcon } from '../../Icon';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ContextualMenu } from '../../ContextualMenu';\nimport { getBaseButtonClassNames } from './BaseButton.classNames';\nimport { getSplitButtonClassNames as getBaseSplitButtonClassNames } from './SplitButton/SplitButton.classNames';\nimport { KeytipData } from '../../KeytipData';\nimport type { IFocusRectsContext, IRenderFunction } from '../../Utilities';\nimport type { IContextualMenuProps } from '../../ContextualMenu';\nimport type { IButtonProps, IButton } from './Button.types';\nimport type { IButtonClassNames } from './BaseButton.classNames';\nimport type { ISplitButtonClassNames } from './SplitButton/SplitButton.classNames';\nimport type { IKeytipProps } from '../../Keytip';\nimport { composeComponentAs } from '../../Utilities';\n\n/**\n * {@docCategory Button}\n */\nexport interface IBaseButtonProps extends IButtonProps {\n  baseClassName?: string;\n  variantClassName?: string;\n}\n\n/**\n * {@docCategory Button}\n */\nexport interface IBaseButtonState {\n  menuHidden: boolean;\n}\n\nconst TouchIdleDelay = 500; /* ms */\nconst COMPONENT_NAME = 'BaseButton';\n\n/**\n * {@docCategory Button}\n */\nexport class BaseButton extends React.Component<IBaseButtonProps, IBaseButtonState> implements IButton {\n  private get _isSplitButton(): boolean {\n    return !!this.props.menuProps && !!this.props.onClick && this.props.split === true;\n  }\n\n  public static defaultProps: Partial<IBaseButtonProps> = {\n    baseClassName: 'ms-Button',\n    styles: {},\n    split: false,\n  };\n\n  // needed to access registeredProviders when manually setting focus visibility\n  public static contextType = FocusRectsContext;\n  public context: IFocusRectsContext;\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _buttonElement = React.createRef<HTMLElement>();\n  private _splitButtonContainer = React.createRef<HTMLDivElement>();\n  private _mergedRef = createMergedRef<HTMLElement>();\n  private _labelId: string;\n  private _descriptionId: string;\n  private _ariaDescriptionId: string;\n  private _classNames: IButtonClassNames;\n  private _processingTouch: boolean;\n  private _lastTouchTimeoutId: number | undefined;\n  private _renderedVisibleMenu: boolean = false;\n\n  // These fields will be used to set corresponding props on the menu.\n  private _menuShouldFocusOnContainer: boolean | undefined;\n  private _menuShouldFocusOnMount: boolean | undefined;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  constructor(props: IBaseButtonProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    warnConditionallyRequiredProps(COMPONENT_NAME, props, ['menuProps', 'onClick'], 'split', this.props.split!);\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      rootProps: undefined,\n      description: 'secondaryText',\n      toggled: 'checked',\n    });\n    this._labelId = getId();\n    this._descriptionId = getId();\n    this._ariaDescriptionId = getId();\n\n    this.state = {\n      menuHidden: true,\n    };\n  }\n\n  public render(): JSX.Element {\n    const {\n      ariaDescription,\n      ariaLabel,\n      ariaHidden,\n      className,\n      disabled,\n      allowDisabledFocus,\n      primaryDisabled,\n      // eslint-disable-next-line deprecation/deprecation\n      secondaryText = this.props.description,\n      href,\n      iconProps,\n      menuIconProps,\n      styles,\n      checked,\n      variantClassName,\n      theme,\n      toggle,\n      getClassNames,\n      role,\n    } = this.props;\n\n    const { menuHidden } = this.state;\n\n    // Button is disabled if the whole button (in case of splitButton is disabled) or if the primary action is disabled\n    const isPrimaryButtonDisabled = disabled || primaryDisabled;\n\n    this._classNames = getClassNames\n      ? getClassNames(\n          theme!,\n          className!,\n          variantClassName!,\n          iconProps && iconProps.className,\n          menuIconProps && menuIconProps.className,\n          isPrimaryButtonDisabled!,\n          checked!,\n          !menuHidden,\n          !!this.props.menuProps,\n          this.props.split,\n          !!allowDisabledFocus,\n        )\n      : getBaseButtonClassNames(\n          theme!,\n          styles!,\n          className!,\n          variantClassName!,\n          iconProps && iconProps.className,\n          menuIconProps && menuIconProps.className,\n          isPrimaryButtonDisabled!,\n          !!this.props.menuProps,\n          checked!,\n          !menuHidden,\n          this.props.split,\n        );\n\n    const { _ariaDescriptionId, _labelId, _descriptionId } = this;\n    // Anchor tag cannot be disabled hence in disabled state rendering\n    // anchor button as normal button\n    const renderAsAnchor: boolean = !isPrimaryButtonDisabled && !!href;\n    const tag = renderAsAnchor ? 'a' : 'button';\n\n    const nativeProps = getNativeProps(\n      // eslint-disable-next-line deprecation/deprecation\n      assign(renderAsAnchor ? {} : { type: 'button' }, this.props.rootProps, this.props),\n      renderAsAnchor ? anchorProperties : buttonProperties,\n      [\n        'disabled', // let disabled buttons be focused and styled as disabled.\n      ],\n    );\n\n    // Check for ariaLabel passed in via Button props, and fall back to aria-label passed in via native props\n    const resolvedAriaLabel = ariaLabel || (nativeProps as any)['aria-label'];\n\n    // Check for ariaDescription, secondaryText or aria-describedby in the native props to determine source of\n    // aria-describedby. Otherwise default to undefined so property does not appear in output.\n    let ariaDescribedBy = undefined;\n    if (ariaDescription) {\n      ariaDescribedBy = _ariaDescriptionId;\n    } else if (secondaryText && this.props.onRenderDescription !== nullRender) {\n      // for buttons like CompoundButton with a valid onRenderDescription, we need to set an ariaDescribedBy\n      // for buttons that do not render anything (via nullRender), we should not set an ariaDescribedBy\n      ariaDescribedBy = _descriptionId;\n    } else if ((nativeProps as any)['aria-describedby']) {\n      ariaDescribedBy = (nativeProps as any)['aria-describedby'];\n    }\n\n    // If an explicit aria-labelledby is given, use that and we're done.\n    // If any kind of description is given (which will end up as an aria-describedby attribute)\n    // and no ariaLabel is specified, set the labelledby element.\n    // Otherwise, the button is labeled implicitly by the descendent text on the button (if it exists).\n    let ariaLabelledBy = undefined;\n    if ((nativeProps as any)['aria-labelledby']) {\n      ariaLabelledBy = (nativeProps as any)['aria-labelledby'];\n    } else if (ariaDescribedBy && !resolvedAriaLabel) {\n      ariaLabelledBy = this._hasText() ? _labelId : undefined;\n    }\n\n    const dataIsFocusable =\n      (this.props as any)['data-is-focusable'] === false || (disabled && !allowDisabledFocus) || this._isSplitButton\n        ? false\n        : true;\n\n    const isCheckboxTypeRole = role === 'menuitemcheckbox' || role === 'checkbox';\n    // if isCheckboxTypeRole, always return a checked value.\n    // Otherwise only return checked value if toggle is set to true.\n    // This is because role=\"checkbox\" always needs to have an aria-checked value\n    // but our checked prop only sets aria-pressed if we mark the button as a toggle=\"true\"\n    const checkedOrPressedValue = isCheckboxTypeRole ? !!checked : toggle === true ? !!checked : undefined;\n\n    const buttonProps = assign(nativeProps, {\n      className: this._classNames.root,\n      // eslint-disable-next-line deprecation/deprecation\n      ref: this._mergedRef(this.props.elementRef, this._buttonElement),\n      disabled: isPrimaryButtonDisabled && !allowDisabledFocus,\n      onKeyDown: this._onKeyDown,\n      onKeyPress: this._onKeyPress,\n      onKeyUp: this._onKeyUp,\n      onMouseDown: this._onMouseDown,\n      onMouseUp: this._onMouseUp,\n      onClick: this._onClick,\n      'aria-label': resolvedAriaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedBy,\n      'aria-disabled': isPrimaryButtonDisabled,\n      'data-is-focusable': dataIsFocusable,\n      // aria-pressed attribute should only be present for toggle buttons\n      // aria-checked attribute should only be present for toggle buttons with checkbox type role\n      [isCheckboxTypeRole ? 'aria-checked' : 'aria-pressed']: checkedOrPressedValue,\n    });\n\n    if (ariaHidden) {\n      buttonProps['aria-hidden'] = true;\n    }\n\n    if (this._isSplitButton) {\n      return this._onRenderSplitButtonContent(tag, buttonProps);\n    } else if (this.props.menuProps) {\n      const { id = `${this._labelId}-menu` } = this.props.menuProps;\n      assign(buttonProps, {\n        'aria-expanded': !menuHidden,\n        'aria-controls': !menuHidden ? id : null,\n        'aria-haspopup': true,\n      });\n    }\n\n    return this._onRenderContent(tag, buttonProps);\n  }\n\n  public componentDidMount() {\n    // For split buttons, touching anywhere in the button should drop the dropdown, which should contain the\n    // primary action. This gives more hit target space for touch environments. We're setting the onpointerdown here,\n    // because React does not support Pointer events yet.\n    if (this._isSplitButton && this._splitButtonContainer.current) {\n      if ('onpointerdown' in this._splitButtonContainer.current) {\n        this._events.on(this._splitButtonContainer.current, 'pointerdown', this._onPointerDown, true);\n      }\n      if ('onpointerup' in this._splitButtonContainer.current && this.props.onPointerUp) {\n        this._events.on(this._splitButtonContainer.current, 'pointerup', this.props.onPointerUp, true);\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IBaseButtonProps, prevState: IBaseButtonState) {\n    // If Button's menu was closed, run onAfterMenuDismiss.\n    if (this.props.onAfterMenuDismiss && !prevState.menuHidden && this.state.menuHidden) {\n      this.props.onAfterMenuDismiss();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public focus(): void {\n    if (this._isSplitButton && this._splitButtonContainer.current) {\n      setFocusVisibility(true, undefined, this.context?.registeredProviders);\n      this._splitButtonContainer.current.focus();\n    } else if (this._buttonElement.current) {\n      setFocusVisibility(true, undefined, this.context?.registeredProviders);\n      this._buttonElement.current.focus();\n    }\n  }\n\n  public dismissMenu(): void {\n    this._dismissMenu();\n  }\n\n  public openMenu(shouldFocusOnContainer?: boolean, shouldFocusOnMount?: boolean): void {\n    this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);\n  }\n\n  private _onRenderContent(tag: any, buttonProps: IButtonProps): JSX.Element {\n    const props = this.props;\n    const Tag = tag;\n    const {\n      menuIconProps,\n      menuProps,\n      onRenderIcon = this._onRenderIcon,\n      onRenderAriaDescription = this._onRenderAriaDescription,\n      onRenderChildren = this._onRenderChildren,\n      // eslint-disable-next-line deprecation/deprecation\n      onRenderMenu = this._onRenderMenu,\n      onRenderMenuIcon = this._onRenderMenuIcon,\n      disabled,\n    } = props;\n    let { keytipProps } = props;\n    if (keytipProps && menuProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    const Button = (keytipAttributes?: any): JSX.Element => (\n      <Tag {...buttonProps} {...keytipAttributes}>\n        <span className={this._classNames.flexContainer} data-automationid=\"splitbuttonprimary\">\n          {onRenderIcon(props, this._onRenderIcon)}\n          {this._onRenderTextContents()}\n          {onRenderAriaDescription(props, this._onRenderAriaDescription)}\n          {onRenderChildren(props, this._onRenderChildren)}\n          {!this._isSplitButton &&\n            (menuProps || menuIconProps || this.props.onRenderMenuIcon) &&\n            onRenderMenuIcon(this.props, this._onRenderMenuIcon)}\n          {menuProps &&\n            !menuProps.doNotLayer &&\n            this._shouldRenderMenu() &&\n            onRenderMenu(this._getMenuProps(menuProps), this._onRenderMenu)}\n        </span>\n      </Tag>\n    );\n\n    const Content = keytipProps ? (\n      // If we're making a split button, we won't put the keytip here\n      <KeytipData\n        keytipProps={!this._isSplitButton ? keytipProps : undefined}\n        ariaDescribedBy={(buttonProps as any)['aria-describedby']}\n        disabled={disabled}\n      >\n        {(keytipAttributes: any): JSX.Element => Button(keytipAttributes)}\n      </KeytipData>\n    ) : (\n      Button()\n    );\n\n    if (menuProps && menuProps.doNotLayer) {\n      return (\n        <>\n          {Content}\n          {this._shouldRenderMenu() && onRenderMenu(this._getMenuProps(menuProps), this._onRenderMenu)}\n        </>\n      );\n    }\n\n    return (\n      <>\n        {Content}\n        <FocusRects />\n      </>\n    );\n  }\n\n  /**\n   * Method to help determine if the menu's component tree should\n   * be rendered. It takes into account whether the menu is expanded,\n   * whether it is a persisted menu and whether it has been shown to the user.\n   */\n  private _shouldRenderMenu() {\n    const { menuHidden } = this.state;\n    // eslint-disable-next-line deprecation/deprecation\n    const { persistMenu, renderPersistedMenuHiddenOnMount } = this.props;\n\n    if (!menuHidden) {\n      // Always should render a menu when it is expanded\n      return true;\n    } else if (persistMenu && (this._renderedVisibleMenu || renderPersistedMenuHiddenOnMount)) {\n      // _renderedVisibleMenu ensures that the first rendering of\n      // the menu happens on-screen, as edge's scrollbar calculations are off if done while hidden.\n      return true;\n    }\n\n    return false;\n  }\n\n  private _onRenderIcon = (\n    buttonProps?: IButtonProps,\n    defaultRender?: IRenderFunction<IButtonProps>,\n  ): JSX.Element | null => {\n    const { iconProps } = this.props;\n\n    if (iconProps && (iconProps.iconName !== undefined || iconProps.imageProps)) {\n      const { className, imageProps, ...rest } = iconProps;\n\n      // If the styles prop is specified as part of iconProps, fall back to regular Icon as FontIcon and ImageIcon\n      // do not have this prop.\n      if (iconProps.styles) {\n        return <Icon className={css(this._classNames.icon, className)} imageProps={imageProps} {...rest} />;\n      }\n      if (iconProps.iconName) {\n        return <FontIcon className={css(this._classNames.icon, className)} {...rest} />;\n      }\n      if (imageProps) {\n        return <ImageIcon className={css(this._classNames.icon, className)} imageProps={imageProps} {...rest} />;\n      }\n    }\n    return null;\n  };\n\n  private _onRenderTextContents = (): JSX.Element | (JSX.Element | null)[] => {\n    const {\n      text,\n      children,\n      // eslint-disable-next-line deprecation/deprecation\n      secondaryText = this.props.description,\n      onRenderText = this._onRenderText,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n\n    if (text || typeof children === 'string' || secondaryText) {\n      return (\n        <span className={this._classNames.textContainer}>\n          {onRenderText(this.props, this._onRenderText)}\n          {onRenderDescription(this.props, this._onRenderDescription)}\n        </span>\n      );\n    }\n    return [onRenderText(this.props, this._onRenderText), onRenderDescription(this.props, this._onRenderDescription)];\n  };\n\n  private _onRenderText = (): JSX.Element | null => {\n    let { text } = this.props;\n    const { children } = this.props;\n\n    // For backwards compat, we should continue to take in the text content from children.\n    if (text === undefined && typeof children === 'string') {\n      text = children;\n    }\n\n    if (this._hasText()) {\n      return (\n        <span key={this._labelId} className={this._classNames.label} id={this._labelId}>\n          {text}\n        </span>\n      );\n    }\n\n    return null;\n  };\n\n  private _hasText(): boolean {\n    // _onRenderTextContents and _onRenderText do not perform the same checks. Below is parity with what _onRenderText\n    // used to have before the refactor that introduced this function. _onRenderTextContents does not require props.\n    // text to be undefined in order for props.children to be used as a fallback.\n    // Purely a code maintainability/reuse issue, but logged as Issue #4979.\n    return this.props.text !== null && (this.props.text !== undefined || typeof this.props.children === 'string');\n  }\n\n  private _onRenderChildren = (): JSX.Element | null => {\n    const { children } = this.props;\n\n    // If children is just a string, either it or the text will be rendered via onRenderLabel\n    // If children is another component, it will be rendered after text\n    if (typeof children === 'string') {\n      return null;\n    }\n\n    return children as any;\n  };\n\n  private _onRenderDescription = (props: IButtonProps) => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { secondaryText = this.props.description } = props;\n\n    // ms-Button-description is only shown when the button type is compound.\n    // In other cases it will not be displayed.\n    return secondaryText ? (\n      <span key={this._descriptionId} className={this._classNames.description} id={this._descriptionId}>\n        {secondaryText}\n      </span>\n    ) : null;\n  };\n\n  private _onRenderAriaDescription = () => {\n    const { ariaDescription } = this.props;\n\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\n    // otherwise it will be assigned to descriptionSpan.\n    return ariaDescription ? (\n      <span className={this._classNames.screenReaderText} id={this._ariaDescriptionId}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  private _onRenderMenuIcon = (props: IButtonProps): JSX.Element | null => {\n    const { menuIconProps } = this.props;\n\n    return <FontIcon iconName=\"ChevronDown\" {...menuIconProps} className={this._classNames.menuIcon} />;\n  };\n\n  private _getMenuProps(menuProps: IContextualMenuProps): IContextualMenuProps {\n    const { persistMenu } = this.props;\n    const { menuHidden } = this.state;\n\n    // the accessible menu label (accessible name) has a relationship to the button.\n    // If the menu props do not specify an explicit value for aria-label or aria-labelledBy,\n    // AND the button has text, we'll set the menu aria-labelledBy to the text element id.\n    if (!menuProps.ariaLabel && !menuProps.labelElementId && this._hasText()) {\n      menuProps = { ...menuProps, labelElementId: this._labelId };\n    }\n\n    return {\n      id: this._labelId + '-menu',\n      directionalHint: DirectionalHint.bottomLeftEdge,\n      ...menuProps,\n      shouldFocusOnContainer: this._menuShouldFocusOnContainer,\n      shouldFocusOnMount: this._menuShouldFocusOnMount,\n      hidden: persistMenu ? menuHidden : undefined,\n      className: css('ms-BaseButton-menuhost', menuProps.className),\n      target: this._isSplitButton ? this._splitButtonContainer.current : this._buttonElement.current,\n      onDismiss: this._onDismissMenu,\n    };\n  }\n\n  private _onRenderMenu = (menuProps: IContextualMenuProps): JSX.Element => {\n    const MenuType = this.props.menuAs ? composeComponentAs(this.props.menuAs, ContextualMenu) : ContextualMenu;\n\n    return <MenuType {...menuProps} />;\n  };\n\n  private _onDismissMenu: IContextualMenuProps['onDismiss'] = ev => {\n    const { menuProps } = this.props;\n\n    if (menuProps && menuProps.onDismiss) {\n      menuProps.onDismiss(ev);\n    }\n    if (!ev || !ev.defaultPrevented) {\n      this._dismissMenu();\n    }\n  };\n\n  private _dismissMenu = (): void => {\n    this._menuShouldFocusOnMount = undefined;\n    this._menuShouldFocusOnContainer = undefined;\n    this.setState({ menuHidden: true });\n  };\n\n  private _openMenu = (shouldFocusOnContainer?: boolean, shouldFocusOnMount: boolean = true): void => {\n    if (this.props.menuProps) {\n      this._menuShouldFocusOnContainer = shouldFocusOnContainer;\n      this._menuShouldFocusOnMount = shouldFocusOnMount;\n      this._renderedVisibleMenu = true;\n      this.setState({ menuHidden: false });\n    }\n  };\n\n  private _onToggleMenu = (shouldFocusOnContainer: boolean): void => {\n    let shouldFocusOnMount = true;\n    if (this.props.menuProps && this.props.menuProps.shouldFocusOnMount === false) {\n      shouldFocusOnMount = false;\n    }\n\n    this.state.menuHidden ? this._openMenu(shouldFocusOnContainer, shouldFocusOnMount) : this._dismissMenu();\n  };\n\n  private _onRenderSplitButtonContent(tag: any, buttonProps: IButtonProps): JSX.Element {\n    const {\n      styles = {},\n      disabled,\n      allowDisabledFocus,\n      checked,\n      getSplitButtonClassNames,\n      primaryDisabled,\n      menuProps,\n      toggle,\n      role,\n      primaryActionButtonProps,\n    } = this.props;\n    let { keytipProps } = this.props;\n    const { menuHidden } = this.state;\n\n    const classNames = getSplitButtonClassNames\n      ? getSplitButtonClassNames(!!disabled, !menuHidden, !!checked, !!allowDisabledFocus)\n      : styles && getBaseSplitButtonClassNames(styles!, !!disabled, !menuHidden, !!checked, !!primaryDisabled);\n\n    assign(buttonProps, {\n      onClick: undefined,\n      onPointerDown: undefined,\n      onPointerUp: undefined,\n      tabIndex: -1,\n      'data-is-focusable': false,\n    });\n\n    if (keytipProps && menuProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    const containerProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(buttonProps, [], ['disabled']);\n\n    // Add additional props to apply on primary action button\n    if (primaryActionButtonProps) {\n      assign(buttonProps, primaryActionButtonProps);\n    }\n\n    const SplitButton = (keytipAttributes?: any): JSX.Element => (\n      <div\n        {...containerProps}\n        data-ktp-target={keytipAttributes ? keytipAttributes['data-ktp-target'] : undefined}\n        role={role ? role : 'button'}\n        aria-disabled={disabled}\n        aria-haspopup={true}\n        aria-expanded={!menuHidden}\n        aria-pressed={toggle ? !!checked : undefined} // should only be present for toggle buttons\n        aria-describedby={mergeAriaAttributeValues(\n          buttonProps['aria-describedby'],\n          keytipAttributes ? keytipAttributes['aria-describedby'] : undefined,\n        )}\n        className={classNames && classNames.splitButtonContainer}\n        onKeyDown={this._onSplitButtonContainerKeyDown}\n        onTouchStart={this._onTouchStart}\n        ref={this._splitButtonContainer}\n        data-is-focusable={true}\n        onClick={!disabled && !primaryDisabled ? this._onSplitButtonPrimaryClick : undefined}\n        tabIndex={(!disabled && !primaryDisabled) || allowDisabledFocus ? 0 : undefined}\n        aria-roledescription={buttonProps['aria-roledescription']}\n        onFocusCapture={this._onSplitContainerFocusCapture}\n      >\n        <span style={{ display: 'flex', width: '100%' }}>\n          {this._onRenderContent(tag, buttonProps)}\n          {this._onRenderSplitButtonMenuButton(classNames, keytipAttributes)}\n          {this._onRenderSplitButtonDivider(classNames)}\n        </span>\n      </div>\n    );\n\n    return keytipProps ? (\n      <KeytipData keytipProps={keytipProps} disabled={disabled}>\n        {(keytipAttributes: any): JSX.Element => SplitButton(keytipAttributes)}\n      </KeytipData>\n    ) : (\n      SplitButton()\n    );\n  }\n\n  private _onSplitContainerFocusCapture = (ev: React.FocusEvent<HTMLDivElement>) => {\n    const container = this._splitButtonContainer.current;\n\n    // If the target is coming from the portal we do not need to set focus on the container.\n    if (!container || (ev.target && portalContainsElement(ev.target, container))) {\n      return;\n    }\n\n    // We should never be able to focus the individual buttons in a split button. Focus\n    // should always remain on the container.\n    container.focus();\n  };\n\n  private _onSplitButtonPrimaryClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n    if (!this.state.menuHidden) {\n      this._dismissMenu();\n    }\n\n    if (!this._processingTouch && this.props.onClick) {\n      this.props.onClick(ev);\n    } else if (this._processingTouch) {\n      this._onMenuClick(ev);\n    }\n  };\n\n  private _onRenderSplitButtonDivider(classNames: ISplitButtonClassNames | undefined): JSX.Element | null {\n    if (classNames && classNames.divider) {\n      const onClick = (ev: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        ev.stopPropagation();\n      };\n      return <span className={classNames.divider} aria-hidden={true} onClick={onClick} />;\n    }\n    return null;\n  }\n\n  private _onRenderSplitButtonMenuButton(\n    classNames: ISplitButtonClassNames | undefined,\n    keytipAttributes: any,\n  ): JSX.Element {\n    const {\n      allowDisabledFocus,\n      checked,\n      disabled,\n      splitButtonMenuProps,\n      splitButtonAriaLabel,\n      primaryDisabled,\n    } = this.props;\n    const { menuHidden } = this.state;\n    let menuIconProps = this.props.menuIconProps;\n\n    if (menuIconProps === undefined) {\n      menuIconProps = {\n        iconName: 'ChevronDown',\n      };\n    }\n\n    const splitButtonProps = {\n      ...splitButtonMenuProps,\n      styles: classNames,\n      checked,\n      disabled,\n      allowDisabledFocus,\n      onClick: this._onMenuClick,\n      menuProps: undefined,\n      iconProps: { ...menuIconProps, className: this._classNames.menuIcon },\n      ariaLabel: splitButtonAriaLabel,\n      'aria-haspopup': true,\n      'aria-expanded': !menuHidden,\n      'data-is-focusable': false,\n    };\n\n    // Add data-ktp-execute-target to the split button if the keytip is defined\n    return (\n      <BaseButton\n        {...splitButtonProps}\n        data-ktp-execute-target={keytipAttributes ? keytipAttributes['data-ktp-execute-target'] : keytipAttributes}\n        onMouseDown={this._onMouseDown}\n        tabIndex={primaryDisabled && !allowDisabledFocus ? 0 : -1}\n      />\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement>) => {\n    // explicity cancelling event so click won't fire after this\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.props.disabled && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else if (!this.props.disabled) {\n      if (this.props.menuProps) {\n        this._onMenuKeyDown(ev);\n      } else if (this.props.onKeyDown !== undefined) {\n        this.props.onKeyDown(ev); // not cancelling event because it's not disabled\n      }\n    }\n  };\n\n  private _onKeyUp = (\n    ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    if (!this.props.disabled && this.props.onKeyUp !== undefined) {\n      this.props.onKeyUp(ev); // not cancelling event because it's not disabled\n    }\n  };\n\n  private _onKeyPress = (\n    ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.props.disabled && this.props.onKeyPress !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.props.onKeyPress(ev); // not cancelling event because it's not disabled\n    }\n  };\n\n  private _onMouseUp = (\n    ev: React.MouseEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    if (!this.props.disabled && this.props.onMouseUp !== undefined) {\n      this.props.onMouseUp(ev); // not cancelling event because it's not disabled\n    }\n  };\n\n  private _onMouseDown = (\n    ev: React.MouseEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    if (!this.props.disabled && this.props.onMouseDown !== undefined) {\n      this.props.onMouseDown(ev); // not cancelling event because it's not disabled\n    }\n  };\n\n  private _onClick = (\n    ev: React.MouseEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    if (!this.props.disabled) {\n      if (this.props.menuProps) {\n        this._onMenuClick(ev);\n      } else if (this.props.onClick !== undefined) {\n        this.props.onClick(ev); // not cancelling event because it's not disabled\n      }\n    }\n  };\n\n  private _onSplitButtonContainerKeyDown = (ev: React.KeyboardEvent<HTMLDivElement>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n      if (this._buttonElement.current) {\n        this._buttonElement.current.click();\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    } else {\n      this._onMenuKeyDown(ev);\n    }\n  };\n\n  private _onMenuKeyDown = (ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement>) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const isUp = ev.which === KeyCodes.up;\n    // eslint-disable-next-line deprecation/deprecation\n    const isDown = ev.which === KeyCodes.down;\n\n    if (!ev.defaultPrevented && this._isValidMenuOpenKey(ev)) {\n      const { onMenuClick } = this.props;\n      if (onMenuClick) {\n        onMenuClick(ev, this.props);\n      }\n\n      this._onToggleMenu(false);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n      // We manually set the focus visibility to true if opening via Enter or Space to account for the scenario where\n      // a user clicks on the button, closes the menu and then opens it via keyboard. In this scenario our default logic\n      // for setting focus visibility is not triggered since there is no keyboard navigation present beforehand.\n      setFocusVisibility(true, ev.target as Element, this.context?.registeredProviders);\n    }\n\n    if (!(ev.altKey || ev.metaKey) && (isUp || isDown)) {\n      // Suppose a menu, with shouldFocusOnMount: false, is open, and user wants to keyboard to the menu items\n      // We need to re-render the menu with shouldFocusOnMount as true.\n\n      if (!this.state.menuHidden && this.props.menuProps) {\n        const currentShouldFocusOnMount =\n          this._menuShouldFocusOnMount !== undefined\n            ? this._menuShouldFocusOnMount\n            : this.props.menuProps.shouldFocusOnMount;\n        if (!currentShouldFocusOnMount) {\n          ev.preventDefault();\n          ev.stopPropagation();\n          this._menuShouldFocusOnMount = true;\n          this.forceUpdate();\n        }\n      }\n    }\n  };\n\n  private _onTouchStart: () => void = () => {\n    if (\n      this._isSplitButton &&\n      this._splitButtonContainer.current &&\n      !('onpointerdown' in this._splitButtonContainer.current)\n    ) {\n      this._handleTouchAndPointerEvent();\n    }\n  };\n\n  private _onPointerDown(\n    ev: PointerEvent &\n      React.PointerEvent<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement | BaseButton | HTMLSpanElement>,\n  ) {\n    const { onPointerDown } = this.props;\n    if (onPointerDown) {\n      onPointerDown(ev);\n    }\n\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent();\n\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  }\n\n  private _handleTouchAndPointerEvent() {\n    // If we already have an existing timeout from a previous touch and pointer event\n    // cancel that timeout so we can set a new one.\n    if (this._lastTouchTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n\n    this._lastTouchTimeoutId = this._async.setTimeout(() => {\n      this._processingTouch = false;\n      this._lastTouchTimeoutId = undefined;\n\n      // Touch and pointer events don't focus the button naturally,\n      // so adding an imperative focus call to guarantee this behavior.\n      this.focus();\n    }, TouchIdleDelay);\n  }\n\n  /**\n   * Returns if the user hits a valid keyboard key to open the menu\n   * @param ev - the keyboard event\n   * @returns True if user clicks on custom trigger key if enabled or alt + down arrow if not. False otherwise.\n   */\n  private _isValidMenuOpenKey(\n    ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement>,\n  ): boolean {\n    if (this.props.menuTriggerKeyCode) {\n      // eslint-disable-next-line deprecation/deprecation\n      return ev.which === this.props.menuTriggerKeyCode;\n    } else if (this.props.menuProps) {\n      // eslint-disable-next-line deprecation/deprecation\n      return ev.which === KeyCodes.down && (ev.altKey || ev.metaKey);\n    }\n\n    // Note: When enter is pressed, we will let the event continue to propagate\n    // to trigger the onClick event on the button\n    return false;\n  }\n\n  private _onMenuClick = (\n    ev: React.MouseEvent<HTMLDivElement | HTMLButtonElement | HTMLAnchorElement | HTMLSpanElement>,\n  ) => {\n    const { onMenuClick, menuProps } = this.props;\n    if (onMenuClick) {\n      onMenuClick(ev, this.props);\n    }\n\n    // focus on the container by default when the menu is opened with a click event\n    // this differentiates from a keyboard interaction triggering the click event\n    const shouldFocusOnContainer =\n      typeof menuProps?.shouldFocusOnContainer === 'boolean'\n        ? menuProps.shouldFocusOnContainer\n        : (ev.nativeEvent as PointerEvent).pointerType === 'mouse';\n\n    if (!ev.defaultPrevented) {\n      this._onToggleMenu(shouldFocusOnContainer);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}