{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { buttonProperties, getNativeProps, KeyCodes, mergeAriaAttributeValues, memoizeFunction, Async, EventGroup, getId } from '../../../Utilities';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { getSplitButtonVerticalDividerClassNames } from '../ContextualMenu.classNames';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { VerticalDivider } from '../../../Divider';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nvar TouchIdleDelay = 500; /* ms */\nvar ContextualMenuSplitButton = /** @class */function (_super) {\n  __extends(ContextualMenuSplitButton, _super);\n  function ContextualMenuSplitButton(props) {\n    var _this = _super.call(this, props) || this;\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n    _this._onItemKeyDown = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        onItemKeyDown = _a.onItemKeyDown;\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        _this._executeItemClick(ev);\n        ev.preventDefault();\n        ev.stopPropagation();\n      } else if (onItemKeyDown) {\n        onItemKeyDown(item, ev);\n      }\n    };\n    _this._getSubmenuTarget = function () {\n      return _this._splitButton;\n    };\n    _this._renderAriaDescription = function (ariaDescription, className) {\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n      return ariaDescription ? React.createElement(\"span\", {\n        id: _this._ariaDescriptionId,\n        className: className\n      }, ariaDescription) : null;\n    };\n    _this._onItemMouseEnterPrimary = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        onItemMouseEnter = _a.onItemMouseEnter;\n      if (onItemMouseEnter) {\n        onItemMouseEnter(__assign(__assign({}, item), {\n          subMenuProps: undefined,\n          items: undefined\n        }), ev, _this._splitButton);\n      }\n    };\n    _this._onItemMouseEnterIcon = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        onItemMouseEnter = _a.onItemMouseEnter;\n      if (onItemMouseEnter) {\n        onItemMouseEnter(item, ev, _this._splitButton);\n      }\n    };\n    _this._onItemMouseMovePrimary = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        onItemMouseMove = _a.onItemMouseMove;\n      if (onItemMouseMove) {\n        onItemMouseMove(__assign(__assign({}, item), {\n          subMenuProps: undefined,\n          items: undefined\n        }), ev, _this._splitButton);\n      }\n    };\n    _this._onItemMouseMoveIcon = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        onItemMouseMove = _a.onItemMouseMove;\n      if (onItemMouseMove) {\n        onItemMouseMove(item, ev, _this._splitButton);\n      }\n    };\n    _this._onIconItemClick = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        onItemClickBase = _a.onItemClickBase;\n      if (onItemClickBase) {\n        onItemClickBase(item, ev, _this._splitButton ? _this._splitButton : ev.currentTarget);\n      }\n    };\n    _this._executeItemClick = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        executeItemClick = _a.executeItemClick,\n        onItemClick = _a.onItemClick;\n      if (item.disabled || item.isDisabled) {\n        return;\n      }\n      if (_this._processingTouch && onItemClick) {\n        return onItemClick(item, ev);\n      }\n      if (executeItemClick) {\n        executeItemClick(item, ev);\n      }\n    };\n    _this._onTouchStart = function (ev) {\n      if (_this._splitButton && !('onpointerdown' in _this._splitButton)) {\n        _this._handleTouchAndPointerEvent(ev);\n      }\n    };\n    _this._onPointerDown = function (ev) {\n      if (ev.pointerType === 'touch') {\n        _this._handleTouchAndPointerEvent(ev);\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n      }\n    };\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    return _this;\n  }\n  ContextualMenuSplitButton.prototype.componentDidMount = function () {\n    if (this._splitButton && 'onpointerdown' in this._splitButton) {\n      this._events.on(this._splitButton, 'pointerdown', this._onPointerDown, true);\n    }\n  };\n  ContextualMenuSplitButton.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n    this._events.dispose();\n  };\n  ContextualMenuSplitButton.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      item = _a.item,\n      classNames = _a.classNames,\n      index = _a.index,\n      focusableElementIndex = _a.focusableElementIndex,\n      totalItemCount = _a.totalItemCount,\n      hasCheckmarks = _a.hasCheckmarks,\n      hasIcons = _a.hasIcons,\n      onItemMouseLeave = _a.onItemMouseLeave,\n      expandedMenuItemKey = _a.expandedMenuItemKey;\n    var itemHasSubmenu = hasSubmenu(item);\n    var keytipProps = item.keytipProps;\n    if (keytipProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    var ariaDescription = item.ariaDescription;\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n    return React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      disabled: isItemDisabled(item)\n    }, function (keytipAttributes) {\n      return React.createElement(\"div\", {\n        \"data-ktp-target\": keytipAttributes['data-ktp-target'],\n        ref: function (splitButton) {\n          return _this._splitButton = splitButton;\n        },\n        role: getMenuItemAriaRole(item),\n        \"aria-label\": item.ariaLabel,\n        className: classNames.splitContainer,\n        \"aria-disabled\": isItemDisabled(item),\n        \"aria-expanded\": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n        \"aria-haspopup\": true,\n        \"aria-describedby\": mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? _this._ariaDescriptionId : undefined, keytipAttributes['aria-describedby']),\n        \"aria-checked\": item.isChecked || item.checked,\n        \"aria-posinset\": focusableElementIndex + 1,\n        \"aria-setsize\": totalItemCount,\n        onMouseEnter: _this._onItemMouseEnterPrimary,\n        onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(_this, __assign(__assign({}, item), {\n          subMenuProps: null,\n          items: null\n        })) : undefined,\n        onMouseMove: _this._onItemMouseMovePrimary,\n        onKeyDown: _this._onItemKeyDown,\n        onClick: _this._executeItemClick,\n        onTouchStart: _this._onTouchStart,\n        tabIndex: 0,\n        \"data-is-focusable\": true,\n        \"aria-roledescription\": item['aria-roledescription']\n      }, _this._renderSplitPrimaryButton(item, classNames, index, hasCheckmarks, hasIcons), _this._renderSplitDivider(item), _this._renderSplitIconButton(item, classNames, index, keytipAttributes), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));\n    });\n  };\n  ContextualMenuSplitButton.prototype._renderSplitPrimaryButton = function (item,\n  // eslint-disable-next-line deprecation/deprecation\n  classNames, index, hasCheckmarks, hasIcons) {\n    var _a = this.props,\n      _b = _a.contextualMenuItemAs,\n      ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n      onItemClick = _a.onItemClick;\n    var itemProps = {\n      key: item.key,\n      disabled: isItemDisabled(item) || item.primaryDisabled,\n      /* eslint-disable deprecation/deprecation */\n      name: item.name,\n      text: item.text || item.name,\n      secondaryText: item.secondaryText,\n      /* eslint-enable deprecation/deprecation */\n      className: classNames.splitPrimary,\n      canCheck: item.canCheck,\n      isChecked: item.isChecked,\n      checked: item.checked,\n      iconProps: item.iconProps,\n      onRenderIcon: item.onRenderIcon,\n      data: item.data,\n      'data-is-focusable': false\n    };\n    var itemComponentProps = item.itemProps;\n    return React.createElement(\"button\", __assign({}, getNativeProps(itemProps, buttonProperties)), React.createElement(ChildrenRenderer, __assign({\n      \"data-is-focusable\": false,\n      item: itemProps,\n      classNames: classNames,\n      index: index,\n      onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,\n      hasIcons: hasIcons\n    }, itemComponentProps)));\n  };\n  ContextualMenuSplitButton.prototype._renderSplitDivider = function (item) {\n    var getDividerClassNames = item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;\n    return React.createElement(VerticalDivider, {\n      getClassNames: getDividerClassNames\n    });\n  };\n  ContextualMenuSplitButton.prototype._renderSplitIconButton = function (item, classNames,\n  // eslint-disable-line deprecation/deprecation\n  index, keytipAttributes) {\n    var _a = this.props,\n      _b = _a.contextualMenuItemAs,\n      ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n      onItemMouseLeave = _a.onItemMouseLeave,\n      onItemMouseDown = _a.onItemMouseDown,\n      openSubMenu = _a.openSubMenu,\n      dismissSubMenu = _a.dismissSubMenu,\n      dismissMenu = _a.dismissMenu;\n    var itemProps = {\n      onClick: this._onIconItemClick,\n      disabled: isItemDisabled(item),\n      className: classNames.splitMenu,\n      subMenuProps: item.subMenuProps,\n      submenuIconProps: item.submenuIconProps,\n      split: true,\n      key: item.key\n    };\n    var buttonProps = __assign(__assign({}, getNativeProps(itemProps, buttonProperties)), {\n      onMouseEnter: this._onItemMouseEnterIcon,\n      onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : undefined,\n      onMouseDown: function (ev) {\n        return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;\n      },\n      onMouseMove: this._onItemMouseMoveIcon,\n      'data-is-focusable': false,\n      'data-ktp-execute-target': keytipAttributes['data-ktp-execute-target'],\n      'aria-hidden': true\n    });\n    var itemComponentProps = item.itemProps;\n    return React.createElement(\"button\", __assign({}, buttonProps), React.createElement(ChildrenRenderer, __assign({\n      componentRef: item.componentRef,\n      item: itemProps,\n      classNames: classNames,\n      index: index,\n      hasIcons: false,\n      openSubMenu: openSubMenu,\n      dismissSubMenu: dismissSubMenu,\n      dismissMenu: dismissMenu,\n      getSubmenuTarget: this._getSubmenuTarget\n    }, itemComponentProps)));\n  };\n  ContextualMenuSplitButton.prototype._handleTouchAndPointerEvent = function (ev) {\n    var _this = this;\n    var onTap = this.props.onTap;\n    if (onTap) {\n      onTap(ev);\n    }\n    // If we already have an existing timeout from a previous touch/pointer event\n    // cancel that timeout so we can set a new one.\n    if (this._lastTouchTimeoutId) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(function () {\n      _this._processingTouch = false;\n      _this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  };\n  return ContextualMenuSplitButton;\n}(ContextualMenuItemWrapper);\nexport { ContextualMenuSplitButton };","map":{"version":3,"mappings":"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","names":["React","buttonProperties","getNativeProps","KeyCodes","mergeAriaAttributeValues","memoizeFunction","Async","EventGroup","getId","ContextualMenuItem","getSplitButtonVerticalDividerClassNames","KeytipData","isItemDisabled","hasSubmenu","getMenuItemAriaRole","VerticalDivider","ContextualMenuItemWrapper","TouchIdleDelay","__extends","props","_super","_this","keytipProps","hasMenu","ev","item","onItemKeyDown","which","enter","_executeItemClick","preventDefault","stopPropagation","_splitButton","ariaDescription","className","id","_ariaDescriptionId","onItemMouseEnter","subMenuProps","undefined","items","onItemMouseMove","onItemClickBase","currentTarget","executeItemClick","onItemClick","disabled","isDisabled","_processingTouch","_handleTouchAndPointerEvent","pointerType","stopImmediatePropagation","_async","_events","ContextualMenuSplitButton","on","_onPointerDown","dispose","classNames","index","focusableElementIndex","totalItemCount","hasCheckmarks","hasIcons","onItemMouseLeave","expandedMenuItemKey","itemHasSubmenu","_getMemoizedMenuButtonKeytipProps","keytipAttributes","ref","splitButton","role","ariaLabel","splitContainer","key","ariaDescribedBy","isChecked","checked","onMouseEnter","_onItemMouseEnterPrimary","onMouseLeave","bind","onMouseMove","_onItemMouseMovePrimary","onKeyDown","_onItemKeyDown","onClick","onTouchStart","_onTouchStart","tabIndex","_renderSplitPrimaryButton","_renderSplitDivider","_renderSplitIconButton","_renderAriaDescription","screenReaderText","_b","ChildrenRenderer","itemProps","primaryDisabled","name","text","secondaryText","splitPrimary","canCheck","iconProps","onRenderIcon","data","itemComponentProps","onCheckmarkClick","getDividerClassNames","getClassNames","onItemMouseDown","openSubMenu","dismissSubMenu","dismissMenu","_onIconItemClick","splitMenu","submenuIconProps","split","buttonProps","_onItemMouseEnterIcon","onMouseDown","_onItemMouseMoveIcon","componentRef","getSubmenuTarget","_getSubmenuTarget","onTap","_lastTouchTimeoutId","clearTimeout","setTimeout"],"sources":["C:\\Users\\hpryz\\Documents\\_Programming\\web-project\\node_modules\\@fluentui\\react\\lib\\components\\ContextualMenu\\src\\components\\ContextualMenu\\ContextualMenuItemWrapper\\ContextualMenuSplitButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  buttonProperties,\n  getNativeProps,\n  KeyCodes,\n  mergeAriaAttributeValues,\n  memoizeFunction,\n  Async,\n  EventGroup,\n  getId,\n} from '../../../Utilities';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { getSplitButtonVerticalDividerClassNames } from '../ContextualMenu.classNames';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { VerticalDivider } from '../../../Divider';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport type { IContextualMenuItem } from '../ContextualMenu.types';\nimport type { IMenuItemClassNames } from '../ContextualMenu.classNames';\nimport type { IKeytipProps } from '../../../Keytip';\nimport type { IContextualMenuItemWrapperProps } from './ContextualMenuItemWrapper.types';\n\nexport interface IContextualMenuSplitButtonState {}\n\nconst TouchIdleDelay = 500; /* ms */\n\nexport class ContextualMenuSplitButton extends ContextualMenuItemWrapper {\n  private _splitButton: HTMLDivElement;\n  private _lastTouchTimeoutId: number | undefined;\n  private _processingTouch: boolean;\n  private _ariaDescriptionId: string;\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  constructor(props: IContextualMenuItemWrapperProps) {\n    super(props);\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount() {\n    if (this._splitButton && 'onpointerdown' in this._splitButton) {\n      this._events.on(this._splitButton, 'pointerdown', this._onPointerDown, true);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      onItemMouseLeave,\n      expandedMenuItemKey,\n    } = this.props;\n\n    const itemHasSubmenu = hasSubmenu(item);\n\n    let { keytipProps } = item;\n    if (keytipProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    const { ariaDescription } = item;\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    return (\n      <KeytipData keytipProps={keytipProps} disabled={isItemDisabled(item)}>\n        {(keytipAttributes: any): JSX.Element => (\n          <div\n            data-ktp-target={keytipAttributes['data-ktp-target']}\n            ref={(splitButton: HTMLDivElement) => (this._splitButton = splitButton)}\n            role={getMenuItemAriaRole(item)}\n            aria-label={item.ariaLabel}\n            className={classNames.splitContainer}\n            aria-disabled={isItemDisabled(item)}\n            aria-expanded={itemHasSubmenu ? item.key === expandedMenuItemKey : undefined}\n            aria-haspopup={true}\n            aria-describedby={mergeAriaAttributeValues(\n              item.ariaDescribedBy,\n              ariaDescription ? this._ariaDescriptionId : undefined,\n              keytipAttributes['aria-describedby'],\n            )}\n            aria-checked={item.isChecked || item.checked}\n            aria-posinset={focusableElementIndex + 1}\n            aria-setsize={totalItemCount}\n            onMouseEnter={this._onItemMouseEnterPrimary}\n            onMouseLeave={\n              onItemMouseLeave ? onItemMouseLeave.bind(this, { ...item, subMenuProps: null, items: null }) : undefined\n            }\n            onMouseMove={this._onItemMouseMovePrimary}\n            onKeyDown={this._onItemKeyDown}\n            onClick={this._executeItemClick}\n            onTouchStart={this._onTouchStart}\n            tabIndex={0}\n            data-is-focusable={true}\n            aria-roledescription={item['aria-roledescription']}\n          >\n            {this._renderSplitPrimaryButton(item, classNames, index, hasCheckmarks!, hasIcons!)}\n            {this._renderSplitDivider(item)}\n            {this._renderSplitIconButton(item, classNames, index, keytipAttributes)}\n            {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n          </div>\n        )}\n      </KeytipData>\n    );\n  }\n\n  protected _onItemKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { item, onItemKeyDown } = this.props;\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.enter) {\n      this._executeItemClick(ev);\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else if (onItemKeyDown) {\n      onItemKeyDown(item, ev);\n    }\n  };\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._splitButton;\n  };\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  private _renderSplitPrimaryButton(\n    item: IContextualMenuItem,\n    // eslint-disable-next-line deprecation/deprecation\n    classNames: IMenuItemClassNames,\n    index: number,\n    hasCheckmarks: boolean,\n    hasIcons: boolean,\n  ) {\n    const { contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem, onItemClick } = this.props;\n\n    const itemProps: IContextualMenuItem = {\n      key: item.key,\n      disabled: isItemDisabled(item) || item.primaryDisabled,\n      /* eslint-disable deprecation/deprecation */\n      name: item.name,\n      text: item.text || item.name,\n      secondaryText: item.secondaryText,\n      /* eslint-enable deprecation/deprecation */\n      className: classNames.splitPrimary,\n      canCheck: item.canCheck,\n      isChecked: item.isChecked,\n      checked: item.checked,\n      iconProps: item.iconProps,\n      onRenderIcon: item.onRenderIcon,\n      data: item.data,\n      'data-is-focusable': false,\n    };\n\n    const { itemProps: itemComponentProps } = item;\n\n    return (\n      <button {...getNativeProps(itemProps, buttonProperties)}>\n        <ChildrenRenderer\n          data-is-focusable={false}\n          item={itemProps}\n          classNames={classNames}\n          index={index}\n          onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n          hasIcons={hasIcons}\n          {...itemComponentProps}\n        />\n      </button>\n    );\n  }\n\n  private _renderSplitDivider(item: IContextualMenuItem) {\n    const getDividerClassNames =\n      item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;\n    return <VerticalDivider getClassNames={getDividerClassNames} />;\n  }\n\n  private _renderSplitIconButton(\n    item: IContextualMenuItem,\n    classNames: IMenuItemClassNames, // eslint-disable-line deprecation/deprecation\n    index: number,\n    keytipAttributes: any,\n  ) {\n    const {\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      onItemMouseLeave,\n      onItemMouseDown,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    const itemProps: IContextualMenuItem = {\n      onClick: this._onIconItemClick,\n      disabled: isItemDisabled(item),\n      className: classNames.splitMenu,\n      subMenuProps: item.subMenuProps,\n      submenuIconProps: item.submenuIconProps,\n      split: true,\n      key: item.key,\n    };\n\n    const buttonProps = {\n      ...getNativeProps<React.ButtonHTMLAttributes<HTMLButtonElement>>(itemProps, buttonProperties),\n      ...{\n        onMouseEnter: this._onItemMouseEnterIcon,\n        onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : undefined,\n        onMouseDown: (ev: React.MouseEvent<HTMLButtonElement>) =>\n          onItemMouseDown ? onItemMouseDown(item, ev) : undefined,\n        onMouseMove: this._onItemMouseMoveIcon,\n        'data-is-focusable': false,\n        'data-ktp-execute-target': keytipAttributes['data-ktp-execute-target'],\n        'aria-hidden': true,\n      },\n    };\n\n    const { itemProps: itemComponentProps } = item;\n\n    return (\n      <button {...buttonProps}>\n        <ChildrenRenderer\n          componentRef={item.componentRef}\n          item={itemProps}\n          classNames={classNames}\n          index={index}\n          hasIcons={false}\n          openSubMenu={openSubMenu}\n          dismissSubMenu={dismissSubMenu}\n          dismissMenu={dismissMenu}\n          getSubmenuTarget={this._getSubmenuTarget}\n          {...itemComponentProps}\n        />\n      </button>\n    );\n  }\n\n  private _onItemMouseEnterPrimary = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseEnter } = this.props;\n    if (onItemMouseEnter) {\n      onItemMouseEnter({ ...item, subMenuProps: undefined, items: undefined }, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseEnterIcon = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseEnter } = this.props;\n    if (onItemMouseEnter) {\n      onItemMouseEnter(item, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseMovePrimary = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseMove } = this.props;\n    if (onItemMouseMove) {\n      onItemMouseMove({ ...item, subMenuProps: undefined, items: undefined }, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseMoveIcon = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseMove } = this.props;\n    if (onItemMouseMove) {\n      onItemMouseMove(item, ev, this._splitButton);\n    }\n  };\n\n  private _onIconItemClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemClickBase } = this.props;\n    if (onItemClickBase) {\n      onItemClickBase(item, ev, (this._splitButton ? this._splitButton : ev.currentTarget) as HTMLElement);\n    }\n  };\n\n  private _executeItemClick = (ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>): void => {\n    const { item, executeItemClick, onItemClick } = this.props;\n\n    if (item.disabled || item.isDisabled) {\n      return;\n    }\n\n    if (this._processingTouch && onItemClick) {\n      return onItemClick(item, ev);\n    }\n\n    if (executeItemClick) {\n      executeItemClick(item, ev);\n    }\n  };\n\n  private _onTouchStart = (ev: React.TouchEvent<HTMLElement>): void => {\n    if (this._splitButton && !('onpointerdown' in this._splitButton)) {\n      this._handleTouchAndPointerEvent(ev);\n    }\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent(ev);\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  };\n\n  private _handleTouchAndPointerEvent(ev: React.TouchEvent<HTMLElement> | PointerEvent) {\n    const { onTap } = this.props;\n\n    if (onTap) {\n      onTap(ev);\n    }\n    // If we already have an existing timeout from a previous touch/pointer event\n    // cancel that timeout so we can set a new one.\n    if (this._lastTouchTimeoutId) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(() => {\n      this._processingTouch = false;\n      this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}