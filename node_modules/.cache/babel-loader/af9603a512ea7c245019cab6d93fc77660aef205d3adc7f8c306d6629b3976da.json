{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { EventGroup, getId } from '../../Utilities';\nimport { KeytipEvents } from '../../utilities/keytips/KeytipConstants';\n/**\n * This class is responsible for handling registering, updating, and unregistering of keytips\n */\nvar KeytipManager = /** @class */function () {\n  function KeytipManager() {\n    this.keytips = {};\n    this.persistedKeytips = {};\n    this.sequenceMapping = {};\n    // This is (and should be) updated and kept in sync\n    // with the inKeytipMode in KeytipLayer.\n    this.inKeytipMode = false;\n    // Boolean that gets checked before entering keytip mode by the KeytipLayer\n    // Used for an override in special cases (e.g. Disable entering keytip mode when a modal is shown)\n    this.shouldEnterKeytipMode = true;\n    // Boolean to indicate whether to delay firing an event to update subscribers of\n    // keytip data changed.\n    this.delayUpdatingKeytipChange = false;\n  }\n  /**\n   * Static function to get singleton KeytipManager instance\n   *\n   * @returns Singleton KeytipManager instance\n   */\n  KeytipManager.getInstance = function () {\n    return this._instance;\n  };\n  /**\n   * Initialization code to set set parameters to define\n   * how the KeytipManager handles keytip data.\n   *\n   * @param delayUpdatingKeytipChange - T/F if we should delay notifiying keytip subscribers\n   * of keytip changes\n   */\n  KeytipManager.prototype.init = function (delayUpdatingKeytipChange) {\n    this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;\n  };\n  /**\n   * Registers a keytip\n   *\n   * @param keytipProps - Keytip to register\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   * @returns Unique ID for this keytip\n   */\n  KeytipManager.prototype.register = function (keytipProps, persisted) {\n    if (persisted === void 0) {\n      persisted = false;\n    }\n    var props = keytipProps;\n    if (!persisted) {\n      // Add the overflowSetSequence if necessary\n      props = this.addParentOverflow(keytipProps);\n      this.sequenceMapping[props.keySequences.toString()] = props;\n    }\n    // Create a unique keytip\n    var uniqueKeytip = this._getUniqueKtp(props);\n    // Add to dictionary\n    persisted ? this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip : this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip;\n    // We only want to add something new if we are currently showing keytip mode\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      var event_1 = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;\n      EventGroup.raise(this, event_1, {\n        keytip: props,\n        uniqueID: uniqueKeytip.uniqueID\n      });\n    }\n    return uniqueKeytip.uniqueID;\n  };\n  /**\n   * Update a keytip\n   *\n   * @param keytipProps - Keytip to update\n   * @param uniqueID - Unique ID of this keytip\n   */\n  KeytipManager.prototype.update = function (keytipProps, uniqueID) {\n    var newKeytipProps = this.addParentOverflow(keytipProps);\n    var uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);\n    var oldKeyTip = this.keytips[uniqueID];\n    if (oldKeyTip) {\n      // Update everything except 'visible'\n      uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;\n      // Update keytip in this.keytips\n      this.keytips[uniqueID] = uniqueKeytip;\n      // Update the sequence to be up to date\n      delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];\n      this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;\n      // Raise event only if we are currently in keytip mode\n      if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n        EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {\n          keytip: uniqueKeytip.keytip,\n          uniqueID: uniqueKeytip.uniqueID\n        });\n      }\n    }\n  };\n  /**\n   * Unregisters a keytip\n   *\n   * @param keytipToRemove - IKeytipProps of the keytip to remove\n   * @param uniqueID - Unique ID of this keytip\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   */\n  KeytipManager.prototype.unregister = function (keytipToRemove, uniqueID, persisted) {\n    if (persisted === void 0) {\n      persisted = false;\n    }\n    persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];\n    !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];\n    var event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;\n    // Update keytips only if we're in keytip mode\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      EventGroup.raise(this, event, {\n        keytip: keytipToRemove,\n        uniqueID: uniqueID\n      });\n    }\n  };\n  /**\n   * Manual call to enter keytip mode\n   */\n  KeytipManager.prototype.enterKeytipMode = function () {\n    EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);\n  };\n  /**\n   * Manual call to exit keytip mode\n   */\n  KeytipManager.prototype.exitKeytipMode = function () {\n    EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);\n  };\n  /**\n   * Gets all IKeytipProps from this.keytips\n   *\n   * @returns All keytips stored in the manager\n   */\n  KeytipManager.prototype.getKeytips = function () {\n    var _this = this;\n    return Object.keys(this.keytips).map(function (key) {\n      return _this.keytips[key].keytip;\n    });\n  };\n  /**\n   * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it\n   *\n   * @param keytipProps - Keytip props to add overflowSetSequence to if necessary\n   * @returns - Modified keytip props, if needed to be modified\n   */\n  KeytipManager.prototype.addParentOverflow = function (keytipProps) {\n    var fullSequence = __spreadArray([], keytipProps.keySequences);\n    fullSequence.pop();\n    if (fullSequence.length !== 0) {\n      var parentKeytip = this.sequenceMapping[fullSequence.toString()];\n      if (parentKeytip && parentKeytip.overflowSetSequence) {\n        return __assign(__assign({}, keytipProps), {\n          overflowSetSequence: parentKeytip.overflowSetSequence\n        });\n      }\n    }\n    return keytipProps;\n  };\n  /**\n   * Public function to bind for overflow items that have a submenu\n   */\n  KeytipManager.prototype.menuExecute = function (overflowButtonSequences, keytipSequences) {\n    EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {\n      overflowButtonSequences: overflowButtonSequences,\n      keytipSequences: keytipSequences\n    });\n  };\n  /**\n   * Creates an IUniqueKeytip object\n   *\n   * @param keytipProps - IKeytipProps\n   * @param uniqueID - Unique ID, will default to the next unique ID if not passed\n   * @returns IUniqueKeytip object\n   */\n  KeytipManager.prototype._getUniqueKtp = function (keytipProps, uniqueID) {\n    if (uniqueID === void 0) {\n      uniqueID = getId();\n    }\n    return {\n      keytip: __assign({}, keytipProps),\n      uniqueID: uniqueID\n    };\n  };\n  KeytipManager._instance = new KeytipManager();\n  return KeytipManager;\n}();\nexport { KeytipManager };","map":{"version":3,"mappings":"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","names":["EventGroup","getId","KeytipEvents","KeytipManager","_instance","delayUpdatingKeytipChange","keytipProps","persisted","props","addParentOverflow","sequenceMapping","keySequences","toString","uniqueKeytip","_getUniqueKtp","persistedKeytips","uniqueID","keytips","inKeytipMode","event_1","PERSISTED_KEYTIP_ADDED","KEYTIP_ADDED","raise","keytip","newKeytipProps","oldKeyTip","visible","KEYTIP_UPDATED","keytipToRemove","event","PERSISTED_KEYTIP_REMOVED","KEYTIP_REMOVED","ENTER_KEYTIP_MODE","EXIT_KEYTIP_MODE","Object","keys","map","key","fullSequence","pop","length","parentKeytip","overflowSetSequence","overflowButtonSequences","keytipSequences","PERSISTED_KEYTIP_EXECUTE"],"sources":["C:\\Users\\hpryz\\Documents\\_Programming\\web-project\\node_modules\\@fluentui\\react\\lib\\utilities\\src\\utilities\\keytips\\KeytipManager.ts"],"sourcesContent":["import { EventGroup, getId } from '../../Utilities';\nimport { KeytipEvents } from '../../utilities/keytips/KeytipConstants';\nimport type { IKeytipProps } from '../../Keytip';\n\nexport interface IUniqueKeytip {\n  uniqueID: string;\n  keytip: IKeytipProps;\n}\n\n/**\n * This class is responsible for handling registering, updating, and unregistering of keytips\n */\nexport class KeytipManager {\n  private static _instance: KeytipManager = new KeytipManager();\n\n  public keytips: { [key: string]: IUniqueKeytip } = {};\n  public persistedKeytips: { [key: string]: IUniqueKeytip } = {};\n  public sequenceMapping: { [key: string]: IKeytipProps } = {};\n\n  // This is (and should be) updated and kept in sync\n  // with the inKeytipMode in KeytipLayer.\n  public inKeytipMode = false;\n\n  // Boolean that gets checked before entering keytip mode by the KeytipLayer\n  // Used for an override in special cases (e.g. Disable entering keytip mode when a modal is shown)\n  public shouldEnterKeytipMode = true;\n\n  // Boolean to indicate whether to delay firing an event to update subscribers of\n  // keytip data changed.\n  public delayUpdatingKeytipChange = false;\n\n  /**\n   * Static function to get singleton KeytipManager instance\n   *\n   * @returns Singleton KeytipManager instance\n   */\n  public static getInstance(): KeytipManager {\n    return this._instance;\n  }\n\n  /**\n   * Initialization code to set set parameters to define\n   * how the KeytipManager handles keytip data.\n   *\n   * @param delayUpdatingKeytipChange - T/F if we should delay notifiying keytip subscribers\n   * of keytip changes\n   */\n  public init(delayUpdatingKeytipChange: boolean) {\n    this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;\n  }\n\n  /**\n   * Registers a keytip\n   *\n   * @param keytipProps - Keytip to register\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   * @returns Unique ID for this keytip\n   */\n  public register(keytipProps: IKeytipProps, persisted: boolean = false): string {\n    let props: IKeytipProps = keytipProps;\n    if (!persisted) {\n      // Add the overflowSetSequence if necessary\n      props = this.addParentOverflow(keytipProps);\n      this.sequenceMapping[props.keySequences.toString()] = props;\n    }\n    // Create a unique keytip\n    const uniqueKeytip: IUniqueKeytip = this._getUniqueKtp(props);\n    // Add to dictionary\n    persisted\n      ? (this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip)\n      : (this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip);\n\n    // We only want to add something new if we are currently showing keytip mode\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      const event = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;\n      EventGroup.raise(this, event, {\n        keytip: props,\n        uniqueID: uniqueKeytip.uniqueID,\n      });\n    }\n\n    return uniqueKeytip.uniqueID;\n  }\n\n  /**\n   * Update a keytip\n   *\n   * @param keytipProps - Keytip to update\n   * @param uniqueID - Unique ID of this keytip\n   */\n  public update(keytipProps: IKeytipProps, uniqueID: string): void {\n    const newKeytipProps = this.addParentOverflow(keytipProps);\n    const uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);\n    const oldKeyTip = this.keytips[uniqueID];\n    if (oldKeyTip) {\n      // Update everything except 'visible'\n      uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;\n      // Update keytip in this.keytips\n      this.keytips[uniqueID] = uniqueKeytip;\n\n      // Update the sequence to be up to date\n      delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];\n      this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;\n\n      // Raise event only if we are currently in keytip mode\n      if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n        EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {\n          keytip: uniqueKeytip.keytip,\n          uniqueID: uniqueKeytip.uniqueID,\n        });\n      }\n    }\n  }\n\n  /**\n   * Unregisters a keytip\n   *\n   * @param keytipToRemove - IKeytipProps of the keytip to remove\n   * @param uniqueID - Unique ID of this keytip\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   */\n  public unregister(keytipToRemove: IKeytipProps, uniqueID: string, persisted: boolean = false): void {\n    persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];\n    !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];\n\n    const event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;\n    // Update keytips only if we're in keytip mode\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      EventGroup.raise(this, event, {\n        keytip: keytipToRemove,\n        uniqueID: uniqueID,\n      });\n    }\n  }\n\n  /**\n   * Manual call to enter keytip mode\n   */\n  public enterKeytipMode(): void {\n    EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);\n  }\n\n  /**\n   * Manual call to exit keytip mode\n   */\n  public exitKeytipMode(): void {\n    EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);\n  }\n\n  /**\n   * Gets all IKeytipProps from this.keytips\n   *\n   * @returns All keytips stored in the manager\n   */\n  public getKeytips(): IKeytipProps[] {\n    return Object.keys(this.keytips).map(key => this.keytips[key].keytip);\n  }\n\n  /**\n   * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it\n   *\n   * @param keytipProps - Keytip props to add overflowSetSequence to if necessary\n   * @returns - Modified keytip props, if needed to be modified\n   */\n  public addParentOverflow(keytipProps: IKeytipProps): IKeytipProps {\n    const fullSequence = [...keytipProps.keySequences];\n    fullSequence.pop();\n    if (fullSequence.length !== 0) {\n      const parentKeytip = this.sequenceMapping[fullSequence.toString()];\n      if (parentKeytip && parentKeytip.overflowSetSequence) {\n        return {\n          ...keytipProps,\n          overflowSetSequence: parentKeytip.overflowSetSequence,\n        };\n      }\n    }\n    return keytipProps;\n  }\n\n  /**\n   * Public function to bind for overflow items that have a submenu\n   */\n  public menuExecute(overflowButtonSequences: string[], keytipSequences: string[]) {\n    EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {\n      overflowButtonSequences,\n      keytipSequences,\n    });\n  }\n\n  /**\n   * Creates an IUniqueKeytip object\n   *\n   * @param keytipProps - IKeytipProps\n   * @param uniqueID - Unique ID, will default to the next unique ID if not passed\n   * @returns IUniqueKeytip object\n   */\n  private _getUniqueKtp(keytipProps: IKeytipProps, uniqueID: string = getId()): IUniqueKeytip {\n    return { keytip: { ...keytipProps }, uniqueID };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}