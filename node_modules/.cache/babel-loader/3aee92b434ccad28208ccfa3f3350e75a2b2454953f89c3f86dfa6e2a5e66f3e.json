{"ast":null,"code":"import { getGlobalClassNames } from '../../Styling';\nvar inheritFont = {\n  fontFamily: 'inherit'\n};\nvar GlobalClassNames = {\n  root: 'ms-Fabric',\n  bodyThemed: 'ms-Fabric-bodyThemed'\n};\nexport var getStyles = function (props) {\n  var applyTheme = props.applyTheme,\n    className = props.className,\n    preventBlanketFontInheritance = props.preventBlanketFontInheritance,\n    theme = props.theme;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return {\n    root: [classNames.root, theme.fonts.medium, {\n      color: theme.palette.neutralPrimary\n    }, !preventBlanketFontInheritance && {\n      '& button': inheritFont,\n      '& input': inheritFont,\n      '& textarea': inheritFont\n    },\n    // apply theme to only if applyTheme is true\n    applyTheme && {\n      color: theme.semanticColors.bodyText,\n      backgroundColor: theme.semanticColors.bodyBackground\n    }, className],\n    bodyThemed: [{\n      backgroundColor: theme.semanticColors.bodyBackground\n    }]\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,mBAAmB,QAAQ,eAAe;AAGnD,IAAMC,WAAW,GAAG;EAAEC,UAAU,EAAE;AAAS,CAAE;AAE7C,IAAMC,gBAAgB,GAAG;EACvBC,IAAI,EAAE,WAAW;EACjBC,UAAU,EAAE;CACb;AAOD,OAAO,IAAMC,SAAS,GAAG,UAACC,KAAwB;EACxC,cAAU,GAAsDA,KAAK,WAA3D;IAAEC,SAAS,GAA2CD,KAAK,UAAhD;IAAEE,6BAA6B,GAAYF,KAAK,8BAAjB;IAAEG,KAAK,GAAKH,KAAK,MAAV;EACnE,IAAMI,UAAU,GAAGX,mBAAmB,CAACG,gBAAgB,EAAEO,KAAK,CAAC;EAC/D,OAAO;IACLN,IAAI,EAAE,CACJO,UAAU,CAACP,IAAI,EACfM,KAAK,CAACE,KAAK,CAACC,MAAM,EAClB;MACEC,KAAK,EAAEJ,KAAK,CAACK,OAAO,CAACC;KACtB,EACD,CAACP,6BAA6B,IAAI;MAChC,UAAU,EAAER,WAAW;MACvB,SAAS,EAAEA,WAAW;MACtB,YAAY,EAAEA;KACf;IACD;IACAgB,UAAU,IAAI;MACZH,KAAK,EAAEJ,KAAK,CAACQ,cAAc,CAACC,QAAQ;MACpCC,eAAe,EAAEV,KAAK,CAACQ,cAAc,CAACG;KACvC,EACDb,SAAS,CACV;IACDH,UAAU,EAAE,CACV;MACEe,eAAe,EAAEV,KAAK,CAACQ,cAAc,CAACG;KACvC;GAEJ;AACH,CAAC","names":["getGlobalClassNames","inheritFont","fontFamily","GlobalClassNames","root","bodyThemed","getStyles","props","className","preventBlanketFontInheritance","theme","classNames","fonts","medium","color","palette","neutralPrimary","applyTheme","semanticColors","bodyText","backgroundColor","bodyBackground"],"sources":["C:\\Users\\hpryz\\Documents\\_Programming\\web-project\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Fabric\\Fabric.styles.ts"],"sourcesContent":["import { getGlobalClassNames } from '../../Styling';\nimport type { IFabricStyleProps, IFabricStyles } from './Fabric.types';\n\nconst inheritFont = { fontFamily: 'inherit' };\n\nconst GlobalClassNames = {\n  root: 'ms-Fabric',\n  bodyThemed: 'ms-Fabric-bodyThemed',\n};\n\nexport interface IFabricClassNames {\n  root: string;\n  bodyThemed: string;\n}\n\nexport const getStyles = (props: IFabricStyleProps): IFabricStyles => {\n  const { applyTheme, className, preventBlanketFontInheritance, theme } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        color: theme.palette.neutralPrimary,\n      },\n      !preventBlanketFontInheritance && {\n        '& button': inheritFont,\n        '& input': inheritFont,\n        '& textarea': inheritFont,\n      },\n      // apply theme to only if applyTheme is true\n      applyTheme && {\n        color: theme.semanticColors.bodyText,\n        backgroundColor: theme.semanticColors.bodyBackground,\n      },\n      className,\n    ],\n    bodyThemed: [\n      {\n        backgroundColor: theme.semanticColors.bodyBackground,\n      },\n    ],\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}