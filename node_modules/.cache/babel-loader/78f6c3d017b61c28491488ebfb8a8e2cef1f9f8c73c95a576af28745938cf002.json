{"ast":null,"code":"var _layersByHostId = {};\nvar _layerHostsById = {};\nvar defaultHostId = 'fluent-default-layer-host';\nvar _defaultHostSelector = \"#\" + defaultHostId;\n/**\n * Register a layer for a given host id\n * @param hostId - Id of the layer host\n * @param layer - Layer instance\n */\nexport function registerLayer(hostId, callback) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n  _layersByHostId[hostId].push(callback);\n  var layerHosts = _layerHostsById[hostId];\n  if (layerHosts) {\n    for (var _i = 0, layerHosts_1 = layerHosts; _i < layerHosts_1.length; _i++) {\n      var layerHost = layerHosts_1[_i];\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n/**\n * Unregister a layer for a given host id\n * @param hostId - Id of the layer host\n * @param layer - Layer instance\n */\nexport function unregisterLayer(hostId, callback) {\n  var layers = _layersByHostId[hostId];\n  if (layers) {\n    var idx = layers.indexOf(callback);\n    if (idx >= 0) {\n      layers.splice(idx, 1);\n      if (layers.length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n  var layerHosts = _layerHostsById[hostId];\n  if (layerHosts) {\n    for (var _i = 0, layerHosts_2 = layerHosts; _i < layerHosts_2.length; _i++) {\n      var layerHost = layerHosts_2[_i];\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n/**\n * Gets the number of layers currently registered with a host id.\n * @param hostId - Id of the layer host.\n * @returns The number of layers currently registered with the host.\n */\nexport function getLayerCount(hostId) {\n  var layers = _layerHostsById[hostId];\n  return layers ? layers.length : 0;\n}\n/**\n * Gets the Layer Host instance associated with a hostId, if applicable.\n * @param hostId - Id of the layer host\n * @returns A component ref for the associated layer host.\n */\nexport function getLayerHost(hostId) {\n  var layerHosts = _layerHostsById[hostId];\n  return layerHosts && layerHosts[0] || undefined;\n}\n/**\n * Registers a Layer Host with an associated hostId.\n * @param hostId - Id of the layer host\n * @param layerHost - layer host instance\n */\nexport function registerLayerHost(hostId, layerHost) {\n  var layerHosts = _layerHostsById[hostId] || (_layerHostsById[hostId] = []);\n  // Insert this at the start of an array to avoid race conditions between mount and unmount.\n  // If a LayerHost is re-mounted, and mount of the new instance may occur before the unmount of the old one.\n  // Putting the new instance at the start of this array ensures that calls to `getLayerHost` will immediately\n  // get the new one even if the old one is around briefly.\n  layerHosts.unshift(layerHost);\n}\n/**\n * Unregisters a Layer Host from the associated hostId.\n * @param hostId - Id of the layer host\n * @param layerHost - layer host instance\n */\nexport function unregisterLayerHost(hostId, layerHost) {\n  var layerHosts = _layerHostsById[hostId];\n  if (layerHosts) {\n    var idx = layerHosts.indexOf(layerHost);\n    if (idx >= 0) {\n      layerHosts.splice(idx, 1);\n    }\n    if (layerHosts.length === 0) {\n      delete _layerHostsById[hostId];\n    }\n  }\n}\n/**\n * When no default layer host is provided, this function is executed to create the default host.\n */\nexport function createDefaultLayerHost(doc) {\n  var host = doc.createElement('div');\n  host.setAttribute('id', defaultHostId);\n  host.style.cssText = 'position:fixed;z-index:1000000';\n  doc === null || doc === void 0 ? void 0 : doc.body.appendChild(host);\n  return host;\n}\n/**\n * This function can be optionally called to clean up the default layer host as needed.\n */\nexport function cleanupDefaultLayerHost(doc) {\n  var host = doc.querySelector(\"#\" + defaultHostId);\n  if (host) {\n    doc.removeChild(host);\n  }\n}\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\nexport function notifyHostChanged(id) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(function (callback) {\n      return callback();\n    });\n  }\n}\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsy value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\nexport function setDefaultTarget(selector) {\n  _defaultHostSelector = selector;\n}\n/**\n * Get the default target selector when determining a host\n */\nexport function getDefaultTarget() {\n  return _defaultHostSelector;\n}","map":{"version":3,"mappings":"AAEA,IAAMA,eAAe,GAAyC,EAAE;AAChE,IAAMC,eAAe,GAAuC,EAAE;AAE9D,IAAMC,aAAa,GAAG,2BAA2B;AACjD,IAAIC,oBAAoB,GAAuB,MAAID,aAAe;AAElE;;;;;AAKA,OAAM,SAAUE,aAAa,CAACC,MAAc,EAAEC,QAAoB;EAChE,IAAI,CAACN,eAAe,CAACK,MAAM,CAAC,EAAE;IAC5BL,eAAe,CAACK,MAAM,CAAC,GAAG,EAAE;;EAG9BL,eAAe,CAACK,MAAM,CAAC,CAACE,IAAI,CAACD,QAAQ,CAAC;EAEtC,IAAME,UAAU,GAAGP,eAAe,CAACI,MAAM,CAAC;EAE1C,IAAIG,UAAU,EAAE;IACd,KAAwB,UAAU,EAAVC,yBAAU,EAAVC,wBAAU,EAAVA,IAAU,EAAE;MAA/B,IAAMC,SAAS;MAClBA,SAAS,CAACC,mBAAmB,EAAE;;;AAGrC;AAEA;;;;;AAKA,OAAM,SAAUC,eAAe,CAACR,MAAc,EAAEC,QAAoB;EAClE,IAAMQ,MAAM,GAAGd,eAAe,CAACK,MAAM,CAAC;EAEtC,IAAIS,MAAM,EAAE;IACV,IAAMC,GAAG,GAAGD,MAAM,CAACE,OAAO,CAACV,QAAQ,CAAC;IACpC,IAAIS,GAAG,IAAI,CAAC,EAAE;MACZD,MAAM,CAACG,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;MAErB,IAAID,MAAM,CAACI,MAAM,KAAK,CAAC,EAAE;QACvB,OAAOlB,eAAe,CAACK,MAAM,CAAC;;;;EAKpC,IAAMG,UAAU,GAAGP,eAAe,CAACI,MAAM,CAAC;EAE1C,IAAIG,UAAU,EAAE;IACd,KAAwB,UAAU,EAAVW,yBAAU,EAAVT,wBAAU,EAAVA,IAAU,EAAE;MAA/B,IAAMC,SAAS;MAClBA,SAAS,CAACC,mBAAmB,EAAE;;;AAGrC;AAEA;;;;;AAKA,OAAM,SAAUQ,aAAa,CAACf,MAAc;EAC1C,IAAMS,MAAM,GAAGb,eAAe,CAACI,MAAM,CAAC;EAEtC,OAAOS,MAAM,GAAGA,MAAM,CAACI,MAAM,GAAG,CAAC;AACnC;AAEA;;;;;AAKA,OAAM,SAAUG,YAAY,CAAChB,MAAc;EACzC,IAAMG,UAAU,GAAGP,eAAe,CAACI,MAAM,CAAC;EAE1C,OAAQG,UAAU,IAAIA,UAAU,CAAC,CAAC,CAAC,IAAKc,SAAS;AACnD;AAEA;;;;;AAKA,OAAM,SAAUC,iBAAiB,CAAClB,MAAc,EAAEM,SAAqB;EACrE,IAAMH,UAAU,GAAGP,eAAe,CAACI,MAAM,CAAC,KAAKJ,eAAe,CAACI,MAAM,CAAC,GAAG,EAAE,CAAC;EAE5E;EACA;EACA;EACA;EACAG,UAAU,CAACgB,OAAO,CAACb,SAAS,CAAC;AAC/B;AAEA;;;;;AAKA,OAAM,SAAUc,mBAAmB,CAACpB,MAAc,EAAEM,SAAqB;EACvE,IAAMH,UAAU,GAAGP,eAAe,CAACI,MAAM,CAAC;EAE1C,IAAIG,UAAU,EAAE;IACd,IAAMO,GAAG,GAAGP,UAAU,CAACQ,OAAO,CAACL,SAAS,CAAC;IAEzC,IAAII,GAAG,IAAI,CAAC,EAAE;MACZP,UAAU,CAACS,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;;IAG3B,IAAIP,UAAU,CAACU,MAAM,KAAK,CAAC,EAAE;MAC3B,OAAOjB,eAAe,CAACI,MAAM,CAAC;;;AAGpC;AAEA;;;AAGA,OAAM,SAAUqB,sBAAsB,CAACC,GAAa;EAClD,IAAMC,IAAI,GAAGD,GAAG,CAACE,aAAa,CAAC,KAAK,CAAC;EACrCD,IAAI,CAACE,YAAY,CAAC,IAAI,EAAE5B,aAAa,CAAC;EACrC0B,IAAoB,CAACG,KAAK,CAACC,OAAO,GAAG,gCAAgC;EAEtEL,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEM,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;EAE3B,OAAOA,IAAI;AACb;AAEA;;;AAGA,OAAM,SAAUO,uBAAuB,CAACR,GAAa;EACnD,IAAMC,IAAI,GAAGD,GAAG,CAACS,aAAa,CAAC,MAAIlC,aAAe,CAAC;EAEnD,IAAI0B,IAAI,EAAE;IACRD,GAAG,CAACU,WAAW,CAACT,IAAI,CAAC;;AAEzB;AAEA;;;;AAIA,OAAM,SAAUU,iBAAiB,CAACC,EAAU;EAC1C,IAAIvC,eAAe,CAACuC,EAAE,CAAC,EAAE;IACvBvC,eAAe,CAACuC,EAAE,CAAC,CAACC,OAAO,CAAC,kBAAQ;MAAI,eAAQ,EAAE;IAAV,CAAU,CAAC;;AAEvD;AAEA;;;;;;;;AAQA,OAAM,SAAUC,gBAAgB,CAACC,QAAiB;EAChDvC,oBAAoB,GAAGuC,QAAQ;AACjC;AAEA;;;AAGA,OAAM,SAAUC,gBAAgB;EAC9B,OAAOxC,oBAAoB;AAC7B","names":["_layersByHostId","_layerHostsById","defaultHostId","_defaultHostSelector","registerLayer","hostId","callback","push","layerHosts","layerHosts_1","_i","layerHost","notifyLayersChanged","unregisterLayer","layers","idx","indexOf","splice","length","layerHosts_2","getLayerCount","getLayerHost","undefined","registerLayerHost","unshift","unregisterLayerHost","createDefaultLayerHost","doc","host","createElement","setAttribute","style","cssText","body","appendChild","cleanupDefaultLayerHost","querySelector","removeChild","notifyHostChanged","id","forEach","setDefaultTarget","selector","getDefaultTarget"],"sources":["C:\\Users\\hpryz\\Documents\\_Programming\\web-project\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Layer\\Layer.notification.ts"],"sourcesContent":["import { ILayerHost } from './LayerHost.types';\n\nconst _layersByHostId: { [hostId: string]: (() => void)[] } = {};\nconst _layerHostsById: { [hostId: string]: ILayerHost[] } = {};\n\nconst defaultHostId = 'fluent-default-layer-host';\nlet _defaultHostSelector: string | undefined = `#${defaultHostId}`;\n\n/**\n * Register a layer for a given host id\n * @param hostId - Id of the layer host\n * @param layer - Layer instance\n */\nexport function registerLayer(hostId: string, callback: () => void) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(callback);\n\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (const layerHost of layerHosts) {\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n\n/**\n * Unregister a layer for a given host id\n * @param hostId - Id of the layer host\n * @param layer - Layer instance\n */\nexport function unregisterLayer(hostId: string, callback: () => void) {\n  const layers = _layersByHostId[hostId];\n\n  if (layers) {\n    const idx = layers.indexOf(callback);\n    if (idx >= 0) {\n      layers.splice(idx, 1);\n\n      if (layers.length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (const layerHost of layerHosts) {\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n\n/**\n * Gets the number of layers currently registered with a host id.\n * @param hostId - Id of the layer host.\n * @returns The number of layers currently registered with the host.\n */\nexport function getLayerCount(hostId: string): number {\n  const layers = _layerHostsById[hostId];\n\n  return layers ? layers.length : 0;\n}\n\n/**\n * Gets the Layer Host instance associated with a hostId, if applicable.\n * @param hostId - Id of the layer host\n * @returns A component ref for the associated layer host.\n */\nexport function getLayerHost(hostId: string): ILayerHost | undefined {\n  const layerHosts = _layerHostsById[hostId];\n\n  return (layerHosts && layerHosts[0]) || undefined;\n}\n\n/**\n * Registers a Layer Host with an associated hostId.\n * @param hostId - Id of the layer host\n * @param layerHost - layer host instance\n */\nexport function registerLayerHost(hostId: string, layerHost: ILayerHost): void {\n  const layerHosts = _layerHostsById[hostId] || (_layerHostsById[hostId] = []);\n\n  // Insert this at the start of an array to avoid race conditions between mount and unmount.\n  // If a LayerHost is re-mounted, and mount of the new instance may occur before the unmount of the old one.\n  // Putting the new instance at the start of this array ensures that calls to `getLayerHost` will immediately\n  // get the new one even if the old one is around briefly.\n  layerHosts.unshift(layerHost);\n}\n\n/**\n * Unregisters a Layer Host from the associated hostId.\n * @param hostId - Id of the layer host\n * @param layerHost - layer host instance\n */\nexport function unregisterLayerHost(hostId: string, layerHost: ILayerHost): void {\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    const idx = layerHosts.indexOf(layerHost);\n\n    if (idx >= 0) {\n      layerHosts.splice(idx, 1);\n    }\n\n    if (layerHosts.length === 0) {\n      delete _layerHostsById[hostId];\n    }\n  }\n}\n\n/**\n * When no default layer host is provided, this function is executed to create the default host.\n */\nexport function createDefaultLayerHost(doc: Document): Node | null {\n  const host = doc.createElement('div');\n  host.setAttribute('id', defaultHostId);\n  (host as HTMLElement).style.cssText = 'position:fixed;z-index:1000000';\n\n  doc?.body.appendChild(host);\n\n  return host;\n}\n\n/**\n * This function can be optionally called to clean up the default layer host as needed.\n */\nexport function cleanupDefaultLayerHost(doc: Document) {\n  const host = doc.querySelector(`#${defaultHostId}`);\n\n  if (host) {\n    doc.removeChild(host);\n  }\n}\n\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\nexport function notifyHostChanged(id: string) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(callback => callback());\n  }\n}\n\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsy value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\nexport function setDefaultTarget(selector?: string) {\n  _defaultHostSelector = selector;\n}\n\n/**\n * Get the default target selector when determining a host\n */\nexport function getDefaultTarget(): string | undefined {\n  return _defaultHostSelector;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}