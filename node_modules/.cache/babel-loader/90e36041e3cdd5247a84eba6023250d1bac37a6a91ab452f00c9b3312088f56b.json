{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { buttonProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { getIsChecked, isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nvar ContextualMenuButton = /** @class */function (_super) {\n  __extends(ContextualMenuButton, _super);\n  function ContextualMenuButton() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._btn = React.createRef();\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n    _this._renderAriaDescription = function (ariaDescription, className) {\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n      return ariaDescription ? React.createElement(\"span\", {\n        id: _this._ariaDescriptionId,\n        className: className\n      }, ariaDescription) : null;\n    };\n    _this._getSubmenuTarget = function () {\n      return _this._btn.current ? _this._btn.current : undefined;\n    };\n    return _this;\n  }\n  ContextualMenuButton.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      item = _a.item,\n      classNames = _a.classNames,\n      index = _a.index,\n      focusableElementIndex = _a.focusableElementIndex,\n      totalItemCount = _a.totalItemCount,\n      hasCheckmarks = _a.hasCheckmarks,\n      hasIcons = _a.hasIcons,\n      _b = _a.contextualMenuItemAs,\n      ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n      expandedMenuItemKey = _a.expandedMenuItemKey,\n      onItemMouseDown = _a.onItemMouseDown,\n      onItemClick = _a.onItemClick,\n      openSubMenu = _a.openSubMenu,\n      dismissSubMenu = _a.dismissSubMenu,\n      dismissMenu = _a.dismissMenu;\n    var isChecked = getIsChecked(item);\n    var canCheck = isChecked !== null;\n    var defaultRole = getMenuItemAriaRole(item);\n    var itemHasSubmenu = hasSubmenu(item);\n    var itemProps = item.itemProps,\n      ariaLabel = item.ariaLabel,\n      ariaDescription = item.ariaDescription;\n    var buttonNativeProperties = getNativeProps(item, buttonProperties);\n    // Do not add the disabled attribute to the button so that it is focusable\n    delete buttonNativeProperties.disabled;\n    var itemRole = item.role || defaultRole;\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n    var ariaDescribedByIds = mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : undefined, buttonNativeProperties['aria-describedby']);\n    var itemButtonProperties = {\n      className: classNames.root,\n      onClick: this._onItemClick,\n      onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,\n      onMouseEnter: this._onItemMouseEnter,\n      onMouseLeave: this._onItemMouseLeave,\n      onMouseDown: function (ev) {\n        return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;\n      },\n      onMouseMove: this._onItemMouseMove,\n      href: item.href,\n      title: item.title,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedByIds,\n      'aria-haspopup': itemHasSubmenu || undefined,\n      'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n      'aria-posinset': focusableElementIndex + 1,\n      'aria-setsize': totalItemCount,\n      'aria-disabled': isItemDisabled(item),\n      'aria-checked': (itemRole === 'menuitemcheckbox' || itemRole === 'menuitemradio') && canCheck ? !!isChecked : undefined,\n      'aria-selected': itemRole === 'menuitem' && canCheck ? !!isChecked : undefined,\n      role: itemRole,\n      // eslint-disable-next-line deprecation/deprecation\n      style: item.style\n    };\n    var keytipProps = item.keytipProps;\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n    return React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      ariaDescribedBy: ariaDescribedByIds,\n      disabled: isItemDisabled(item)\n    }, function (keytipAttributes) {\n      return React.createElement(\"button\", __assign({\n        ref: _this._btn\n      }, buttonNativeProperties, itemButtonProperties, keytipAttributes), React.createElement(ChildrenRenderer, __assign({\n        componentRef: item.componentRef,\n        item: item,\n        classNames: classNames,\n        index: index,\n        onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,\n        hasIcons: hasIcons,\n        openSubMenu: openSubMenu,\n        dismissSubMenu: dismissSubMenu,\n        dismissMenu: dismissMenu,\n        getSubmenuTarget: _this._getSubmenuTarget\n      }, itemProps)), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));\n    });\n  };\n  return ContextualMenuButton;\n}(ContextualMenuItemWrapper);\nexport { ContextualMenuButton };","map":{"version":3,"mappings":"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","names":["React","buttonProperties","getNativeProps","memoizeFunction","getId","mergeAriaAttributeValues","ContextualMenuItemWrapper","KeytipData","getIsChecked","isItemDisabled","hasSubmenu","getMenuItemAriaRole","ContextualMenuItem","__extends","_this","createRef","keytipProps","hasMenu","ariaDescription","className","id","_ariaDescriptionId","_btn","current","undefined","ContextualMenuButton","props","item","classNames","index","focusableElementIndex","totalItemCount","hasCheckmarks","hasIcons","_b","ChildrenRenderer","expandedMenuItemKey","onItemMouseDown","onItemClick","openSubMenu","dismissSubMenu","dismissMenu","isChecked","canCheck","defaultRole","itemHasSubmenu","ariaLabel","buttonNativeProperties","disabled","itemRole","role","ariaDescribedByIds","ariaDescribedBy","itemButtonProperties","root","onClick","_onItemClick","onKeyDown","_onItemKeyDown","onMouseEnter","_onItemMouseEnter","onMouseLeave","_onItemMouseLeave","onMouseDown","ev","onMouseMove","_onItemMouseMove","href","title","key","style","_getMemoizedMenuButtonKeytipProps","keytipAttributes","ref","componentRef","onCheckmarkClick","getSubmenuTarget","_getSubmenuTarget","itemProps","_renderAriaDescription","screenReaderText"],"sources":["C:\\Users\\hpryz\\Documents\\_Programming\\web-project\\node_modules\\@fluentui\\react\\lib\\components\\ContextualMenu\\src\\components\\ContextualMenu\\ContextualMenuItemWrapper\\ContextualMenuButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { buttonProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { getIsChecked, isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport type { IKeytipDataProps } from '../../../KeytipData';\nimport type { IKeytipProps } from '../../../Keytip';\n\nexport class ContextualMenuButton extends ContextualMenuItemWrapper {\n  private _btn = React.createRef<HTMLButtonElement>();\n  private _ariaDescriptionId: string;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  public render() {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      expandedMenuItemKey,\n      onItemMouseDown,\n      onItemClick,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    const isChecked: boolean | null | undefined = getIsChecked(item);\n    const canCheck: boolean = isChecked !== null;\n    const defaultRole = getMenuItemAriaRole(item);\n    const itemHasSubmenu = hasSubmenu(item);\n    const { itemProps, ariaLabel, ariaDescription } = item;\n\n    const buttonNativeProperties = getNativeProps<React.ButtonHTMLAttributes<HTMLButtonElement>>(\n      item,\n      buttonProperties,\n    );\n    // Do not add the disabled attribute to the button so that it is focusable\n    delete buttonNativeProperties.disabled;\n\n    const itemRole = item.role || defaultRole;\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n    const ariaDescribedByIds = mergeAriaAttributeValues(\n      item.ariaDescribedBy,\n      ariaDescription ? this._ariaDescriptionId : undefined,\n      buttonNativeProperties['aria-describedby'],\n    );\n\n    const itemButtonProperties = {\n      className: classNames.root,\n      onClick: this._onItemClick,\n      onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,\n      onMouseEnter: this._onItemMouseEnter,\n      onMouseLeave: this._onItemMouseLeave,\n      onMouseDown: (ev: React.MouseEvent<HTMLButtonElement>) =>\n        onItemMouseDown ? onItemMouseDown(item, ev) : undefined,\n      onMouseMove: this._onItemMouseMove,\n      href: item.href,\n      title: item.title,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedByIds,\n      'aria-haspopup': itemHasSubmenu || undefined,\n      'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n      'aria-posinset': focusableElementIndex + 1,\n      'aria-setsize': totalItemCount,\n      'aria-disabled': isItemDisabled(item),\n      'aria-checked':\n        (itemRole === 'menuitemcheckbox' || itemRole === 'menuitemradio') && canCheck ? !!isChecked : undefined,\n      'aria-selected': itemRole === 'menuitem' && canCheck ? !!isChecked : undefined,\n      role: itemRole,\n      // eslint-disable-next-line deprecation/deprecation\n      style: item.style,\n    };\n\n    let { keytipProps } = item;\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    return (\n      <KeytipData keytipProps={keytipProps} ariaDescribedBy={ariaDescribedByIds} disabled={isItemDisabled(item)}>\n        {(keytipAttributes: IKeytipDataProps): JSX.Element => (\n          <button ref={this._btn} {...buttonNativeProperties} {...itemButtonProperties} {...keytipAttributes}>\n            <ChildrenRenderer\n              componentRef={item.componentRef}\n              item={item}\n              classNames={classNames}\n              index={index}\n              onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n              hasIcons={hasIcons}\n              openSubMenu={openSubMenu}\n              dismissSubMenu={dismissSubMenu}\n              dismissMenu={dismissMenu}\n              getSubmenuTarget={this._getSubmenuTarget}\n              {...itemProps}\n            />\n            {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n          </button>\n        )}\n      </KeytipData>\n    );\n  }\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._btn.current ? this._btn.current : undefined;\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}