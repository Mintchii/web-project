{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { elementContains, getNativeProps, divProperties, getFirstTabbable, getLastTabbable, getNextElement, focusAsync, getPropsWithDefaults, modalize, on } from '../../Utilities';\nimport { useId, useConst, useMergedRefs, useEventCallback, usePrevious, useUnmount } from '@fluentui/react-hooks';\nimport { useDocument } from '../../WindowProvider';\nvar COMPONENT_NAME = 'FocusTrapZone';\nvar DEFAULT_PROPS = {\n  disabled: false,\n  disableFirstFocus: false,\n  forceFocusInsideTrap: true,\n  isClickableOutsideFocusTrap: false\n};\nvar useComponentRef = function (componentRef, previouslyFocusedElement, focusFTZ) {\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      get previouslyFocusedElement() {\n        return previouslyFocusedElement;\n      },\n      focus: focusFTZ\n    };\n  }, [focusFTZ, previouslyFocusedElement]);\n};\nexport var FocusTrapZone = React.forwardRef(function (propsWithoutDefaults, ref) {\n  var _a;\n  var root = React.useRef(null);\n  var firstBumper = React.useRef(null);\n  var lastBumper = React.useRef(null);\n  var mergedRootRef = useMergedRefs(root, ref);\n  var doc = useDocument();\n  var isFirstRender = (_a = usePrevious(false)) !== null && _a !== void 0 ? _a : true;\n  var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n  var internalState = useConst({\n    hasFocus: false,\n    focusStackId: useId('ftz-', props.id)\n  });\n  var children = props.children,\n    componentRef = props.componentRef,\n    disabled = props.disabled,\n    disableFirstFocus = props.disableFirstFocus,\n    forceFocusInsideTrap = props.forceFocusInsideTrap,\n    focusPreviouslyFocusedInnerElement = props.focusPreviouslyFocusedInnerElement,\n    // eslint-disable-next-line deprecation/deprecation\n    firstFocusableSelector = props.firstFocusableSelector,\n    firstFocusableTarget = props.firstFocusableTarget,\n    // eslint-disable-next-line deprecation/deprecation\n    _b = props.disableRestoreFocus,\n    // eslint-disable-next-line deprecation/deprecation\n    disableRestoreFocus = _b === void 0 ? props.ignoreExternalFocusing : _b,\n    isClickableOutsideFocusTrap = props.isClickableOutsideFocusTrap,\n    enableAriaHiddenSiblings = props.enableAriaHiddenSiblings;\n  var bumperProps = {\n    'aria-hidden': true,\n    style: {\n      pointerEvents: 'none',\n      position: 'fixed' // 'fixed' prevents browsers from scrolling to bumpers when viewport does not contain them\n    },\n\n    tabIndex: disabled ? -1 : 0,\n    'data-is-visible': true,\n    'data-is-focus-trap-zone-bumper': true\n  };\n  var focusElementAsync = React.useCallback(function (element) {\n    if (element !== firstBumper.current && element !== lastBumper.current) {\n      focusAsync(element);\n    }\n  }, []);\n  /**\n   * Callback to force focus into FTZ (named to avoid overlap with global focus() callback).\n   * useEventCallback always returns the same callback reference but updates the implementation\n   * every render to avoid stale captured values.\n   */\n  var focusFTZ = useEventCallback(function () {\n    if (!root.current) {\n      return; // not done mounting\n    }\n\n    var previouslyFocusedElementInTrapZone = internalState.previouslyFocusedElementInTrapZone;\n    if (focusPreviouslyFocusedInnerElement && previouslyFocusedElementInTrapZone && elementContains(root.current, previouslyFocusedElementInTrapZone)) {\n      // focus on the last item that had focus in the zone before we left the zone\n      focusElementAsync(previouslyFocusedElementInTrapZone);\n      return;\n    }\n    var firstFocusableChild = null;\n    if (typeof firstFocusableTarget === 'string') {\n      firstFocusableChild = root.current.querySelector(firstFocusableTarget);\n    } else if (firstFocusableTarget) {\n      firstFocusableChild = firstFocusableTarget(root.current);\n    } else if (firstFocusableSelector) {\n      var focusSelector = typeof firstFocusableSelector === 'string' ? firstFocusableSelector : firstFocusableSelector();\n      firstFocusableChild = root.current.querySelector('.' + focusSelector);\n    }\n    // Fall back to first element if query selector did not match any elements.\n    if (!firstFocusableChild) {\n      firstFocusableChild = getNextElement(root.current, root.current.firstChild, false, false, false, true);\n    }\n    if (firstFocusableChild) {\n      focusElementAsync(firstFocusableChild);\n    }\n  });\n  /** Used in root div focus/blur handlers */\n  var focusBumper = function (isFirstBumper) {\n    if (disabled || !root.current) {\n      return;\n    }\n    var nextFocusable = isFirstBumper === internalState.hasFocus ? getLastTabbable(root.current, lastBumper.current, true, false) : getFirstTabbable(root.current, firstBumper.current, true, false);\n    if (nextFocusable) {\n      if (nextFocusable === firstBumper.current || nextFocusable === lastBumper.current) {\n        // This can happen when FTZ contains no tabbable elements.\n        // focusFTZ() will take care of finding a focusable element in FTZ.\n        focusFTZ();\n      } else {\n        nextFocusable.focus();\n      }\n    }\n  };\n  /** Root div blur handler (doesn't need useCallback since it's for a native element) */\n  var onRootBlurCapture = function (ev) {\n    var _a;\n    (_a = props.onBlurCapture) === null || _a === void 0 ? void 0 : _a.call(props, ev);\n    var relatedTarget = ev.relatedTarget;\n    if (ev.relatedTarget === null) {\n      // In IE11, due to lack of support, event.relatedTarget is always\n      // null making every onBlur call to be \"outside\" of the root\n      // even when it's not. Using document.activeElement is another way\n      // for us to be able to get what the relatedTarget without relying\n      // on the event\n      relatedTarget = doc.activeElement;\n    }\n    if (!elementContains(root.current, relatedTarget)) {\n      internalState.hasFocus = false;\n    }\n  };\n  /** Root div focus handler (doesn't need useCallback since it's for a native element) */\n  var onRootFocusCapture = function (ev) {\n    var _a;\n    (_a = props.onFocusCapture) === null || _a === void 0 ? void 0 : _a.call(props, ev);\n    if (ev.target === firstBumper.current) {\n      focusBumper(true);\n    } else if (ev.target === lastBumper.current) {\n      focusBumper(false);\n    }\n    internalState.hasFocus = true;\n    if (ev.target !== ev.currentTarget && !(ev.target === firstBumper.current || ev.target === lastBumper.current)) {\n      // every time focus changes within the trap zone, remember the focused element so that\n      // it can be restored if focus leaves the pane and returns via keystroke (i.e. via a call to this.focus(true))\n      internalState.previouslyFocusedElementInTrapZone = ev.target;\n    }\n  };\n  /** Called to restore focus on unmount or props change. (useEventCallback ensures latest prop values are used.) */\n  var returnFocusToInitiator = useEventCallback(function (elementToFocusOnDismiss) {\n    FocusTrapZone.focusStack = FocusTrapZone.focusStack.filter(function (value) {\n      return internalState.focusStackId !== value;\n    });\n    if (!doc) {\n      return;\n    }\n    var activeElement = doc.activeElement;\n    if (!disableRestoreFocus && typeof (elementToFocusOnDismiss === null || elementToFocusOnDismiss === void 0 ? void 0 : elementToFocusOnDismiss.focus) === 'function' && (\n    // only restore focus if the current focused element is within the FTZ, or if nothing is focused\n    elementContains(root.current, activeElement) || activeElement === doc.body)) {\n      focusElementAsync(elementToFocusOnDismiss);\n    }\n  });\n  /** Called in window event handlers. (useEventCallback ensures latest prop values are used.) */\n  var forceFocusOrClickInTrap = useEventCallback(function (ev) {\n    // be sure to use the latest values here\n    if (disabled) {\n      return;\n    }\n    if (internalState.focusStackId === FocusTrapZone.focusStack.slice(-1)[0]) {\n      var targetElement = ev.target;\n      if (targetElement && !elementContains(root.current, targetElement)) {\n        if (doc && doc.activeElement === doc.body) {\n          setTimeout(function () {\n            if (doc && doc.activeElement === doc.body) {\n              focusFTZ();\n              internalState.hasFocus = true; // set focus here since we stop event propagation\n            }\n          }, 0);\n        } else {\n          focusFTZ();\n          internalState.hasFocus = true; // set focus here since we stop event propagation\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  });\n  // Update window event handlers when relevant props change\n  React.useEffect(function () {\n    var disposables = [];\n    if (forceFocusInsideTrap) {\n      disposables.push(on(window, 'focus', forceFocusOrClickInTrap, true));\n    }\n    if (!isClickableOutsideFocusTrap) {\n      disposables.push(on(window, 'click', forceFocusOrClickInTrap, true));\n    }\n    return function () {\n      disposables.forEach(function (dispose) {\n        return dispose();\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when these two props change\n  }, [forceFocusInsideTrap, isClickableOutsideFocusTrap]);\n  // On prop change or first render, focus the FTZ and update focusStack if appropriate\n  React.useEffect(function () {\n    // Do nothing if disabled, or if it's a re-render and forceFocusInsideTrap is false\n    // (to match existing behavior, the FTZ handles first focus even if forceFocusInsideTrap\n    // is false, though it's debatable whether it should do this)\n    if (disabled || !isFirstRender && !forceFocusInsideTrap || !root.current) {\n      return;\n    }\n    // Transition from forceFocusInsideTrap / FTZ disabled to enabled (or initial mount)\n    FocusTrapZone.focusStack.push(internalState.focusStackId);\n    var elementToFocusOnDismiss = props.elementToFocusOnDismiss || doc.activeElement;\n    if (!disableFirstFocus && !elementContains(root.current, elementToFocusOnDismiss)) {\n      focusFTZ();\n    }\n    // To match existing behavior, always return focus on cleanup (even if we didn't handle\n    // initial focus), but it's debatable whether that's correct\n    return function () {\n      return returnFocusToInitiator(elementToFocusOnDismiss);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when these two props change\n  }, [forceFocusInsideTrap, disabled]);\n  // Handle modalization separately from first focus\n  React.useEffect(function () {\n    if (!disabled && enableAriaHiddenSiblings) {\n      var unmodalize = modalize(root.current);\n      return unmodalize;\n    }\n  }, [disabled, enableAriaHiddenSiblings, root]);\n  // Cleanup lifecyle method for internalState.\n  useUnmount(function () {\n    // Dispose of element references so the DOM Nodes can be garbage-collected\n    delete internalState.previouslyFocusedElementInTrapZone;\n  });\n  useComponentRef(componentRef, internalState.previouslyFocusedElementInTrapZone, focusFTZ);\n  return React.createElement(\"div\", __assign({\n    \"aria-labelledby\": props.ariaLabelledBy\n  }, getNativeProps(props, divProperties), {\n    ref: mergedRootRef,\n    onFocusCapture: onRootFocusCapture,\n    onBlurCapture: onRootBlurCapture\n  }), React.createElement(\"div\", __assign({}, bumperProps, {\n    ref: firstBumper\n  })), children, React.createElement(\"div\", __assign({}, bumperProps, {\n    ref: lastBumper\n  })));\n});\nFocusTrapZone.displayName = COMPONENT_NAME;\nFocusTrapZone.focusStack = [];","map":{"version":3,"mappings":"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","names":["React","elementContains","getNativeProps","divProperties","getFirstTabbable","getLastTabbable","getNextElement","focusAsync","getPropsWithDefaults","modalize","on","useId","useConst","useMergedRefs","useEventCallback","usePrevious","useUnmount","useDocument","COMPONENT_NAME","DEFAULT_PROPS","disabled","disableFirstFocus","forceFocusInsideTrap","isClickableOutsideFocusTrap","useComponentRef","componentRef","previouslyFocusedElement","focusFTZ","useImperativeHandle","focus","FocusTrapZone","forwardRef","propsWithoutDefaults","ref","root","useRef","firstBumper","lastBumper","mergedRootRef","doc","isFirstRender","props","internalState","hasFocus","focusStackId","id","focusPreviouslyFocusedInnerElement","firstFocusableSelector","firstFocusableTarget","_b","disableRestoreFocus","ignoreExternalFocusing","enableAriaHiddenSiblings","bumperProps","style","pointerEvents","position","tabIndex","focusElementAsync","useCallback","element","current","previouslyFocusedElementInTrapZone","firstFocusableChild","querySelector","focusSelector","firstChild","focusBumper","isFirstBumper","nextFocusable","onRootBlurCapture","ev","onBlurCapture","relatedTarget","activeElement","onRootFocusCapture","onFocusCapture","target","currentTarget","returnFocusToInitiator","elementToFocusOnDismiss","focusStack","filter","value","body","forceFocusOrClickInTrap","slice","targetElement","setTimeout","preventDefault","stopPropagation","useEffect","disposables","push","window","forEach","unmodalize","ariaLabelledBy","children","displayName"],"sources":["C:\\Users\\hpryz\\Documents\\_Programming\\web-project\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\FocusTrapZone\\FocusTrapZone.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  elementContains,\n  getNativeProps,\n  divProperties,\n  getFirstTabbable,\n  getLastTabbable,\n  getNextElement,\n  focusAsync,\n  getPropsWithDefaults,\n  modalize,\n  on,\n} from '../../Utilities';\nimport { useId, useConst, useMergedRefs, useEventCallback, usePrevious, useUnmount } from '@fluentui/react-hooks';\nimport { useDocument } from '../../WindowProvider';\nimport type { IRefObject } from '../../Utilities';\nimport type { IFocusTrapZoneProps, IFocusTrapZone } from './FocusTrapZone.types';\n\ninterface IFocusTrapZoneInternalState {\n  previouslyFocusedElementInTrapZone?: HTMLElement;\n  hasFocus: boolean;\n  /** ID tracked in focusStack. Don't respect prop updates in case the ID changes while the FTZ is active. */\n  focusStackId: string;\n}\n\nconst COMPONENT_NAME = 'FocusTrapZone';\n\nconst DEFAULT_PROPS = {\n  disabled: false,\n  disableFirstFocus: false,\n  forceFocusInsideTrap: true,\n  isClickableOutsideFocusTrap: false,\n};\n\nconst useComponentRef = (\n  componentRef: IRefObject<IFocusTrapZone> | undefined,\n  previouslyFocusedElement: HTMLElement | undefined,\n  focusFTZ: () => void,\n) => {\n  React.useImperativeHandle(\n    componentRef,\n    () => ({\n      get previouslyFocusedElement() {\n        return previouslyFocusedElement;\n      },\n      focus: focusFTZ,\n    }),\n    [focusFTZ, previouslyFocusedElement],\n  );\n};\n\nexport const FocusTrapZone: React.FunctionComponent<IFocusTrapZoneProps> & {\n  /**\n   * Stack of active FocusTrapZone identifiers, exposed for testing purposes only.\n   * (This is always set, just marked as optional to avoid a cast in the component definition.)\n   * @internal\n   */\n  focusStack?: string[];\n} = React.forwardRef<HTMLDivElement, IFocusTrapZoneProps>((propsWithoutDefaults, ref) => {\n  const root = React.useRef<HTMLDivElement>(null);\n  const firstBumper = React.useRef<HTMLDivElement>(null);\n  const lastBumper = React.useRef<HTMLDivElement>(null);\n  const mergedRootRef = useMergedRefs(root, ref) as React.Ref<HTMLDivElement>;\n  const doc = useDocument();\n\n  const isFirstRender = usePrevious(false) ?? true;\n\n  const props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n\n  const internalState = useConst<IFocusTrapZoneInternalState>({\n    hasFocus: false,\n    focusStackId: useId('ftz-', props.id),\n  });\n\n  const {\n    children,\n    componentRef,\n    disabled,\n    disableFirstFocus,\n    forceFocusInsideTrap,\n    focusPreviouslyFocusedInnerElement,\n    // eslint-disable-next-line deprecation/deprecation\n    firstFocusableSelector,\n    firstFocusableTarget,\n    // eslint-disable-next-line deprecation/deprecation\n    disableRestoreFocus = props.ignoreExternalFocusing,\n    isClickableOutsideFocusTrap,\n    enableAriaHiddenSiblings,\n  } = props;\n\n  const bumperProps = {\n    'aria-hidden': true,\n    style: {\n      pointerEvents: 'none',\n      position: 'fixed', // 'fixed' prevents browsers from scrolling to bumpers when viewport does not contain them\n    },\n    tabIndex: disabled ? -1 : 0, // make bumpers tabbable only when enabled\n    'data-is-visible': true,\n    'data-is-focus-trap-zone-bumper': true,\n  } as React.HTMLAttributes<HTMLDivElement>;\n\n  const focusElementAsync = React.useCallback((element: HTMLElement) => {\n    if (element !== firstBumper.current && element !== lastBumper.current) {\n      focusAsync(element);\n    }\n  }, []);\n\n  /**\n   * Callback to force focus into FTZ (named to avoid overlap with global focus() callback).\n   * useEventCallback always returns the same callback reference but updates the implementation\n   * every render to avoid stale captured values.\n   */\n  const focusFTZ = useEventCallback(() => {\n    if (!root.current) {\n      return; // not done mounting\n    }\n\n    const { previouslyFocusedElementInTrapZone } = internalState;\n    if (\n      focusPreviouslyFocusedInnerElement &&\n      previouslyFocusedElementInTrapZone &&\n      elementContains(root.current, previouslyFocusedElementInTrapZone)\n    ) {\n      // focus on the last item that had focus in the zone before we left the zone\n      focusElementAsync(previouslyFocusedElementInTrapZone);\n      return;\n    }\n\n    let firstFocusableChild: HTMLElement | null = null;\n\n    if (typeof firstFocusableTarget === 'string') {\n      firstFocusableChild = root.current.querySelector(firstFocusableTarget);\n    } else if (firstFocusableTarget) {\n      firstFocusableChild = firstFocusableTarget(root.current);\n    } else if (firstFocusableSelector) {\n      const focusSelector =\n        typeof firstFocusableSelector === 'string' ? firstFocusableSelector : firstFocusableSelector();\n      firstFocusableChild = root.current.querySelector('.' + focusSelector);\n    }\n\n    // Fall back to first element if query selector did not match any elements.\n    if (!firstFocusableChild) {\n      firstFocusableChild = getNextElement(\n        root.current,\n        root.current.firstChild as HTMLElement,\n        false,\n        false,\n        false,\n        true,\n      );\n    }\n\n    if (firstFocusableChild) {\n      focusElementAsync(firstFocusableChild);\n    }\n  });\n\n  /** Used in root div focus/blur handlers */\n  const focusBumper = (isFirstBumper: boolean) => {\n    if (disabled || !root.current) {\n      return;\n    }\n\n    const nextFocusable =\n      isFirstBumper === internalState.hasFocus\n        ? getLastTabbable(root.current, lastBumper.current!, true, false)\n        : getFirstTabbable(root.current, firstBumper.current!, true, false);\n\n    if (nextFocusable) {\n      if (nextFocusable === firstBumper.current || nextFocusable === lastBumper.current) {\n        // This can happen when FTZ contains no tabbable elements.\n        // focusFTZ() will take care of finding a focusable element in FTZ.\n        focusFTZ();\n      } else {\n        nextFocusable.focus();\n      }\n    }\n  };\n\n  /** Root div blur handler (doesn't need useCallback since it's for a native element) */\n  const onRootBlurCapture = (ev: React.FocusEvent<HTMLDivElement>) => {\n    props.onBlurCapture?.(ev);\n    let relatedTarget = ev.relatedTarget;\n    if (ev.relatedTarget === null) {\n      // In IE11, due to lack of support, event.relatedTarget is always\n      // null making every onBlur call to be \"outside\" of the root\n      // even when it's not. Using document.activeElement is another way\n      // for us to be able to get what the relatedTarget without relying\n      // on the event\n      relatedTarget = doc!.activeElement as Element;\n    }\n    if (!elementContains(root.current, relatedTarget as HTMLElement)) {\n      internalState.hasFocus = false;\n    }\n  };\n\n  /** Root div focus handler (doesn't need useCallback since it's for a native element) */\n  const onRootFocusCapture = (ev: React.FocusEvent<HTMLDivElement>) => {\n    props.onFocusCapture?.(ev);\n\n    if (ev.target === firstBumper.current) {\n      focusBumper(true);\n    } else if (ev.target === lastBumper.current) {\n      focusBumper(false);\n    }\n\n    internalState.hasFocus = true;\n\n    if (ev.target !== ev.currentTarget && !(ev.target === firstBumper.current || ev.target === lastBumper.current)) {\n      // every time focus changes within the trap zone, remember the focused element so that\n      // it can be restored if focus leaves the pane and returns via keystroke (i.e. via a call to this.focus(true))\n      internalState.previouslyFocusedElementInTrapZone = ev.target as HTMLElement;\n    }\n  };\n\n  /** Called to restore focus on unmount or props change. (useEventCallback ensures latest prop values are used.) */\n  const returnFocusToInitiator = useEventCallback((elementToFocusOnDismiss: HTMLElement | null) => {\n    FocusTrapZone.focusStack = FocusTrapZone.focusStack!.filter(value => internalState.focusStackId !== value);\n\n    if (!doc) {\n      return;\n    }\n\n    const activeElement = doc.activeElement as HTMLElement;\n    if (\n      !disableRestoreFocus &&\n      typeof elementToFocusOnDismiss?.focus === 'function' &&\n      // only restore focus if the current focused element is within the FTZ, or if nothing is focused\n      (elementContains(root.current, activeElement) || activeElement === doc.body)\n    ) {\n      focusElementAsync(elementToFocusOnDismiss);\n    }\n  });\n\n  /** Called in window event handlers. (useEventCallback ensures latest prop values are used.) */\n  const forceFocusOrClickInTrap = useEventCallback((ev: FocusEvent | MouseEvent): void => {\n    // be sure to use the latest values here\n    if (disabled) {\n      return;\n    }\n    if (internalState.focusStackId === FocusTrapZone.focusStack!.slice(-1)[0]) {\n      const targetElement = ev.target as HTMLElement | null;\n      if (targetElement && !elementContains(root.current, targetElement)) {\n        if (doc && doc.activeElement === doc.body) {\n          setTimeout(() => {\n            if (doc && doc.activeElement === doc.body) {\n              focusFTZ();\n              internalState.hasFocus = true; // set focus here since we stop event propagation\n            }\n          }, 0);\n        } else {\n          focusFTZ();\n          internalState.hasFocus = true; // set focus here since we stop event propagation\n        }\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  });\n\n  // Update window event handlers when relevant props change\n  React.useEffect(() => {\n    const disposables: Array<() => void> = [];\n\n    if (forceFocusInsideTrap) {\n      disposables.push(on(window, 'focus', forceFocusOrClickInTrap, true));\n    }\n    if (!isClickableOutsideFocusTrap) {\n      disposables.push(on(window, 'click', forceFocusOrClickInTrap, true));\n    }\n\n    return () => {\n      disposables.forEach(dispose => dispose());\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when these two props change\n  }, [forceFocusInsideTrap, isClickableOutsideFocusTrap]);\n\n  // On prop change or first render, focus the FTZ and update focusStack if appropriate\n  React.useEffect(() => {\n    // Do nothing if disabled, or if it's a re-render and forceFocusInsideTrap is false\n    // (to match existing behavior, the FTZ handles first focus even if forceFocusInsideTrap\n    // is false, though it's debatable whether it should do this)\n    if (disabled || (!isFirstRender && !forceFocusInsideTrap) || !root.current) {\n      return;\n    }\n\n    // Transition from forceFocusInsideTrap / FTZ disabled to enabled (or initial mount)\n    FocusTrapZone.focusStack!.push(internalState.focusStackId);\n\n    const elementToFocusOnDismiss = props.elementToFocusOnDismiss || (doc!.activeElement as HTMLElement | null);\n\n    if (!disableFirstFocus && !elementContains(root.current, elementToFocusOnDismiss)) {\n      focusFTZ();\n    }\n\n    // To match existing behavior, always return focus on cleanup (even if we didn't handle\n    // initial focus), but it's debatable whether that's correct\n    return () => returnFocusToInitiator(elementToFocusOnDismiss);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when these two props change\n  }, [forceFocusInsideTrap, disabled]);\n\n  // Handle modalization separately from first focus\n  React.useEffect(() => {\n    if (!disabled && enableAriaHiddenSiblings) {\n      const unmodalize = modalize(root.current!);\n      return unmodalize;\n    }\n  }, [disabled, enableAriaHiddenSiblings, root]);\n\n  // Cleanup lifecyle method for internalState.\n  useUnmount(() => {\n    // Dispose of element references so the DOM Nodes can be garbage-collected\n    delete internalState.previouslyFocusedElementInTrapZone;\n  });\n\n  useComponentRef(componentRef, internalState.previouslyFocusedElementInTrapZone, focusFTZ);\n\n  return (\n    <div\n      // this is above the native props spread so props['aria-labelledby'] will override it if provided\n      aria-labelledby={props.ariaLabelledBy}\n      // native props include onFocus, onBlur, className\n      {...getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties)}\n      ref={mergedRootRef}\n      onFocusCapture={onRootFocusCapture}\n      onBlurCapture={onRootBlurCapture}\n    >\n      <div {...bumperProps} ref={firstBumper} />\n      {children}\n      <div {...bumperProps} ref={lastBumper} />\n    </div>\n  );\n});\n\nFocusTrapZone.displayName = COMPONENT_NAME;\nFocusTrapZone.focusStack = [];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}