{"ast":null,"code":"import * as React from 'react';\nimport { DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, DATAKTP_ARIA_TARGET } from '../../utilities/keytips/index';\nimport { useKeytipData } from './useKeytipData';\n/**\n * Hook that creates a ref which is used for passing to Keytip target element.\n * The ref will handle setting the attributes needed for Keytip to work.\n */\nexport function useKeytipRef(options) {\n  var _a = useKeytipData(options),\n    keytipId = _a.keytipId,\n    ariaDescribedBy = _a.ariaDescribedBy;\n  var contentRef = React.useCallback(function (contentElement) {\n    if (!contentElement) {\n      return;\n    }\n    var targetElement = findFirstElement(contentElement, DATAKTP_TARGET) || contentElement;\n    var executeElement = findFirstElement(contentElement, DATAKTP_EXECUTE_TARGET) || targetElement;\n    var ariaElement = findFirstElement(contentElement, DATAKTP_ARIA_TARGET) || executeElement;\n    setAttribute(targetElement, DATAKTP_TARGET, keytipId);\n    setAttribute(executeElement, DATAKTP_EXECUTE_TARGET, keytipId);\n    setAttribute(ariaElement, 'aria-describedby', ariaDescribedBy, true);\n  }, [keytipId, ariaDescribedBy]);\n  return contentRef;\n}\nexport function setAttribute(element, attributeName, attributeValue, append) {\n  if (append === void 0) {\n    append = false;\n  }\n  if (element && attributeValue) {\n    var value = attributeValue;\n    if (append) {\n      var currentValue = element.getAttribute(attributeName);\n      if (currentValue && currentValue.indexOf(attributeValue) === -1) {\n        value = currentValue + \" \" + attributeValue;\n      }\n    }\n    element.setAttribute(attributeName, value);\n  }\n}\nfunction findFirstElement(rootElement, dataAttribute) {\n  return rootElement.querySelector(\"[\" + dataAttribute + \"]\");\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,cAAc,EAAEC,sBAAsB,EAAEC,mBAAmB,QAAQ,+BAA+B;AAC3G,SAASC,aAAa,QAAQ,iBAAiB;AAG/C;;;;AAIA,OAAM,SAAUC,YAAY,CAC1BC,OAA0B;EAEpB,SAAgCF,aAAa,CAACE,OAAO,CAAC;IAApDC,QAAQ;IAAEC,eAAe,qBAA2B;EAE5D,IAAMC,UAAU,GAAwBT,KAAK,CAACU,WAAW,CACvD,UAACC,cAA+B;IAC9B,IAAI,CAACA,cAAc,EAAE;MACnB;;IAGF,IAAMC,aAAa,GAAGC,gBAAgB,CAACF,cAAc,EAAEV,cAAc,CAAC,IAAIU,cAAc;IACxF,IAAMG,cAAc,GAAGD,gBAAgB,CAACF,cAAc,EAAET,sBAAsB,CAAC,IAAIU,aAAa;IAChG,IAAMG,WAAW,GAAGF,gBAAgB,CAACF,cAAc,EAAER,mBAAmB,CAAC,IAAIW,cAAc;IAE3FE,YAAY,CAACJ,aAAa,EAAEX,cAAc,EAAEM,QAAQ,CAAC;IACrDS,YAAY,CAACF,cAAc,EAAEZ,sBAAsB,EAAEK,QAAQ,CAAC;IAC9DS,YAAY,CAACD,WAAW,EAAE,kBAAkB,EAAEP,eAAe,EAAE,IAAI,CAAC;EACtE,CAAC,EACD,CAACD,QAAQ,EAAEC,eAAe,CAAC,CAC5B;EAED,OAAOC,UAAU;AACnB;AAEA,OAAM,SAAUO,YAAY,CAC1BC,OAA2B,EAC3BC,aAAqB,EACrBC,cAAkC,EAClCC,MAAuB;EAAvB;IAAAA,cAAuB;EAAA;EAEvB,IAAIH,OAAO,IAAIE,cAAc,EAAE;IAC7B,IAAIE,KAAK,GAAGF,cAAc;IAC1B,IAAIC,MAAM,EAAE;MACV,IAAME,YAAY,GAAGL,OAAO,CAACM,YAAY,CAACL,aAAa,CAAC;MACxD,IAAII,YAAY,IAAIA,YAAY,CAACE,OAAO,CAACL,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/DE,KAAK,GAAMC,YAAY,SAAIH,cAAgB;;;IAI/CF,OAAO,CAACD,YAAY,CAACE,aAAa,EAAEG,KAAK,CAAC;;AAE9C;AAEA,SAASR,gBAAgB,CAACY,WAAwB,EAAEC,aAAqB;EACvE,OAAOD,WAAW,CAACE,aAAa,CAAC,MAAID,aAAa,MAAG,CAAC;AACxD","names":["React","DATAKTP_TARGET","DATAKTP_EXECUTE_TARGET","DATAKTP_ARIA_TARGET","useKeytipData","useKeytipRef","options","keytipId","ariaDescribedBy","contentRef","useCallback","contentElement","targetElement","findFirstElement","executeElement","ariaElement","setAttribute","element","attributeName","attributeValue","append","value","currentValue","getAttribute","indexOf","rootElement","dataAttribute","querySelector"],"sources":["C:\\Users\\hpryz\\Documents\\_Programming\\web-project\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\KeytipData\\useKeytipRef.ts"],"sourcesContent":["import * as React from 'react';\nimport { DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, DATAKTP_ARIA_TARGET } from '../../utilities/keytips/index';\nimport { useKeytipData } from './useKeytipData';\nimport type { KeytipDataOptions } from './KeytipData.types';\n\n/**\n * Hook that creates a ref which is used for passing to Keytip target element.\n * The ref will handle setting the attributes needed for Keytip to work.\n */\nexport function useKeytipRef<TElement extends HTMLElement = HTMLElement>(\n  options: KeytipDataOptions,\n): React.Ref<TElement> {\n  const { keytipId, ariaDescribedBy } = useKeytipData(options);\n\n  const contentRef: React.Ref<TElement> = React.useCallback(\n    (contentElement: TElement | null): void => {\n      if (!contentElement) {\n        return;\n      }\n\n      const targetElement = findFirstElement(contentElement, DATAKTP_TARGET) || contentElement;\n      const executeElement = findFirstElement(contentElement, DATAKTP_EXECUTE_TARGET) || targetElement;\n      const ariaElement = findFirstElement(contentElement, DATAKTP_ARIA_TARGET) || executeElement;\n\n      setAttribute(targetElement, DATAKTP_TARGET, keytipId);\n      setAttribute(executeElement, DATAKTP_EXECUTE_TARGET, keytipId);\n      setAttribute(ariaElement, 'aria-describedby', ariaDescribedBy, true);\n    },\n    [keytipId, ariaDescribedBy],\n  );\n\n  return contentRef;\n}\n\nexport function setAttribute(\n  element: HTMLElement | null,\n  attributeName: string,\n  attributeValue: string | undefined,\n  append: boolean = false,\n): void {\n  if (element && attributeValue) {\n    let value = attributeValue;\n    if (append) {\n      const currentValue = element.getAttribute(attributeName);\n      if (currentValue && currentValue.indexOf(attributeValue) === -1) {\n        value = `${currentValue} ${attributeValue}`;\n      }\n    }\n\n    element.setAttribute(attributeName, value);\n  }\n}\n\nfunction findFirstElement(rootElement: HTMLElement, dataAttribute: string): HTMLElement | null {\n  return rootElement.querySelector(`[${dataAttribute}]`);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}